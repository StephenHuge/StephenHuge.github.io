[{"title":"Git设置alias","date":"2022-12-18T13:30:57.000Z","path":"2022/12/18/Git设置alias/","content":"<p> 换电脑的时候经常需要重新配置，在此处总结一下。</p>\n<p>Git alias就是用简化的命令替代原有的git命令，可以提高效率，例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git co master <span class=\"comment\"># git checkout master</span></span><br><span class=\"line\">git pl <span class=\"comment\"># git pull</span></span><br><span class=\"line\">git ps <span class=\"comment\"># git push</span></span><br><span class=\"line\">git sh <span class=\"comment\"># git stash</span></span><br><span class=\"line\">git mg master <span class=\"comment\"># git merge master</span></span><br><span class=\"line\">git br <span class=\"comment\"># git branch</span></span><br><span class=\"line\">git st <span class=\"comment\"># git status</span></span><br></pre></td></tr></table></figure>\n<p>MacOS需要配置的文件是<code>~/.gitconfig</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch ~/.gitconfig</span><br><span class=\"line\">vim ~/.gitconfig</span><br></pre></td></tr></table></figure>\n<p>把下面的内容粘贴进去</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"built_in\">alias</span>]</span><br><span class=\"line\">co=checkout</span><br><span class=\"line\">st=status</span><br><span class=\"line\">pl=pull</span><br><span class=\"line\">ps=push</span><br><span class=\"line\">br=branch</span><br><span class=\"line\">sh=stash</span><br><span class=\"line\">mg=merge</span><br></pre></td></tr></table></figure>\n<p>之后重新打开一个shell界面，就可以正常使用了～</p>\n","link":"","permalink":"https://stevehuge.github.io/2022/12/18/Git%E8%AE%BE%E7%BD%AEalias/","categories":[],"tags":[{"name":"Git","slug":"Git","permalink":"https://stevehuge.github.io/tags/Git/"}]},{"title":"如何解决Maven引用冲突？","date":"2022-12-15T15:07:28.000Z","path":"2022/12/15/如何解决Maven引用冲突？/","content":"","link":"","permalink":"https://stevehuge.github.io/2022/12/15/%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3Maven%E5%BC%95%E7%94%A8%E5%86%B2%E7%AA%81%EF%BC%9F/","categories":[],"tags":[{"name":"Maven","slug":"Maven","permalink":"https://stevehuge.github.io/tags/Maven/"}]},{"title":"Redis实现分布式锁","date":"2022-12-15T11:23:09.000Z","path":"2022/12/15/Redis实现分布式锁/","content":"<h1 id=\"1-业务场景\"><a href=\"#1-业务场景\" class=\"headerlink\" title=\"1. 业务场景\"></a>1. 业务场景</h1><p>经常在需要防止重复调用的业务逻辑中（例如秒杀、防止重复消费等逻辑）使用分布式锁，使用redis实现时常见的实现方式。平时只是使用，但是并没有专门总结，今天来做下总结。</p>\n<h1 id=\"2-redis实现\"><a href=\"#2-redis实现\" class=\"headerlink\" title=\"2. redis实现\"></a>2. redis实现</h1><p>先使用docker开启一个redis实例</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 开启6379端口映射 对数据和配置进行volume持久化 并且启动后执行</span></span><br><span class=\"line\"><span class=\"comment\"># redis-server /etc/redis/redis.conf命令 </span></span><br><span class=\"line\">$ docker run -d -p 6379:6379 --name my-redis \\</span><br><span class=\"line\">-v /mydata/redis/data:/data \\</span><br><span class=\"line\">-v /mydata/redis/conf/redis.conf:/etc/redis/redis.conf \\</span><br><span class=\"line\">--restart=always --network common-network redis:latest \\ redis-server /etc/redis/redis.conf</span><br></pre></td></tr></table></figure>\n<p>进入redis内部</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker <span class=\"built_in\">exec</span> -it my-redis redis-cli</span><br></pre></td></tr></table></figure>\n<h2 id=\"a-使用-setnx-expire\"><a href=\"#a-使用-setnx-expire\" class=\"headerlink\" title=\"a. 使用 setnx + expire\"></a>a. 使用 setnx + expire</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># setnx设置kv</span></span><br><span class=\"line\">127.0.0.1:6379&gt; setnx test_key dummy</span><br><span class=\"line\">OK</span><br><span class=\"line\"><span class=\"comment\"># expire设置过期时间</span></span><br><span class=\"line\">127.0.0.1:6379&gt; expire test_key 100</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\"><span class=\"comment\"># 再次配置，由于key还是没有过期，所以设置返回0，表示失败</span></span><br><span class=\"line\">127.0.0.1:6379&gt; setnx test_key aa</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0</span><br></pre></td></tr></table></figure>\n<p>缺点：setnx和expire不是原子操作，如果setnx后还没有expire操作，redis挂了，这个锁将没法过期了，影响业务。</p>\n<h2 id=\"b-使用set-扩展命令\"><a href=\"#b-使用set-扩展命令\" class=\"headerlink\" title=\"b. 使用set 扩展命令\"></a>b. 使用set 扩展命令</h2><p>命令如下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># set命令格式</span></span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> key value [NX|XX] [GET] [EX seconds|PX milliseconds|EXAT unix-time-seconds|PXAT unix-time-milliseconds|KEEPTTL]</span><br></pre></td></tr></table></figure>\n<p>例如可以通过以下命令设置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 设置100秒超时，这是一个原子操作</span></span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> test_key dummy NX EX 100</span><br></pre></td></tr></table></figure>\n<h2 id=\"c-使用Lua脚本实现\"><a href=\"#c-使用Lua脚本实现\" class=\"headerlink\" title=\"c. 使用Lua脚本实现\"></a>c. 使用Lua脚本实现</h2><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> redis.call(<span class=\"string\">'setnx'</span>,KEYS[<span class=\"number\">1</span>],ARGV[<span class=\"number\">1</span>]) == <span class=\"number\">1</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">   redis.call(<span class=\"string\">'expire'</span>,KEYS[<span class=\"number\">1</span>],ARGV[<span class=\"number\">2</span>])</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">end</span>;</span><br></pre></td></tr></table></figure>\n<p>redis中</p>\n<h1 id=\"3-Java实现\"><a href=\"#3-Java实现\" class=\"headerlink\" title=\"3. Java实现\"></a>3. Java实现</h1>","link":"","permalink":"https://stevehuge.github.io/2022/12/15/Redis%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/","categories":[],"tags":[{"name":"Redis， 分布式","slug":"Redis，-分布式","permalink":"https://stevehuge.github.io/tags/Redis%EF%BC%8C-%E5%88%86%E5%B8%83%E5%BC%8F/"}]},{"title":"Maven基础快速总结","date":"2022-12-13T15:07:51.000Z","path":"2022/12/13/Maven基础快速总结/","content":"","link":"","permalink":"https://stevehuge.github.io/2022/12/13/Maven%E5%9F%BA%E7%A1%80%E5%BF%AB%E9%80%9F%E6%80%BB%E7%BB%93/","categories":[],"tags":[{"name":"Maven","slug":"Maven","permalink":"https://stevehuge.github.io/tags/Maven/"}]},{"title":"Docker使用Kafka","date":"2022-12-13T15:05:06.000Z","path":"2022/12/13/Docker使用Kafka/","content":"","link":"","permalink":"https://stevehuge.github.io/2022/12/13/Docker%E4%BD%BF%E7%94%A8Kafka/","categories":[],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://stevehuge.github.io/tags/Docker/"},{"name":"Kafka","slug":"Kafka","permalink":"https://stevehuge.github.io/tags/Kafka/"},{"name":"消息队列","slug":"消息队列","permalink":"https://stevehuge.github.io/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"}]},{"title":"Java秒杀系统设计","date":"2022-12-13T15:03:28.000Z","path":"2022/12/13/Java秒杀系统设计/","content":"","link":"","permalink":"https://stevehuge.github.io/2022/12/13/Java%E7%A7%92%E6%9D%80%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/","categories":[],"tags":[{"name":"Java","slug":"Java","permalink":"https://stevehuge.github.io/tags/Java/"},{"name":"架构","slug":"架构","permalink":"https://stevehuge.github.io/tags/%E6%9E%B6%E6%9E%84/"},{"name":"系统设计","slug":"系统设计","permalink":"https://stevehuge.github.io/tags/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/"}]},{"title":"Java秒杀系统设计","date":"2022-12-13T15:03:28.000Z","path":"2022/12/13/post/","content":"","link":"","permalink":"https://stevehuge.github.io/2022/12/13/post/","categories":[],"tags":[{"name":"Java","slug":"Java","permalink":"https://stevehuge.github.io/tags/Java/"},{"name":"架构","slug":"架构","permalink":"https://stevehuge.github.io/tags/%E6%9E%B6%E6%9E%84/"},{"name":"系统设计","slug":"系统设计","permalink":"https://stevehuge.github.io/tags/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/"}]},{"title":"如何实现分布式Session-下？","date":"2022-09-28T12:47:57.000Z","path":"2022/09/28/如何实现分布式Session-下/","content":"<p><img src=\"https://steve-blog-pics.oss-cn-nanjing.aliyuncs.com/imgs/image-20220912000517236.png\" alt=\"image-20220912000517236\"></p>\n<a id=\"more\"></a>\n<p>上文简单介绍了Cookie和Session，以及为什么需要分布式Session，本文介绍具体实现。 <img src=\"https://steve-blog-pics.oss-cn-nanjing.aliyuncs.com/imgs/image-20220916010212956.png\" alt=\"image-20220916010212956\"></p>\n<p>我们打算用docker-compose.yml实现以上服务端结构。为了实现分布式session，我们先需要完成以下工作：</p>\n<ul>\n<li>SpringBoot通过redis保存session&amp;登录功能</li>\n<li>Dockerfile构建单个tomcat（SpringBoot）服务</li>\n<li>编写docker-compose.yml实现分布式session功能：编排nginx、tomcat和redis</li>\n</ul>\n<h1 id=\"1-SpringBoot通过redis保存session-amp-登录功能\"><a href=\"#1-SpringBoot通过redis保存session-amp-登录功能\" class=\"headerlink\" title=\"1. SpringBoot通过redis保存session&amp;登录功能\"></a>1. SpringBoot通过redis保存session&amp;登录功能</h1><p>登录流程如下：</p>\n<ol>\n<li>先创建SpringBoot空应用，其中添加一下要用到的功能：SpringWeb（页面登录）、Redis（存储session）、SpringSession（由Spring实现）</li>\n</ol>\n<p>功能实现是简单的，要点如下：</p>\n<ul>\n<li>登录页面和登录后的页面</li>\n<li>登录用的controller接口</li>\n<li>鉴权用的Filter</li>\n<li>集成redis和SpringSession</li>\n</ul>\n<p>实现后文件结构如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├── pom.xml</span><br><span class=\"line\">└── src</span><br><span class=\"line\">    ├── main</span><br><span class=\"line\">    │   ├── java</span><br><span class=\"line\">    │   │   └── my</span><br><span class=\"line\">    │   │       └── seckill</span><br><span class=\"line\">    │   │           ├── AuthFilter.java <span class=\"comment\"># 实现登录功能的校验 和未登录时重定向</span></span><br><span class=\"line\">    │   │           ├── UserService.java <span class=\"comment\"># 用户登录服务，用于校验提交上来的账号和密码</span></span><br><span class=\"line\">    │   │           ├── LoginController.java <span class=\"comment\"># 登录使用的RESTful API和页面mapping方法</span></span><br><span class=\"line\">    │   │           ├── RedisConfig.java <span class=\"comment\"># Redis配置类</span></span><br><span class=\"line\">    │   │           └── SeckillProjectApplication.java <span class=\"comment\"># 启动类</span></span><br><span class=\"line\">    │   └── resources</span><br><span class=\"line\">    │       ├── application.properties <span class=\"comment\"># 配置文件</span></span><br><span class=\"line\">    │       ├── static <span class=\"comment\"># 静态文件、页面文件夹</span></span><br><span class=\"line\">    │       └── templates <span class=\"comment\"># thymeleaf动态页面模板文件夹</span></span><br><span class=\"line\">    │           ├── login.html <span class=\"comment\"># 登录页面</span></span><br><span class=\"line\">    │           └── main.html <span class=\"comment\">#登录后主页面</span></span><br></pre></td></tr></table></figure>\n<p>此处需要注意<code>resource</code>文件夹下两个文件夹<code>static</code>和<code>templates</code>的区别：</p>\n<ul>\n<li><p>功能不同：static文件夹存放静态资源，例如html、css、js文件等；templates文件夹存放thymeleaf的动态模板文件，一般也是html（如果使用，必须在POM文件中引入thymeleaf的dependency）</p>\n</li>\n<li><p>使用方式不同：如果想用controller的mapping方法返回视图，static文件夹下需要方法返回文件全名，例如想要返回static文件夹下<code>order.html</code>，controller方法需要这么实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/order\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getOrderPage</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 这里必须写全名</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"order.html\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>相同的文件名，如想要返回templates文件夹下<code>order.html</code>，首先需要在pom中引入spring-boot-starter-thymeleaf</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;thymeleaf.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>然后实现controller的mapping方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/order\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getOrderPage</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 这里只写文件名称，不写后缀</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"order\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里能如此实现是因为spring-boot-autoconfigure设定好了2个配置项<code>spring.thymeleaf.prefix</code>和<code>spring.thymeleaf.suffix</code>。具体实现在ThymeleafProperties类下：</p>\n<p> <img src=\"https://steve-blog-pics.oss-cn-nanjing.aliyuncs.com/imgs/image-20221003002457596.png\" alt=\"image-20221003002457596\"></p>\n<p>接下来看下具体代码实现：</p>\n<p>AuthFilter.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> my.seckill;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.Filter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.FilterChain;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.Cookie;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.time.LocalDateTime;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 登录权限校验Filter</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@Slf</span>4j</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AuthFilter</span> <span class=\"keyword\">implements</span> <span class=\"title\">Filter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doFilter</span><span class=\"params\">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class=\"keyword\">throws</span> IOException, ServletException </span>&#123;</span><br><span class=\"line\">        HttpServletRequest request = (HttpServletRequest) servletRequest;</span><br><span class=\"line\">        Cookie[] cookies = request.getCookies();</span><br><span class=\"line\">        String requestURI = request.getRequestURI();</span><br><span class=\"line\">        String requestMethod = request.getMethod();</span><br><span class=\"line\">        log.info(LocalDateTime.now() + <span class=\"string\">\" 收到请求：\"</span> + requestMethod + <span class=\"string\">\" \"</span> + requestURI);</span><br><span class=\"line\">        <span class=\"comment\">// 静态资源不过滤</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (requestURI.endsWith(<span class=\"string\">\".css\"</span>) || requestURI.endsWith(<span class=\"string\">\".js\"</span>) || requestURI.endsWith(<span class=\"string\">\".ico\"</span>)) &#123;</span><br><span class=\"line\">            filterChain.doFilter(servletRequest, servletResponse);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 如果cookie为空，证明是第一次请求，那么肯定没登录;</span></span><br><span class=\"line\">        <span class=\"comment\">// 如果登录成功后，会写入一个名叫login_user的cookie和名叫user_session_id的session</span></span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> isUserLoggedIn = cookies != <span class=\"keyword\">null</span> &amp;&amp; Arrays.stream(cookies).anyMatch(x -&gt; x.getName().equals(<span class=\"string\">\"login_user\"</span>))</span><br><span class=\"line\">                &amp;&amp; request.getSession().getAttribute(<span class=\"string\">\"user_session_id\"</span>) != <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"string\">\"/exit\"</span>.equals(requestURI)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 包含两种情况：已经登录 / 其它页面退出登录或者登录超时</span></span><br><span class=\"line\">            <span class=\"comment\">// 如果已经登录而且要退出登录的话，调用对应业务逻辑</span></span><br><span class=\"line\">            filterChain.doFilter(servletRequest, servletResponse);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 如果未登录，而且页面不是登录页面就转到登录页面</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!isUserLoggedIn) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 此处会有2种方法 GET &amp; POST</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"string\">\"/login\"</span>.equals(requestURI)) &#123;</span><br><span class=\"line\">                filterChain.doFilter(servletRequest, servletResponse);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// forward和redirect的区别：</span></span><br><span class=\"line\">                <span class=\"comment\">//      servletRequest.getRequestDispatcher(\"/login\").forward(servletRequest, servletResponse);</span></span><br><span class=\"line\">                ((HttpServletResponse) servletResponse).sendRedirect(<span class=\"string\">\"/login\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"string\">\"/user\"</span>.equals(requestURI)) &#123;</span><br><span class=\"line\">                filterChain.doFilter(servletRequest, servletResponse);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                ((HttpServletResponse) servletResponse).sendRedirect(<span class=\"string\">\"/user\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>关于Cookie的几种操作：</p>\n<p>登录时添加Cookie，传送到前端：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@PostMapping</span>(<span class=\"string\">\"/login\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@ResponseBody</span> <span class=\"function\">String <span class=\"title\">doLogin</span><span class=\"params\">(@RequestBody LoginInfo loginInfo, HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (loginInfo == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"No login info found!\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> loginPassed = userService.checkUserAndPassword(loginInfo.getUser(), loginInfo.getPassword());</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!loginPassed) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Login failed!\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    log.info(loginInfo.toString());</span><br><span class=\"line\">    HttpSession session = request.getSession();</span><br><span class=\"line\">    session.setAttribute(<span class=\"string\">\"user_session_id\"</span>, MD5Encoder.encode(loginInfo.user.getBytes()));</span><br><span class=\"line\">    Cookie cookie = <span class=\"keyword\">new</span> Cookie(<span class=\"string\">\"login_user\"</span>, loginInfo.user);</span><br><span class=\"line\">    cookie.setPath(<span class=\"string\">\"/\"</span>);</span><br><span class=\"line\">    cookie.setDomain(<span class=\"string\">\"localhost\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 如果设置55min</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (loginInfo.rememberMe) &#123;</span><br><span class=\"line\">        cookie.setMaxAge(<span class=\"number\">300</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 浏览器退出即删除</span></span><br><span class=\"line\">        cookie.setMaxAge(-<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    response.addCookie(cookie);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"Success\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>退出登录时删除Cookie</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@DeleteMapping</span>(<span class=\"string\">\"exit\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@ResponseBody</span> <span class=\"function\">String <span class=\"title\">exitLogin</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</span><br><span class=\"line\">    Cookie loginUserCookie = Arrays.stream(request.getCookies())</span><br><span class=\"line\">            .filter(x -&gt; x.getName().equals(<span class=\"string\">\"login_user\"</span>)).findFirst().orElse(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (loginUserCookie == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Not logged in!\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// Cookie没有方法删除，所以通过这种方式来删除cookie</span></span><br><span class=\"line\">    loginUserCookie.setValue(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 设置maxAge为0则直接删除cookie</span></span><br><span class=\"line\">    loginUserCookie.setMaxAge(<span class=\"number\">0</span>);</span><br><span class=\"line\">    response.addCookie(loginUserCookie);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"Exit success\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>检查Cookie是否存在，如果存在进入到user页面</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/user\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ModelAndView <span class=\"title\">userDetail</span><span class=\"params\">(HttpServletRequest request)</span> </span>&#123;</span><br><span class=\"line\">    Optional&lt;Cookie&gt; loginUser = Arrays.stream(request.getCookies())</span><br><span class=\"line\">            .filter(x -&gt; x.getName().equals(<span class=\"string\">\"login_user\"</span>)).findFirst();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (loginUser.isEmpty()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ModelAndView(<span class=\"string\">\"login\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    String value = loginUser.get().getValue();</span><br><span class=\"line\">    ModelAndView modelAndView = <span class=\"keyword\">new</span> ModelAndView(<span class=\"string\">\"user\"</span>);</span><br><span class=\"line\">    modelAndView.addObject(<span class=\"string\">\"name\"</span>, value);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> modelAndView;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上是基本的登录功能，完整代码参见<a href=\"https://github.com/StephenHuge/blog-code/tree/master/seckill-project\" target=\"_blank\" rel=\"noopener\">此处</a>。</p>\n<p>通过redis储存session非常简单，分以下几步：</p>\n<ol>\n<li>本地需要先启动redis服务</li>\n<li>在项目pom.xml中引入session-redis和data-redis的dependency；</li>\n<li>再在application.properties中加入Redis的配置，</li>\n<li>启动应用即可把session存入到Redis中</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.session&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-session-data-redis&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">spring.redis.host</span>=<span class=\"string\">localhost</span></span><br><span class=\"line\"><span class=\"meta\">spring.redis.port</span>=<span class=\"string\">6379</span></span><br><span class=\"line\"><span class=\"meta\">spring.redis.database</span>=<span class=\"string\">0</span></span><br><span class=\"line\"><span class=\"comment\"># 如果Redis没密码就不用设置</span></span><br><span class=\"line\"><span class=\"comment\"># spring.redis.password=abc</span></span><br><span class=\"line\"><span class=\"meta\">server.servlet.session.persistent</span>=<span class=\"string\">true</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"2-Dockerfile构建单个tomcat（SpringBoot）服务\"><a href=\"#2-Dockerfile构建单个tomcat（SpringBoot）服务\" class=\"headerlink\" title=\"2. Dockerfile构建单个tomcat（SpringBoot）服务\"></a>2. Dockerfile构建单个tomcat（SpringBoot）服务</h1><figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> openjdk:<span class=\"number\">11</span></span><br><span class=\"line\"><span class=\"keyword\">MAINTAINER</span> Steve HU</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\"> target/seckill-project-0.0.1-SNAPSHOT.jar /usr/<span class=\"built_in\">local</span>/jar/seckill-project-0.0.1-SNAPSHOT.jar</span></span><br><span class=\"line\"><span class=\"comment\"># 使用docker环境的配置</span></span><br><span class=\"line\"><span class=\"comment\">#CMD [\"java\", \"-jar\", \"/usr/local/jar/seckill-project-0.0.1-SNAPSHOT.jar\", \"--spring.profiles.active=docker\"]</span></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"bash\"> [<span class=\"string\">\"java\"</span>, <span class=\"string\">\"-jar\"</span>, <span class=\"string\">\"/usr/local/jar/seckill-project-0.0.1-SNAPSHOT.jar\"</span>, <span class=\"string\">\"--spring.profiles.active=docker-compose\"</span>]</span></span><br></pre></td></tr></table></figure>\n<p>构建运行前脚本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 本地编译代码并打包</span></span><br><span class=\"line\">mvn compile package -DskipTests=<span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 构建最新的image</span></span><br><span class=\"line\">docker build  -t seckill_img:latest .</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 停止可能在运行的container</span></span><br><span class=\"line\">docker stop seckill</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除可能存在的container</span></span><br><span class=\"line\">docker rm seckill</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># The --rm option means to remove the container once it exits/stops.</span></span><br><span class=\"line\"><span class=\"comment\"># The -d flag means to start the container detached (in the background).</span></span><br><span class=\"line\">docker run -d -p 8080:8080 -p 6379:6379 --name seckill seckill_img</span><br></pre></td></tr></table></figure>\n<h1 id=\"3-编写docker-compose-yml实现分布式session功能\"><a href=\"#3-编写docker-compose-yml实现分布式session功能\" class=\"headerlink\" title=\"3. 编写docker-compose.yml实现分布式session功能\"></a>3. 编写docker-compose.yml实现分布式session功能</h1><p>docker-compose.yml核心概念：</p>\n<ul>\n<li>service 服务：一个个应用实例，例如mysql容器，nginx容器，订单微服务等</li>\n<li>project 工程：由一组关联的服务组成的一个<strong>完整业务单元</strong>，在docker-compose.yml中定义。</li>\n</ul>\n<p>使用docker-compose的步骤：</p>\n<ul>\n<li>编写Dockerfile构建单个服务的镜像</li>\n<li>使用docker-compose.yml定义一个完整业务单元，安排好整体应用中的各个容器服务</li>\n<li>执行<code>docker-compose up</code>命令启动整个工程，完成部署上线 </li>\n</ul>\n<p>服务列表：</p>\n<ul>\n<li>springboot * 3</li>\n<li>nginx</li>\n<li>redis</li>\n</ul>\n<p>docker-compose.yml如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">'2'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 构建自定义bridge网络，所有container都通过此网络进行通信</span></span><br><span class=\"line\"><span class=\"attr\">networks:</span></span><br><span class=\"line\">  <span class=\"attr\">my-network:</span></span><br><span class=\"line\">    <span class=\"attr\">driver:</span> <span class=\"string\">bridge</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"comment\"># nginx服务，负责负载均衡</span></span><br><span class=\"line\">  <span class=\"attr\">nginx_lbs:</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">nginx_lbs</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">'nginx:latest'</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">\"8080:80\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 本地编写conf文件，对nginx进行配置</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">'./nginx.conf:/etc/nginx/nginx.conf:ro'</span></span><br><span class=\"line\">    <span class=\"attr\">networks:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">my-network</span></span><br><span class=\"line\">    <span class=\"comment\"># 依赖于3个app和redis</span></span><br><span class=\"line\">    <span class=\"attr\">depends_on:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">my_app_1</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">my_app_2</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">my_app_3</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">redis</span></span><br><span class=\"line\">    <span class=\"comment\"># debug mode https://github.com/docker-library/docs/tree/master/nginx#using-environment-variables-in-nginx-configuration</span></span><br><span class=\"line\">    <span class=\"comment\"># 开启debug模式</span></span><br><span class=\"line\">    <span class=\"attr\">command:</span> <span class=\"string\">[</span> <span class=\"string\">nginx-debug,</span> <span class=\"string\">'-g'</span><span class=\"string\">,</span> <span class=\"string\">'daemon off;'</span> <span class=\"string\">]</span></span><br><span class=\"line\">  <span class=\"attr\">redis:</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">redis_db</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">'redis:latest'</span></span><br><span class=\"line\">    <span class=\"comment\"># 使用expose关键字的话，同network的container可以访问，但是host机器访问不了</span></span><br><span class=\"line\">    <span class=\"attr\">expose:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">6379</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">ALLOW_EMPTY_PASSWORD=yes</span></span><br><span class=\"line\">    <span class=\"attr\">networks:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">my-network</span></span><br><span class=\"line\">  <span class=\"attr\">my_app_1:</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">app_1</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">'seckill_img'</span></span><br><span class=\"line\">    <span class=\"comment\"># 使用ports关键字的话，同network的container可以访问，host机器也可以访问</span></span><br><span class=\"line\">    <span class=\"comment\"># 此处使用ports而不是expose是为了方便debug</span></span><br><span class=\"line\">    <span class=\"comment\">#    expose:</span></span><br><span class=\"line\">    <span class=\"comment\">#      - \"8080\"</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">\"8081:8080\"</span></span><br><span class=\"line\">    <span class=\"attr\">networks:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">my-network</span></span><br><span class=\"line\">  <span class=\"attr\">my_app_2:</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">app_2</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">'seckill_img'</span></span><br><span class=\"line\">    <span class=\"comment\"># 使用ports关键字的话，同network的container可以访问，host机器也可以访问</span></span><br><span class=\"line\">    <span class=\"comment\">#    expose:</span></span><br><span class=\"line\">    <span class=\"comment\">#      - \"8080\"</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">\"8082:8080\"</span></span><br><span class=\"line\">    <span class=\"attr\">networks:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">my-network</span></span><br><span class=\"line\">    <span class=\"attr\">depends_on:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">redis</span></span><br><span class=\"line\">  <span class=\"attr\">my_app_3:</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">app_3</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">'seckill_img'</span></span><br><span class=\"line\">    <span class=\"comment\"># 使用ports关键字的话，同network的container可以访问，host机器也可以访问</span></span><br><span class=\"line\">    <span class=\"comment\">#    expose:</span></span><br><span class=\"line\">    <span class=\"comment\">#      - \"8080\"</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">\"8083:8080\"</span></span><br><span class=\"line\">    <span class=\"attr\">networks:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">my-network</span></span><br><span class=\"line\">    <span class=\"attr\">depends_on:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">redis</span></span><br></pre></td></tr></table></figure>\n<p>其中nginx配置如下：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># https://nginx.org/en/docs/beginners_guide.html</span></span><br><span class=\"line\"><span class=\"attribute\">worker_processes</span>  <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">events</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">worker_connections</span>  <span class=\"number\">1024</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">http</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">include</span>       mime.types;</span><br><span class=\"line\">    <span class=\"attribute\">default_type</span>  application/octet-stream;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">sendfile</span>        <span class=\"literal\">on</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">keepalive_timeout</span>  <span class=\"number\">65</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#增加upstream，配置多个tomcat，其中权重均为1</span></span><br><span class=\"line\">    <span class=\"attribute\">upstream</span> tomcatcluster &#123;</span><br><span class=\"line\">        <span class=\"comment\">#my_app_1</span></span><br><span class=\"line\">        <span class=\"attribute\">server</span>   my_app_1:<span class=\"number\">8080</span> weight=<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"comment\">#my_app_2</span></span><br><span class=\"line\">        <span class=\"attribute\">server</span>   my_app_2:<span class=\"number\">8080</span> weight=<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"comment\">#my_app_3</span></span><br><span class=\"line\">        <span class=\"attribute\">server</span>   my_app_3:<span class=\"number\">8080</span> weight=<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"section\">server</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">listen</span>       <span class=\"number\">80</span>;</span><br><span class=\"line\">        <span class=\"attribute\">server_name</span>  localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">              <span class=\"comment\"># 此处url最后有无'/'是有区别的</span></span><br><span class=\"line\">              <span class=\"attribute\">proxy_pass</span>         http://tomcatcluster;</span><br><span class=\"line\">              <span class=\"comment\"># https://developer.aliyun.com/article/248429</span></span><br><span class=\"line\">              <span class=\"attribute\">proxy_redirect</span>     http://tomcatcluster http://localhost:8080;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attribute\">error_page</span>   <span class=\"number\">500</span> <span class=\"number\">502</span> <span class=\"number\">503</span> <span class=\"number\">504</span>  /50x.html;</span><br><span class=\"line\">        <span class=\"attribute\">location</span> = /50x.html &#123;</span><br><span class=\"line\">            <span class=\"attribute\">root</span>   html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>完整代码参见<a href=\"https://github.com/StephenHuge/blog-code/tree/master/seckill-project\" target=\"_blank\" rel=\"noopener\">此处</a>。</p>\n<h1 id=\"4-思考：Cookie和Session还有必要吗？\"><a href=\"#4-思考：Cookie和Session还有必要吗？\" class=\"headerlink\" title=\"4. 思考：Cookie和Session还有必要吗？\"></a>4. 思考：Cookie和Session还有必要吗？</h1><p>待续。</p>\n<h1 id=\"5-其它\"><a href=\"#5-其它\" class=\"headerlink\" title=\"5. 其它\"></a>5. 其它</h1><p>下载所有本地jar的documentation：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn dependency:resolve -Dclassifier=sources</span><br></pre></td></tr></table></figure>\n","link":"","permalink":"https://stevehuge.github.io/2022/09/28/%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8FSession-%E4%B8%8B/","categories":[],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://stevehuge.github.io/tags/Docker/"},{"name":"Java","slug":"Java","permalink":"https://stevehuge.github.io/tags/Java/"},{"name":"分布式","slug":"分布式","permalink":"https://stevehuge.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"},{"name":"Session","slug":"Session","permalink":"https://stevehuge.github.io/tags/Session/"},{"name":"Web","slug":"Web","permalink":"https://stevehuge.github.io/tags/Web/"}]},{"title":"nginx极简入门","date":"2022-09-08T12:52:35.000Z","path":"2022/09/08/nginx极简入门/","content":"<p>由于<a href=\"\">分布式session</a>一文中用到了Nginx相关知识，因此在此处做下总结。本文不是Nginx基础教程，而只是简单的学习总结，如果需要详细的教程，请参考官网文档。</p>\n<a id=\"more\"></a>\n<h1 id=\"1-什么是nginx服务器\"><a href=\"#1-什么是nginx服务器\" class=\"headerlink\" title=\"1. 什么是nginx服务器\"></a>1. 什么是nginx服务器</h1><h1 id=\"2-nginx能干什么\"><a href=\"#2-nginx能干什么\" class=\"headerlink\" title=\"2. nginx能干什么\"></a>2. nginx能干什么</h1><h2 id=\"2-1-负载均衡\"><a href=\"#2-1-负载均衡\" class=\"headerlink\" title=\"2.1 负载均衡\"></a>2.1 负载均衡</h2><h2 id=\"2-2-反向代理\"><a href=\"#2-2-反向代理\" class=\"headerlink\" title=\"2.2 反向代理\"></a>2.2 反向代理</h2><h2 id=\"2-3-动静分离\"><a href=\"#2-3-动静分离\" class=\"headerlink\" title=\"2.3 动静分离\"></a>2.3 动静分离</h2><h1 id=\"3-nginx\"><a href=\"#3-nginx\" class=\"headerlink\" title=\"3. nginx\"></a>3. nginx</h1><h2 id=\"3-1-常用命令\"><a href=\"#3-1-常用命令\" class=\"headerlink\" title=\"3.1 常用命令\"></a>3.1 常用命令</h2><p>nginx -v</p>\n<p>nginx -s stop</p>\n<p>ps -ef | grep nginx</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 重新加载配置文件</span></span><br><span class=\"line\">nginx -s reload</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-2-nginx配置文件\"><a href=\"#3-2-nginx配置文件\" class=\"headerlink\" title=\"3.2 nginx配置文件\"></a>3.2 nginx配置文件</h2><p>由3部分组成</p>\n<p>全局块</p>\n<p>event块</p>\n<p>服务器和用户网络的连接，最大连接数等</p>\n<p>http块</p>\n<p>配置最频繁的地方</p>\n<p>http全局块 + server块</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server </span><br><span class=\"line\"># 监听端口</span><br><span class=\"line\"></span><br><span class=\"line\">listen 8080；</span><br><span class=\"line\"></span><br><span class=\"line\">server_name localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">location块</span><br></pre></td></tr></table></figure>\n<p>反向代理实例 通过改hosts文件和nginx配置，通过nginx代理访问本地无法直接访问的地址。</p>\n<p>负载均衡实例：http块 </p>\n<p>upstream your_server_name {</p>\n<p> server 127.0.0.1:9090;</p>\n<p> server 127.0.0.1:9091;</p>\n<p> }</p>\n<p>负载均衡策略：轮询、weight、ip_hash(根据请求ip做hash，每个用户访问的机器固定，可以解决分布式session问题)、fair（根据服务器的响应时间来分配，响应时间越短的优先分配）</p>\n<p>动静分离：把静态文件独立成单独的域名，放在独立的服务器上，是比较主流的方式；第二种是动态和静态放一起发布，通过nginx分开（为啥要分开？）</p>\n<p>提高访问效率。expires参数减少不常变动文件的缓存过期时间。</p>\n<p>动静分离的例子有点挫，后面自己找一个吧。</p>\n<hr>\n<p>高可用例子：nginx宕机了就没法实现反向代理了，如何高可用？2台nginx + 都安装keepalived + 对外使用同一个虚拟ip。</p>\n<p>配置keepalived后，实现高可用。</p>\n<ul>\n<li><p>启动nginx（两个均配置好tomcat ）</p>\n</li>\n<li><p>启动keepalived</p>\n</li>\n</ul>\n<p>原理</p>\n<p>master进程和worker进程</p>\n<p>worker争抢client请求</p>\n<ul>\n<li>机制的好处？ </li>\n<li>连接数worker_connection， 一个client最多占用worker几个连接？2或4个（异步请求算2个连接，如果需要请求tomcat就4个，否则2个。）</li>\n<li>一个master，4个worker，每个worker怎么计算最大并发数？ 普通静态代理：worker_connection <em> worker_count / 2 ；http反向代理的话：worker_connection </em> worker_count / 4</li>\n<li></li>\n</ul>\n","link":"","permalink":"https://stevehuge.github.io/2022/09/08/nginx%E6%9E%81%E7%AE%80%E5%85%A5%E9%97%A8/","categories":[],"tags":[{"name":"入门","slug":"入门","permalink":"https://stevehuge.github.io/tags/%E5%85%A5%E9%97%A8/"},{"name":"nginx","slug":"nginx","permalink":"https://stevehuge.github.io/tags/nginx/"},{"name":"服务器","slug":"服务器","permalink":"https://stevehuge.github.io/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"}]},{"title":"如何实现分布式Session-上？","date":"2022-09-08T12:47:57.000Z","path":"2022/09/08/如何实现分布式Session-上/","content":"<p><img src=\"https://steve-blog-pics.oss-cn-nanjing.aliyuncs.com/imgs/image-20220912000517236.png\" alt=\"image-20220912000517236\"></p>\n<h1 id=\"0-什么是Cookie和Session\"><a href=\"#0-什么是Cookie和Session\" class=\"headerlink\" title=\"0. 什么是Cookie和Session\"></a>0. 什么是Cookie和Session</h1><p>“Cookie”这一概念由网景（Netscape）公司的程序员在为客户开发电子商务应用程序时创造<sup><a href=\"#fn_1\" id=\"reffn_1\">1</a></sup>，由于客户不希望总是在服务器中保存事务状态，于是网景提出了Cookies的解决方案。</p>\n<blockquote>\n<p>  网景的cookie<a href=\"https://zh.wikipedia.org/wiki/HTTP头字段\" target=\"_blank\" rel=\"noopener\">头字段</a>为<code>Set-Cookie</code>，RFC 2965添加了一个<code>Set-Cookie2</code>头字段，即“<a href=\"https://tools.ietf.org/html/rfc2965\" target=\"_blank\" rel=\"noopener\">RFC 2965</a> cookie”<a href=\"https://zh.wikipedia.org/wiki/Cookie#cite_note-AGgFj-13\" target=\"_blank\" rel=\"noopener\">[13]</a><a href=\"https://zh.wikipedia.org/wiki/Cookie#cite_note-V1mES-14\" target=\"_blank\" rel=\"noopener\">[14]</a>，但<code>Set-Cookie2</code>很少使用，终于2011年4月的RFC 6265中弃用<a href=\"https://zh.wikipedia.org/wiki/Cookie#cite_note-StateMgmt-15\" target=\"_blank\" rel=\"noopener\">[15]</a>，已经没有现代浏览器可以识别<code>Set-Cookie2</code>头字段<a href=\"https://zh.wikipedia.org/wiki/Cookie#cite_note-TASE4-16\" target=\"_blank\" rel=\"noopener\">[16]</a>。</p>\n</blockquote>\n<p>Session代表服务器和客户端之间的一个会话，Session可以记录特定用户的各种数据和配置信息等。</p>\n<p>参考这两篇文章<a href=\"https://blog.csdn.net/lijing198997/article/details/22174151\" target=\"_blank\" rel=\"noopener\">1</a>和<a href=\"https://en.wikipedia.org/wiki/HTTP_cookie#Cookie_wall\" target=\"_blank\" rel=\"noopener\">2</a>。</p>\n<a id=\"more\"></a>\n<h2 id=\"0-0-为什么要有Cookie和Session？\"><a href=\"#0-0-为什么要有Cookie和Session？\" class=\"headerlink\" title=\"0.0 为什么要有Cookie和Session？\"></a>0.0 为什么要有Cookie和Session？</h2><p>所有技术的提出都是为了解决遇到的问题，Cookie和Session也不例外。我们常用的HTTP协议有个缺点，就是无状态（stateless）。</p>\n<p>于1997年1月提出的<a href=\"https://www.rfc-editor.org/rfc/rfc2068\" target=\"_blank\" rel=\"noopener\">RFC2068</a>中提到HTTP/1.1协议是无状态的。</p>\n<blockquote>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The Hypertext Transfer Protocol (HTTP) is an application-level</span><br><span class=\"line\">protocol for distributed, collaborative, hypermedia information</span><br><span class=\"line\">systems. It is a generic, stateless, object-oriented protocol which</span><br><span class=\"line\">can be used for many tasks, such as name servers and distributed</span><br><span class=\"line\">object management systems, through extension of its request methods.</span><br><span class=\"line\">A feature of HTTP is the typing and negotiation of data</span><br><span class=\"line\">representation, allowing systems to be built independently of the</span><br><span class=\"line\">data being transferred.</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>简单来说就是使用HTTP协议进行通信的客户端和服务端，<strong>服务端无法判断两次请求是来自同一客户端还是不同客户端</strong>，这样的话不同客户的不同网站配置及数据无法正确展示，于是有了Cookie和Session，客户端通过传递Cookie给服务端告诉服务端自己的用户标识信息。</p>\n<p>（不过这不是一个好的实现方式，因为可能会有数据安全问题。例如第三方拿到了你的Cookie，用来访问此网站，可能会有数据泄密的风险。所以Cookie这里做了一些安全措施，具体后面会提到。同时，一般不要用Cookie传递敏感个人信息，如密码、隐私如手机号、姓名等，而是通过HTTPS等安全通信协议来传递敏感信息。）</p>\n<h2 id=\"0-1-Cookie和Session存放在哪里？\"><a href=\"#0-1-Cookie和Session存放在哪里？\" class=\"headerlink\" title=\"0.1 Cookie和Session存放在哪里？\"></a>0.1 Cookie和Session存放在哪里？</h2><p>Cookie保存在客户侧的浏览器中。</p>\n<p>查看Google主页请求，可以看到Google服务器返回了3个<code>Set-Cookie</code>字段，包含<code>1P_JAR</code>、<code>AEC</code>、<code>NID</code>等字段，这些字段都应该是Google服务器为当前浏览器生成的客户标识信息。</p>\n<p><img src=\"https://steve-blog-pics.oss-cn-nanjing.aliyuncs.com/imgs/image-20220912001106071.png\" alt=\"image-20220912001106071\"></p>\n<p>Session存放在Tomcat中，实现类为StandardSession。</p>\n<h2 id=\"0-2-Quick-Cookie-amp-Session\"><a href=\"#0-2-Quick-Cookie-amp-Session\" class=\"headerlink\" title=\"0.2 Quick Cookie &amp; Session\"></a>0.2 Quick Cookie &amp; Session</h2><p>Cookie中有个几个固定字段，挨个介绍一下：</p>\n<ul>\n<li><p>Cookie声明周期</p>\n<ul>\n<li><code>Expires</code>：定义Cookie过期时间，类似的字段还有<code>Max-Age</code></li>\n<li><code>Max-Age</code>：定义Cookie最大有效时间</li>\n</ul>\n</li>\n<li><p>Cookie作用域</p>\n<ul>\n<li><p><code>path</code>：<code>Path</code> 标识指定了主机下的哪些路径可以接受 Cookie（该 URL 路径必须存在于请求 URL 中）。以字符 <code>%x2F</code> (“/“) 作为路径分隔符，子路径也会被匹配。</p>\n<p>例如，设置 <code>Path=/docs</code>，则以下地址都会匹配：</p>\n<ul>\n<li><code>/docs</code></li>\n<li><code>/docs/Web/</code></li>\n<li><code>/docs/Web/HTTP</code></li>\n</ul>\n</li>\n<li><p><code>Domain</code>：<code>Domain</code> 指定了哪些主机可以接受 Cookie。如果不指定，默认为 <a href=\"https://developer.mozilla.org/zh-CN/docs/Glossary/Origin\" target=\"_blank\" rel=\"noopener\">origin</a>，<strong>不包含子域名</strong>。如果指定了<code>Domain</code>，则一般包含子域名。因此，指定 <code>Domain</code> 比省略它的限制要少。但是，当子域需要共享有关用户的信息时，这可能会有所帮助。</p>\n<p>例如，如果设置 <code>Domain=mozilla.org</code>，则 Cookie 也包含在子域名中（如<code>developer.mozilla.org</code>）。</p>\n</li>\n</ul>\n</li>\n<li><p>Cookie限制访问</p>\n<ul>\n<li><code>Secure</code>：标记为 <code>Secure</code> 的 Cookie 只应通过被 HTTPS 协议加密过的请求发送给服务端，因此可以预防 <a href=\"https://developer.mozilla.org/zh-CN/docs/Glossary/MitM\" target=\"_blank\" rel=\"noopener\">man-in-the-middle</a> 攻击者的攻击，但这样仍然是不安全的，因为攻击者仍可能通过读取本地硬盘来读取Cookie内容。</li>\n<li><code>HttpOnly</code>：JavaScript <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Document/cookie\" target=\"_blank\" rel=\"noopener\"><code>Document.cookie</code></a> API 无法访问带有 <code>HttpOnly</code> 属性的 cookie；此类 Cookie 仅作用于服务器。例如，持久化服务器端会话的 Cookie 不需要对 JavaScript 可用，而应具有 <code>HttpOnly</code> 属性。此预防措施有助于缓解<a href=\"https://developer.mozilla.org/en-US/docs/Web/Security/Types_of_attacks\" target=\"_blank\" rel=\"noopener\">跨站点脚本（XSS） (en-US)</a>攻击。</li>\n</ul>\n</li>\n</ul>\n<p>上面是几个常用的字段，如果需要完整的参考，参考<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Cookies\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<h1 id=\"1-为什么要分布式Session？\"><a href=\"#1-为什么要分布式Session？\" class=\"headerlink\" title=\"1. 为什么要分布式Session？\"></a>1. 为什么要分布式Session？</h1><p>如果服务是单服务器部署的话，分布式Session是不需要的，如下图。</p>\n<p><img src=\"https://steve-blog-pics.oss-cn-nanjing.aliyuncs.com/imgs/image-20220916004611701.png\" alt=\"image-20220916004611701\"></p>\n<p>但是如果是分布式服务，多个tomcat通过nginx服务器做负载均衡，就会出现问题。</p>\n<ul>\n<li>请求1通过nginx服务器请求到了tomcat1，会在tomcat1内生成一个session，并将对应的JSESSIONID通过返回到client。</li>\n<li>短时间内带着第一次返回的JSESSIONID的另一个请求2，通过nginx服务器可能会请求到另外2个tomcat服务器，而这两个服务器没有存储JSESSIONID对应的session，它们会以为这是个未登录请求，可能会报错或者重新发起登录，那就会出现问题。</li>\n</ul>\n<p><img src=\"https://steve-blog-pics.oss-cn-nanjing.aliyuncs.com/imgs/image-20220916004236166.png\" alt=\"image-20220916004236166\"></p>\n<p>解决这个问题有几个思路：</p>\n<ul>\n<li>指定应用服务器：通过客户标识（例如uid）做hash，使得每次相同的客户端访问到特定的服务器。这种处理方式有个问题，就是如果其中一个机器挂了，挂在这个机器上的所有用户必须得重新登录。</li>\n<li>session复制：tomcat自己给定了机制可以实现session复制，通过配置可以实现多个tomcat之间的session复制，但由于大体积session或者session数据频繁变化等问题，导致性能很差，业界使用不广泛，此处不做介绍。　 </li>\n<li>session持久化：将session通过数据库（例如redis、memcached、mysql等，其中redis、memcached由于性能好，用的较多）进行持久化，之后每次访问都从数据库中拿取session信息，这样就可以保证session在集群环境下可以正常使用，但这种处理方式需要注意数据库的单点故障问题。</li>\n<li>token：token也是为了应对在集群环境下，session扩展性不好的问题。它的思路和其它session处理策略不一样，它的思路是把数据保存到客户端，每次请求是带上来，服务端进行校验，确认没问题后放行。常用的有JWT token，具体可参见<a href=\"ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html\">阮一峰的这篇博客</a>，此处只做简单介绍。</li>\n</ul>\n<h2 id=\"1-1-JWT-token\"><a href=\"#1-1-JWT-token\" class=\"headerlink\" title=\"1.1 JWT token\"></a>1.1 JWT token</h2><p>整个JWT token的格式为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Header.Payload.Signature</span><br></pre></td></tr></table></figure>\n<p>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhIjpbeyJuYW1lIjoiU3RldmUgSm9icyJ9LHsiam9iQ29kZSI6IjAwMDAwMSJ9XSwiaWF0IjoxNjYzNzczMjYyLCJleHAiOjE2NjQ1NTM1OTksImF1ZCI6IiIsImlzcyI6IiIsInN1YiI6IiJ9.ns4Ko5yrNlWtsv9sUyvX3fwNwYcShQH14wXymmB0FV4</span><br></pre></td></tr></table></figure>\n<p>Header和Payload均经过Base64Url算法编码。Base64Url算法相比Base64有一些不同：由于token有时候可能放到url中作为参数传递，Base64算法中有三个字符<code>+</code>, <code>=</code>和<code>/</code>，由于在url中有特殊含义，需要替换掉。Base64Url算法会忽略掉<code>=</code>，<code>+</code>号替换成<code>-</code>，<code>/</code>号替换成<code>_</code>。</p>\n<p>其中Header及含义为：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//  密文为eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"alg\"</span>: <span class=\"string\">\"HS256\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"typ\"</span>: <span class=\"string\">\"JWT\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Payload为：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 密文为eyJkYXRhIjpbeyJuYW1lIjoiU3RldmUgSm9icyJ9LHsiam9iQ29kZSI6IjAwMDAwMSJ9XSwiaWF0IjoxNjYzNzczMjYyLCJleHAiOjE2NjQ1NTM1OTksImF1ZCI6IiIsImlzcyI6IiIsInN1YiI6IiJ9</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// data为用户自定义数据</span></span><br><span class=\"line\">    <span class=\"attr\">\"data\"</span>: [&#123;</span><br><span class=\"line\">        <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Steve Jobs\"</span></span><br><span class=\"line\">    &#125;, &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"jobCode\"</span>: <span class=\"string\">\"000001\"</span></span><br><span class=\"line\">    &#125;],</span><br><span class=\"line\">    <span class=\"comment\">// iat是签发时间戳</span></span><br><span class=\"line\">    <span class=\"attr\">\"iat\"</span>: <span class=\"number\">1663773262</span>,</span><br><span class=\"line\">    <span class=\"comment\">// exp是本条token过期的时间</span></span><br><span class=\"line\">    <span class=\"attr\">\"exp\"</span>: <span class=\"number\">1664553599</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"aud\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"iss\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"sub\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>密钥secret为<code>JustATestForJwt</code>。</p>\n<p>根据Header、Payload和密钥生成的签名（signature）为</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ns4Ko5yrNlWtsv9sUyvX3fwNwYcShQH14wXymmB0FV4</span><br></pre></td></tr></table></figure>\n<p>signature的生成方式为：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HMACSHA256(</span><br><span class=\"line\">  base64UrlEncode(header) + <span class=\"string\">\".\"</span> +</span><br><span class=\"line\">  base64UrlEncode(payload),</span><br><span class=\"line\">  secret)</span><br></pre></td></tr></table></figure>\n<p>Jwt的使用方式一般放在Cookie或者localStorage里，请求的时候放入request header中的Authorization字段中（放入Cookie中不能跨域）例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Authorization: Bearer &lt;token&gt;</span><br></pre></td></tr></table></figure>\n<p>或者直接放到post请求body中。</p>\n<p>Jwt的问题</p>\n<ul>\n<li>不能控制失效时间，签发后在expire date之前一直有效，除非更换secret，但是这样所有之前签发的token都会失效</li>\n<li>其他人获取到token后就可以使用，所以为了安全，token有效期应该设置比较短，重要权限应该使用时重新认证。</li>\n<li>payload默认不加密，所以不要把敏感信息放到payload中。</li>\n</ul>\n<p>总之，JWT token适合对于数据安全要求不是特别高、但是适当需要校验的业务场景，如果对数据安全要求比较高，那么不应该使用JWT token，而是RSA之类的加密算法。</p>\n","link":"","permalink":"https://stevehuge.github.io/2022/09/08/%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8FSession-%E4%B8%8A/","categories":[],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://stevehuge.github.io/tags/Docker/"},{"name":"Java","slug":"Java","permalink":"https://stevehuge.github.io/tags/Java/"},{"name":"分布式","slug":"分布式","permalink":"https://stevehuge.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"},{"name":"Session","slug":"Session","permalink":"https://stevehuge.github.io/tags/Session/"},{"name":"Web","slug":"Web","permalink":"https://stevehuge.github.io/tags/Web/"}]},{"title":"Docker访问MySQL","date":"2022-08-24T17:55:45.000Z","path":"2022/08/25/Docker访问MySQL/","content":"<p><img src=\"https://steve-blog-pics.oss-cn-nanjing.aliyuncs.com/imgs/image-20220825015945304.png\" alt=\"image-20220825015945304\"></p>\n<p>最近工作涉及到一些Docker的学习，因此将Docker相关知识简单总结一下。</p>\n<a id=\"more\"></a>\n<h1 id=\"1-目标\"><a href=\"#1-目标\" class=\"headerlink\" title=\"1. 目标\"></a>1. 目标</h1><p>通过docker生成一个包含MySQL的镜像，此镜像和宿主机有端口映射，可以通过宿主机上的Java代码来访问docker上MySQL的数据，并且使用数据卷（volume）持久化docker上MySQL的数据，保证在删除容器后，数据不丢失。</p>\n<p>拆解一下任务：</p>\n<ul>\n<li>生成包含MySQL的镜像</li>\n<li>根据生成的镜像来创建容器实例（container）</li>\n<li>Java访问docker上MySQL的数据</li>\n</ul>\n<p>接下来挨个实现</p>\n<h1 id=\"2-生成包含MySQL的镜像\"><a href=\"#2-生成包含MySQL的镜像\" class=\"headerlink\" title=\"2. 生成包含MySQL的镜像\"></a>2. 生成包含MySQL的镜像</h1><p>这步比想象中的要复杂一些，踩了一些坑，也因为对docker的不熟悉，走了一些弯路，在此做下记录。</p>\n<p>Dockerfile中用到的几个文件，结构和文件内容如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- scripts/</span><br><span class=\"line\">  - Dockerfile <span class=\"comment\"># 使用的Dockerfile</span></span><br><span class=\"line\">  - sql/  <span class=\"comment\"># 存放SQL脚本的文件夹</span></span><br><span class=\"line\">    - init.sql <span class=\"comment\"># 建表语句</span></span><br><span class=\"line\">本</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-1-Dockerfile\"><a href=\"#2-1-Dockerfile\" class=\"headerlink\" title=\"2.1 Dockerfile\"></a>2.1 Dockerfile</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 从mysql基础镜像进入</span><br><span class=\"line\">FROM mysql</span><br><span class=\"line\"></span><br><span class=\"line\"># 设置terminal进入docker后的默认目录</span><br><span class=\"line\">WORKDIR &#x2F;usr&#x2F;bin</span><br><span class=\"line\"></span><br><span class=\"line\"># Oracle linux 8 没有安装yum，但是可以使用microdnf进行安装</span><br><span class=\"line\">RUN microdnf install -y vim</span><br><span class=\"line\"></span><br><span class=\"line\"># 把开始脚本放到这个文件夹里，docker容器启动后就会执行，具体参见 https:&#x2F;&#x2F;github.com&#x2F;docker-library&#x2F;docs&#x2F;tree&#x2F;master&#x2F;mysql#initializing-a-fresh-instance</span><br><span class=\"line\">COPY sql&#x2F;init.sql &#x2F;docker-entrypoint-initdb.d&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\"># 声明日志数据卷</span><br><span class=\"line\">VOLUME &#x2F;var&#x2F;log&#x2F;mysql</span><br><span class=\"line\"># 声明数据数据卷</span><br><span class=\"line\">VOLUME &#x2F;var&#x2F;lib&#x2F;mysql</span><br><span class=\"line\"># 本地映射配置数据卷</span><br><span class=\"line\">VOLUME &#x2F;etc&#x2F;mysql&#x2F;conf.d</span><br><span class=\"line\"></span><br><span class=\"line\"># 暴露端口为3306</span><br><span class=\"line\">EXPOSE 3306</span><br><span class=\"line\"></span><br><span class=\"line\"># [MYSQL_RANDOM_ROOT_PASSWORD, MYSQL_ROOT_PASSWORD, MYSQL_ALLOW_EMPTY_PASSWORD] MySQL配置3选1</span><br><span class=\"line\"></span><br><span class=\"line\"># 如果MYSQL_ROOT_PASSWORD, MYSQL_ALLOW_EMPTY_PASSWORD没有配置则默认为true。如果为true，</span><br><span class=\"line\"># mysql会自动生成一个密码，会打印在控制台，格式是： [GENERATED ROOT PASSWORD: .....]</span><br><span class=\"line\">#ENV MYSQL_RANDOM_ROOT_PASSWORD&#x3D;true</span><br><span class=\"line\"># 设置MySQL root的密码</span><br><span class=\"line\">ENV MYSQL_ROOT_PASSWORD&#x3D;123456</span><br><span class=\"line\"># 为true的话，root用户的密码就是空</span><br><span class=\"line\">#ENV MYSQL_ALLOW_EMPTY_PASSWORD&#x3D;true</span><br><span class=\"line\"></span><br><span class=\"line\">#设置容器启动时执行的命令，这里有个坑，直接用这条会导致mysql无法正常连接，具体参见5.1分析</span><br><span class=\"line\">#CMD [&quot;sh&quot;, &quot;&#x2F;mysql&#x2F;setup_test.sh&quot;]</span><br><span class=\"line\">CMD [&quot;mysqld&quot;]</span><br></pre></td></tr></table></figure>\n<p>此处先不对各个关键字的功能做详细记录，后续在docker学习中总结。</p>\n<p>此处需要注意的几个点：</p>\n<ul>\n<li>Dockerfile无法实现端口映射，只能通过EXPOSE关键字暴露端口，端口映射需要使用<code>docker run -p 3307:3306</code>类似的命令或者<code>docker-compose.yml</code>来实现。</li>\n<li>Dockerfile无法指定本地数据卷和容器内目录映射，只能通过<code>VOLUME</code>指定匿名数据卷，指定后docker会在安装目录下的特定目录里生成一个目录来映射容器数据卷。如果需要指定数据卷映射，需要使用<code>docker run -v /User/LocalMachine/data:/var/MySQL/data</code>或者<code>docker-compose.yml</code>来实现。</li>\n</ul>\n<h2 id=\"2-2-Dockerfile用到的脚本\"><a href=\"#2-2-Dockerfile用到的脚本\" class=\"headerlink\" title=\"2.2 Dockerfile用到的脚本\"></a>2.2 Dockerfile用到的脚本</h2><p><code>init.sql</code> — 建表语句，放到容器<code>/docker-entrypoint-initdb.d/</code>文件夹下，MySQL会自动执行。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 创建database</span><br><span class=\"line\">CREATE DATABASE myjdbcdemo DEFAULT CHARACTER SET utf8;</span><br><span class=\"line\"></span><br><span class=\"line\">USE myjdbcdemo;</span><br><span class=\"line\"></span><br><span class=\"line\">-- 建表</span><br><span class=\"line\">DROP TABLE IF EXISTS &#96;user&#96;;</span><br><span class=\"line\">DROP TABLE IF EXISTS &#96;singer&#96;;</span><br><span class=\"line\">DROP TABLE IF EXISTS &#96;batch&#96;;</span><br><span class=\"line\"></span><br><span class=\"line\">CREATE TABLE user</span><br><span class=\"line\">(</span><br><span class=\"line\">    id       BIGINT,</span><br><span class=\"line\">    name     VARCHAR(30),</span><br><span class=\"line\">    password VARCHAR(30)</span><br><span class=\"line\">);</span><br><span class=\"line\">CREATE TABLE singer</span><br><span class=\"line\">(</span><br><span class=\"line\">    id       BIGINT,</span><br><span class=\"line\">    name     VARCHAR(30),</span><br><span class=\"line\">    bestsong VARCHAR(30),</span><br><span class=\"line\">    image    MEDIUMBLOB</span><br><span class=\"line\">);</span><br><span class=\"line\">CREATE TABLE batch</span><br><span class=\"line\">(</span><br><span class=\"line\">    id       BIGINT,</span><br><span class=\"line\">    name     VARCHAR(30),</span><br><span class=\"line\">    password VARCHAR(30)</span><br><span class=\"line\">);</span><br><span class=\"line\">-- 插入测试数据</span><br><span class=\"line\">INSERT INTO singer (id, name, bestsong, image)</span><br><span class=\"line\">VALUES (1, &#39;JayChou&#39;, &#39;七里香&#39;, NULL);</span><br><span class=\"line\">INSERT INTO singer (id, name, bestsong, image)</span><br><span class=\"line\">VALUES (2, &#39;林俊杰&#39;, &#39;可惜没如果&#39;, NULL);</span><br><span class=\"line\">INSERT INTO singer (id, name, bestsong, image)</span><br><span class=\"line\">VALUES (2, &#39;Jolin Cai&#39;, &#39;布拉格广场&#39;, NULL);</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-3-生成镜像\"><a href=\"#2-3-生成镜像\" class=\"headerlink\" title=\"2.3 生成镜像\"></a>2.3 生成镜像</h2><p>完成Dockerfile的debug后，我们在本地使用<code>docker build</code>语句生成一个镜像：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -t 是为镜像设定tag和名称，可以设置多个</span></span><br><span class=\"line\"><span class=\"comment\"># .是Dockerfile路径，docker build命令会自动寻找目录下的Dockfile文件</span></span><br><span class=\"line\">docker build -t jdbcdemoimg:0.1 -t jdbcdemoimg:latest .</span><br></pre></td></tr></table></figure>\n<p>创建成功后通过<code>docker images</code>命令查看现有镜像：</p>\n<p><img src=\"https://steve-blog-pics.oss-cn-nanjing.aliyuncs.com/imgs/image-20220821161102688.png\" alt=\"image-20220821161102688\"></p>\n<h1 id=\"3-根据生成的镜像来创建容器实例\"><a href=\"#3-根据生成的镜像来创建容器实例\" class=\"headerlink\" title=\"3. 根据生成的镜像来创建容器实例\"></a>3. 根据生成的镜像来创建容器实例</h1><p>此处需要考虑2个点：</p>\n<ul>\n<li>镜像和宿主机的端口映射</li>\n<li>使用数据卷来对需要持久化的数据进行本地映射</li>\n</ul>\n<p>使用<code>docker run</code>命令指定<strong>端口映射</strong>、<strong>数据卷本地映射</strong>后生成容器实例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 本地3307端口映射容器的3306，因为本地的3306被本地装的MySQL占用了</span></span><br><span class=\"line\"><span class=\"comment\"># 映射3个数据卷到本地，防止MySQL数据丢失</span></span><br><span class=\"line\">docker run -d -p 3307:3306 -v ~/Dev/docker_volumn/mysql/<span class=\"built_in\">log</span>:/var/<span class=\"built_in\">log</span>/mysql -v ~/Dev/docker_volumn/mysql/data:/var/lib/mysql -v ~/Dev/docker_volumn/mysql/conf:/etc/mysql/conf.d --name jdbc-1 jdbcdemoimg:latest</span><br></pre></td></tr></table></figure>\n<p>先通过docker ps查看容器是否启动成功：</p>\n<p><img src=\"https://steve-blog-pics.oss-cn-nanjing.aliyuncs.com/imgs/image-20220825003202026.png\" alt=\"image-20220825003202026\"></p>\n<p>可以看到已经成功启动，容器name为jdbc-1。</p>\n<p>使用<code>docker port</code>命令查看容器和宿主机的端口映射，可以看到3306端口映射到了本地的3307端口。</p>\n<p><img src=\"https://steve-blog-pics.oss-cn-nanjing.aliyuncs.com/imgs/image-20220825003243469.png\" alt=\"image-20220825003243469\"></p>\n<p>最后通过<code>docker exec</code>命令进入容器 CLI界面：</p>\n<p><img src=\"https://steve-blog-pics.oss-cn-nanjing.aliyuncs.com/imgs/image-20220825003439081.png\" alt=\"image-20220825003439081\"></p>\n<p>出现bash标志表示此处已经成功进入docker 容器的cli。</p>\n<p>通过<code>mysql -uroot -p</code>进入docker内部的MySQL，输入密码后成功进入。</p>\n<p>输入<code>show databases;</code>查看当前的库，可以看到myjdbcdemo在其中：</p>\n<p><img src=\"https://steve-blog-pics.oss-cn-nanjing.aliyuncs.com/imgs/image-20220821162734752.png\" alt=\"image-20220821162734752\"></p>\n<p>输入命令<code>use myjdbcdemo;</code>使用此库，可以使用select语句查看表中数据。</p>\n<p><img src=\"https://steve-blog-pics.oss-cn-nanjing.aliyuncs.com/imgs/image-20220821162851682.png\" alt=\"image-20220821162851682\"></p>\n<h2 id=\"3-1-MySQL-root密码问题\"><a href=\"#3-1-MySQL-root密码问题\" class=\"headerlink\" title=\"3.1 MySQL root密码问题\"></a>3.1 MySQL root密码问题</h2><p>docker给了3个环境变量来控制MySQL的密码问题，分别是<code>MYSQL_RANDOM_ROOT_PASSWORD</code>, <code>MYSQL_ROOT_PASSWORD</code>和<code>MYSQL_ALLOW_EMPTY_PASSWORD</code>，三个优先级有先后，挨个介绍下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 如果MYSQL_ROOT_PASSWORD, MYSQL_ALLOW_EMPTY_PASSWORD没有配置则默认为true。如果为true，</span><br><span class=\"line\"># mysql会自动生成一个密码，会打印在控制台，格式是： [GENERATED ROOT PASSWORD: .....]</span><br><span class=\"line\">#ENV MYSQL_RANDOM_ROOT_PASSWORD&#x3D;true</span><br><span class=\"line\"># 设置MySQL root的密码</span><br><span class=\"line\">ENV MYSQL_ROOT_PASSWORD&#x3D;123456</span><br><span class=\"line\"># 为true的话，root用户的密码就是空</span><br><span class=\"line\">#ENV MYSQL_ALLOW_EMPTY_PASSWORD&#x3D;true</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p><code>MYSQL_RANDOM_ROOT_PASSWORD</code>。如果<code>MYSQL_ROOT_PASSWORD</code>, <code>MYSQL_ALLOW_EMPTY_PASSWORD</code>没有配置则默认为true。如果为true，mysql会自动生成一个密码，会打印在控制台，格式是： <code>[GENERATED ROOT PASSWORD: .....]</code>。</p>\n</li>\n<li><p><code>MYSQL_ROOT_PASSWORD</code>。设置MySQL root的密码。这个没什么可说的，就是正常的密码设置，例如<code>ENV MYSQL_ROOT_PASSWORD=123456</code>。</p>\n</li>\n<li><p><code>MYSQL_ALLOW_EMPTY_PASSWORD</code>。为true的话，root用户的密码就是空。</p>\n<p>此处使用debug时可以进入docker容器，通过以下命令查看MySQL用户信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在docker容器内进行MySQL</span></span><br><span class=\"line\">bash&gt; mysql -uroot -p123456;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 进入MySQL内部后，选择mysql库</span></span><br><span class=\"line\">mysql&gt; use mysql;</span><br><span class=\"line\"><span class=\"comment\"># 查看用户信息</span></span><br><span class=\"line\">mysql&gt; select user, host, authentication_string from user;</span><br><span class=\"line\">+------------------+-----------+------------------------------------------------------------------------+</span><br><span class=\"line\">| user             | host      | authentication_string                                                  |</span><br><span class=\"line\">+------------------+-----------+------------------------------------------------------------------------+</span><br><span class=\"line\">| root             | %         | <span class=\"variable\">$A</span><span class=\"variable\">$005</span>$|[lde&#125;&#125;&#125;^RXsbBUMKjoSEwZkvPMuCFiecEQqa8UIN9o6b1dKRtcyTQv0C    |</span><br><span class=\"line\">| mysql.infoschema | localhost | <span class=\"variable\">$A</span><span class=\"variable\">$005</span><span class=\"variable\">$THISISACOMBINATIONOFINVALIDSALTANDPASSWORDTHATMUSTNEVERBRBEUSED</span> |</span><br><span class=\"line\">| mysql.session    | localhost | <span class=\"variable\">$A</span><span class=\"variable\">$005</span><span class=\"variable\">$THISISACOMBINATIONOFINVALIDSALTANDPASSWORDTHATMUSTNEVERBRBEUSED</span> |</span><br><span class=\"line\">| mysql.sys        | localhost | <span class=\"variable\">$A</span><span class=\"variable\">$005</span><span class=\"variable\">$THISISACOMBINATIONOFINVALIDSALTANDPASSWORDTHATMUSTNEVERBRBEUSED</span> |</span><br><span class=\"line\">| root             | localhost | <span class=\"variable\">$A</span><span class=\"variable\">$005</span><span class=\"variable\">$MEKL81XEj</span>[C.&gt;rB2luQaqISkkixQjSffptkkhsWs2xm3y7D/qYgPMg970/     |</span><br><span class=\"line\">+------------------+-----------+------------------------------------------------------------------------+</span><br><span class=\"line\">5 rows <span class=\"keyword\">in</span> <span class=\"built_in\">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"3-2-远程登录失败问题\"><a href=\"#3-2-远程登录失败问题\" class=\"headerlink\" title=\"3.2 远程登录失败问题\"></a>3.2 远程登录失败问题</h2><p>使用的时候一直显示会连接失败：</p>\n<p><img src=\"https://steve-blog-pics.oss-cn-nanjing.aliyuncs.com/imgs/image-20220823010324056.png\" alt=\"image-20220823010324056\"></p>\n<p>查了很多结果，有说和防火墙有关的，有的需要修改<code>my.cnf</code>文件中<code>bind-address=0.0.0.0</code>的。但是最后发现。。。是因为<strong>容器没有完全启动起来</strong>，所以连接失败了，等待其启动结束后，再连接就好了。搞了一个大乌龙 T_T。。。</p>\n<p>不过查问题的过程中也看到了不少知识，还是打算记录下来。</p>\n<p>修改<code>my.cnf</code>文件中<code>bind-address=0.0.0.0</code>后，MySQL会监听所有网络端口的连接，具体参见<a href=\"https://stackoverflow.com/a/24326540/8706905\" target=\"_blank\" rel=\"noopener\">这个回答</a>。</p>\n<blockquote>\n<p>  <strong>Note:</strong> if you use <code>bind-address = 0.0.0.0</code> your MySQL server will listen for connections on all network interfaces. That means your MySQL server could be reached from the Internet ; make sure to setup firewall rules accordingly.</p>\n</blockquote>\n<p>如果不做<code>bind-address</code>的配置，MySQL的<code>bind-address</code>默认是<code>*</code>，<code>*</code>也表示所有IP都可以连接，这里可以参见<a href=\"https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_bind_address\" target=\"_blank\" rel=\"noopener\">官方文档</a>。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看docker ip </span></span><br><span class=\"line\">docker inspect -f <span class=\"string\">'&#123;&#123;range.NetworkSettings.Networks&#125;&#125;&#123;&#123;.IPAddress&#125;&#125;&#123;&#123;end&#125;&#125;'</span> jdbc-1</span><br></pre></td></tr></table></figure>\n<h1 id=\"4-Java访问docker上MySQL的数据\"><a href=\"#4-Java访问docker上MySQL的数据\" class=\"headerlink\" title=\"4. Java访问docker上MySQL的数据\"></a>4. Java访问docker上MySQL的数据</h1><p> 此处除了端口改为3307，其它和访问本机MySQL实例流程完全一致，不再赘述。</p>\n<h1 id=\"5-开发过程中遇到的问题\"><a href=\"#5-开发过程中遇到的问题\" class=\"headerlink\" title=\"5. 开发过程中遇到的问题\"></a>5. 开发过程中遇到的问题</h1><p>由于Dockerfile是在网上找的，debug过程中遇到了一系列问题。</p>\n<p>当时思路是：</p>\n<ul>\n<li>自己写脚本来启动和初始化MySQL（尽管后面发现这是不必要的）</li>\n<li>初始密码由脚本来设置，而非MySQL 镜像提供的<code>MYSQL_ROOT_PASSWORD</code>字段设置（这是谬误2，如果有官方提供的入口，不使用而打算自己处理，那么就要做好面对各种异常的准备。）</li>\n</ul>\n<h2 id=\"5-1-使用shell脚本插入数据问题\"><a href=\"#5-1-使用shell脚本插入数据问题\" class=\"headerlink\" title=\"5.1 使用shell脚本插入数据问题\"></a>5.1 使用shell脚本插入数据问题</h2><p>先来列举一下文件内容，<code>[D]</code>表示最新代码中已经被删掉。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- scripts/</span><br><span class=\"line\">  - Dockerfile <span class=\"comment\"># 使用的Dockerfile</span></span><br><span class=\"line\">  - [D] setup.js <span class=\"comment\"># 使用此脚本进行初始化</span></span><br><span class=\"line\">  - sql/  <span class=\"comment\"># 存放SQL脚本的文件夹</span></span><br><span class=\"line\">    - init.sql <span class=\"comment\"># 建表语句</span></span><br><span class=\"line\">    - [D] privilege.sh <span class=\"comment\"># 原来的新增密码脚本</span></span><br><span class=\"line\">本</span><br></pre></td></tr></table></figure>\n<p>当时Dockerfile是打算使用<code>setup.js</code>进行MySQL初始化的：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 把setup.js放到docker-entrypoint-initdb.d文件夹下，这样容器第一次启动时，setup.js就会执行。</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\"> setup.js /docker-entrypoint-initdb.d/</span></span><br></pre></td></tr></table></figure>\n<p>原始的<code>setup.sh</code> — 启动脚本，执行一些建表、给root用户新增密码等操作。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 若指令传回值不等于0，则立即退出shell</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> -e</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置mysql密码</span></span><br><span class=\"line\"><span class=\"comment\"># mysql &lt; /mysql/init.sql</span></span><br><span class=\"line\"><span class=\"comment\"># 此处必须指定user为root，为什么？看下面分析</span></span><br><span class=\"line\">mysql -uroot &lt; /mysql/privileges.sql</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 导入数据</span></span><br><span class=\"line\">mysql -uroot -p123456 &lt; /mysql/init.sql</span><br><span class=\"line\"></span><br><span class=\"line\">tail -f /dev/null</span><br></pre></td></tr></table></figure>\n<p>如果没有设置MySQL的root密码，在<strong>容器的bash命令行里</strong>是直接可以输入<code>mysql &lt; some_sql.sql</code>来执行sql文件的。</p>\n<p>但是在shell脚本中使用此命令插入sql文件时，遇到了问题。命令如下：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># setup.js文件中的语句</span></span><br><span class=\"line\">mysql &lt; /mysql/init.sql</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://steve-blog-pics.oss-cn-nanjing.aliyuncs.com/imgs/image-20220821032929849.png\" alt=\"image-20220821032929849\"></p>\n<p>可以看到，报错中user为<code>&#39;mysql&#39;@&#39;localhost&#39;</code>，但我们使用的明显不是这个user，而是<code>&#39;root&#39;@&#39;localhost&#39;</code>。尝试指定了一下user，问题解决：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># setup.js文件中的语句</span></span><br><span class=\"line\"><span class=\"comment\"># 新加一个-uroot指定用户为root就不报错了</span></span><br><span class=\"line\">mysql -uroot &lt; /mysql/init.sql</span><br></pre></td></tr></table></figure>\n<p>这里为什么用户是mysql呢？？<a href=\"https://stackoverflow.com/a/11216911/8706905\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/a/11216911/8706905</a> 这个可以作为参考，但明显不是答案。</p>\n<p>后面在<a href=\"https://dev.mysql.com/doc/refman/5.7/en/user-names.html\" target=\"_blank\" rel=\"noopener\">官方文档</a>里找到，如果不通过<code>-u</code>或者<code>--user</code>选项来覆盖MySQL用户名，类Unix系统（如MacOS或者Linux）中会使用<strong>当前OS的用户名</strong>来作为MySQL的用户名，这在用户名没指定的情况下只是为了方便。</p>\n<blockquote>\n<p>On Unix, most MySQL clients by default try to log in using the current Unix user name as the MySQL user name, but that is for convenience only. </p>\n</blockquote>\n<p><img src=\"https://steve-blog-pics.oss-cn-nanjing.aliyuncs.com/imgs/image-20220827003233755.png\" alt=\"image-20220827003233755\"></p>\n<p>我们在报错的bash语句前加一句打印当前用户的命令:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 打印当前用户</span></span><br><span class=\"line\">id;</span><br></pre></td></tr></table></figure>\n<p>可以看到，在docker镜像启动之时，使用的用户是mysql，推测是MySQL初始化时创建了专门的OS用户来操作初始化，所以才会报上面提到的错误。</p>\n<p><img src=\"https://steve-blog-pics.oss-cn-nanjing.aliyuncs.com/imgs/image-20220827003802863.png\" alt=\"image-20220827003802863\"></p>\n<h2 id=\"5-2-容器启动失败\"><a href=\"#5-2-容器启动失败\" class=\"headerlink\" title=\"5.2 容器启动失败\"></a>5.2 容器启动失败</h2><p>还是和被删掉的<code>setup.sh</code>文件有关。</p>\n<p>MySQL镜像如果拉取下来后，如果Dockerfile最后一句为</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"bash\"> [<span class=\"string\">\"sh\"</span>, <span class=\"string\">\"setup.sh\"</span>]</span></span><br><span class=\"line\"><span class=\"comment\"># 应该执行这一句对MySQL进行初始化</span></span><br><span class=\"line\"><span class=\"comment\"># CMD [\"mysqld\"]</span></span><br></pre></td></tr></table></figure>\n<p>会报<code>ERROR 2002 (HY000): Can&#39;t connect to local MySQL server through socket &#39;/var/run/mysqld/mysqld.sock&#39; (2)</code>的错误。</p>\n<p><img src=\"https://steve-blog-pics.oss-cn-nanjing.aliyuncs.com/imgs/image-20220825001344885.png\" alt=\"image-20220825001344885\"></p>\n<p>查了许多地方，<a href=\"https://stackoverflow.com/a/44337987/8706905\" target=\"_blank\" rel=\"noopener\">这个回答</a>中提到：数据库还未初始化。</p>\n<p>解决方式是最后一句由<code>CMD [&quot;sh&quot;, &quot;setup.sh&quot;]</code>改为执行<code>CMD [&quot;mysqld&quot;]</code>。<del>同时通过<a href=\"https://hub.docker.com/_/mysql\" target=\"_blank\" rel=\"noopener\">Docker官方MySQL镜像文档</a>，把<code>setup.js</code>文件copy到<code>/docker-entrypoint-initdb.d/</code>文件夹下</del>(文件已经删除，所以也没有这一说，但是学到如何使用这个文件夹 ^_^)。文档中是这么说的：</p>\n<p><img src=\"https://steve-blog-pics.oss-cn-nanjing.aliyuncs.com/imgs/image-20220826232813652.png\" alt=\"image-20220826232813652\"></p>\n<blockquote>\n<p>  容器在第一次启动时，会执行在<code>/docker-entrypoint-initdb.d/</code>文件夹下的<code>.sh</code>, <code>.sql</code> 和<code>.sql.gz</code>文件。</p>\n</blockquote>\n<p>另外在MySQL官网<a href=\"https://dev.mysql.com/doc/refman/8.0/en/mysqld.html\" target=\"_blank\" rel=\"noopener\">mysqld的页面</a>有明确的解释，其实mysqld就是MySQL server，需要启动它对MySQL服务端进行初始化。</p>\n<blockquote>\n<p>  <a href=\"https://dev.mysql.com/doc/refman/8.0/en/mysqld.html\" target=\"_blank\" rel=\"noopener\"><strong>mysqld</strong></a>, also known as MySQL Server, is a single multithreaded program that does most of the work in a MySQL installation.</p>\n</blockquote>\n<p>另一个佐证是<a href=\"https://hub.docker.com/layers/mysql/library/mysql/latest/images/sha256-6964c211b5fadfc3b6a84986cbd3c78418b091c2fd44074f58d9c15d9b0f5f52?context=explore\" target=\"_blank\" rel=\"noopener\">MySQL官方docker镜像的image layers描述</a>中，最后一句也是 <code>CMD [&quot;mysqld&quot;]</code>。</p>\n<p><img src=\"https://steve-blog-pics.oss-cn-nanjing.aliyuncs.com/imgs/%E6%88%AA%E5%B1%8F2022-08-28%2000.34.40.png\" alt=\"截屏2022-08-28 00.34.40\"></p>\n<p>在使用这个解决方法后，之前报错找不到的<code>/var/run/mysqld/mysqld.sock</code>文件出现了。</p>\n<p>修改后：</p>\n<p><img src=\"https://steve-blog-pics.oss-cn-nanjing.aliyuncs.com/imgs/image-20220825020524737.png\" alt=\"image-20220821030721690\"></p>\n<h2 id=\"5-3-使用SQL脚本修改MySQL的密码\"><a href=\"#5-3-使用SQL脚本修改MySQL的密码\" class=\"headerlink\" title=\"5.3 使用SQL脚本修改MySQL的密码\"></a>5.3 使用SQL脚本修改MySQL的密码</h2><p><code>privilege.sh</code> — 给root用户添加密码的SQL脚本，这里有些需要注意的点。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">USE mysql;</span><br><span class=\"line\">-- 给root配置密码，两行都不可以缺少，因为&#39;root&#39;@&#39;%&#39;和&#39;root&#39;@&#39;localhost&#39;是分开的</span><br><span class=\"line\">-- 如果是此行，那么root只有远程连接有密码</span><br><span class=\"line\">ALTER USER &#39;root&#39;@&#39;%&#39; IDENTIFIED BY &#39;123456&#39;;</span><br><span class=\"line\">-- 如果是此行，那么root只有本地有密码</span><br><span class=\"line\">ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;123456&#39;;</span><br><span class=\"line\">-- 这一条命令一定要有：</span><br><span class=\"line\">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://steve-blog-pics.oss-cn-nanjing.aliyuncs.com/imgs/image-20220823005709843.png\" alt=\"image-20220823005709843\"></p>\n<p>后面发现其实只需要设置<code>MYSQL_ROOT_PASSWORD</code>不为空即可，这段就删掉了，放在这里权做记录。</p>\n<h1 id=\"6-结论\"><a href=\"#6-结论\" class=\"headerlink\" title=\"6. 结论\"></a>6. 结论</h1><p>尽量还是寻找比较正式的文档进行二次开发，遇到的坑比较少，例如<a href=\"https://hevodata.com/learn/docker-mysql/\" target=\"_blank\" rel=\"noopener\">这个文档.</a>，虽然不是Dockerfile生成MySQL镜像的，但整体相当顺利。。</p>\n<p>官方成本可以降低学习成本，不过如果时间空闲较多的话，倒也可以深入探究一下，在查问题的过程中，的确收获了不少新的知识。</p>\n<p>源码地址：<a href=\"https://github.com/StephenHuge/blog-code/tree/master/MyJdbcDemo/scripts\" target=\"_blank\" rel=\"noopener\">https://github.com/StephenHuge/blog-code/tree/master/MyJdbcDemo/scripts</a> </p>\n","link":"","permalink":"https://stevehuge.github.io/2022/08/25/Docker%E8%AE%BF%E9%97%AEMySQL/","categories":[],"tags":[{"name":"MySQL","slug":"MySQL","permalink":"https://stevehuge.github.io/tags/MySQL/"},{"name":"数据库","slug":"数据库","permalink":"https://stevehuge.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"Docker","slug":"Docker","permalink":"https://stevehuge.github.io/tags/Docker/"}]},{"title":"React极简入门-1","date":"2022-08-23T14:41:59.000Z","path":"2022/08/23/React极简入门-1/","content":"<p><img src=\"https://steve-blog-pics.oss-cn-nanjing.aliyuncs.com/imgs/image-20220825015401044.png\" alt=\"image-20220825015401044\"></p>\n<p>最近尝试做了一个前端React，后端Java的应用，简单学习了一下React，在此做下记录。此文是初学者记录技术使用方法的文档，由于匆匆记录，错误必然百出，不过由于时间和精力有限，只能先做到这个地步了。</p>\n<h1 id=\"0-碎碎念\"><a href=\"#0-碎碎念\" class=\"headerlink\" title=\"0. 碎碎念\"></a>0. 碎碎念</h1><p>有一个迷思一直困扰着自己：写技术博客必须要挖深技术，如果是很简单、很基础的内容，就不值得或者不好意思发出来，会露怯，让人觉得自己技术菜。但是这种想法有时会害了自己：技术本来处于初学阶段，强行拔高技术深度会力有不逮，很容易就坚持不下去；但是写点很基础，大家随便在百度上就能找到的内容，就会有点low，拿不出手。</p>\n<p>我是这么认为的：首先，技术博客首先是为了结构化梳理自己学到的东西，如果能夹杂着自己的一些思考和深挖就更好了，首先是为了自己学习；其次如果能让读自己博客的人有点思考，就已经是不错的内容了。不是人人都是Linus，不是人人都是Goslin，用自己的话把学到的东西记录下来，后面忘记的时候过来翻翻，很快就能上手写代码，我觉得对于一篇博客来讲，就及格了。</p>\n<a id=\"more\"></a>\n<p>至于博客中的深入思考，个人觉得是你在对基础有广度和深度（此处广度优于深度）都有一定的理解后，再来考虑的事。立意深远是值得鼓励的，但是仍需要脚踏实地，一步一步往前走，踩的够深、踩的够稳，才有机会写出优秀的内容。做好自己，在有余力时多深思，这就足够了。</p>\n<h1 id=\"1-Quick-Demo\"><a href=\"#1-Quick-Demo\" class=\"headerlink\" title=\"1. Quick Demo\"></a>1. Quick Demo</h1><p>先从一个任务管理的例子开始：</p>\n<p><img src=\"https://steve-blog-pics.oss-cn-nanjing.aliyuncs.com/imgs/image-20220824090421966.png\" alt=\"image-20220824090421966\"></p>\n<h2 id=\"1-1-功能拆分\"><a href=\"#1-1-功能拆分\" class=\"headerlink\" title=\"1.1 功能拆分\"></a>1.1 功能拆分</h2><p>简单总结一下功能：</p>\n<ul>\n<li>新增任务<ul>\n<li>可以通过上面的输入栏新增任务</li>\n</ul>\n</li>\n<li><p>任务列表</p>\n<ul>\n<li>单个任务，鼠标hover后背景变深、展示删除按钮</li>\n<li>单个任务，可以通过前面的checkbox选择已完成或者未完成</li>\n<li>单个任务，如果点击删除后，任务消失</li>\n</ul>\n</li>\n<li><p>任务状态总结</p>\n<ul>\n<li>下面任务总结栏，对当前已完成和全部任务的数量进行总结</li>\n<li>点击checkbox能实现所有任务的已完成/未完成状态切换</li>\n<li>点击“清除已完成任务”，删除所有已完成任务，并更新任务数量</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"1-2-静态代码\"><a href=\"#1-2-静态代码\" class=\"headerlink\" title=\"1.2 静态代码\"></a>1.2 静态代码</h2><p>这个例子的完整html文件如下，css文件请看<a href=\"https://github.com/StephenHuge/blog-code/blob/master/my-app/src/orginal.css\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"./orginal.css\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>React App<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"root\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"todo-container\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"todo-wrap\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"todo-header\"</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"请输入你的任务名称，按回车键确认\"</span> /&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"todo-main\"</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">style</span>=<span class=\"string\">'background-color:white'</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">checked</span>=<span class=\"string\">false</span> /&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>吃饭<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-danger\"</span> <span class=\"attr\">style</span>=<span class=\"string\">'display:block'</span>&gt;</span>删除<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">style</span>=<span class=\"string\">'background-color:white'</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">checked</span>=<span class=\"string\">false</span> /&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>睡觉<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-danger\"</span> <span class=\"attr\">style</span>=<span class=\"string\">'display:block'</span>&gt;</span>删除<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">style</span>=<span class=\"string\">'background-color:#ddd'</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span>  /&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>打代码<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-danger\"</span> <span class=\"attr\">style</span>=<span class=\"string\">'display:block'</span>&gt;</span>删除<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">style</span>=<span class=\"string\">'background-color:white'</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> /&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>逛街<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-danger\"</span> <span class=\"attr\">style</span>=<span class=\"string\">'display:block'</span>&gt;</span>删除<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"todo-footer\"</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> /&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>已完成2<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span> / 全部3</span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-danger\"</span>&gt;</span>清除已完成任务<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>基础的html和CSS有了，再加上js文件就可以实现这个任务管理小页面了。现在需要用React重写。</p>\n<h1 id=\"2-静态组件拆分\"><a href=\"#2-静态组件拆分\" class=\"headerlink\" title=\"2. 静态组件拆分\"></a>2. 静态组件拆分</h1><h2 id=\"2-1-React文件结构\"><a href=\"#2-1-React文件结构\" class=\"headerlink\" title=\"2.1 React文件结构\"></a>2.1 React文件结构</h2><p>在此先说下一般React项目的文件结构</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- my-app/ <span class=\"comment\"># 根目录</span></span><br><span class=\"line\">  - node_modules/ <span class=\"comment\"># 存放根据package.json build生成的node库，自动生成</span></span><br><span class=\"line\">  - public/ <span class=\"comment\"># 一般存放一些静态资源，如图片、icon等</span></span><br><span class=\"line\">    - index.html <span class=\"comment\"># React页面template，也是页面入口</span></span><br><span class=\"line\">  - src/ <span class=\"comment\"># 存放组件和index.js</span></span><br><span class=\"line\">    - App.css <span class=\"comment\"># App组件的样式</span></span><br><span class=\"line\">    - App.js <span class=\"comment\"># App组件 </span></span><br><span class=\"line\">    - index.js <span class=\"comment\"># React入口文件 </span></span><br><span class=\"line\">    - logo.svg <span class=\"comment\"># logo图</span></span><br><span class=\"line\">    - serviceWorker.js <span class=\"comment\"># 这个是用于写移动端开发的，PWA必须用到这个文件，有了这个文件，就相当于有了离线浏览的功能。</span></span><br><span class=\"line\">    - reportWebVitals.js <span class=\"comment\"># 页面性能分析文件（需要web-vitals库的支持）</span></span><br><span class=\"line\">    - setupTests.js <span class=\"comment\"># 组件单元测试的文件（需要jest-dom库的支持）</span></span><br><span class=\"line\">  - package.json <span class=\"comment\"># Webpack配置和项目包管理文件，常见的配置有配置项目启动、打包命令，声明依赖包等</span></span><br><span class=\"line\">  - package-lock.json <span class=\"comment\"># 相比package.json，会固化当前安装的每个软件包的版本，当运行 npm install时，npm 会使用这些确切的版本。</span></span><br></pre></td></tr></table></figure>\n<p>index.js格式一般比较固定，它是React的渲染入口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;引入react核心库</span><br><span class=\"line\">import React from &#39;react&#39;</span><br><span class=\"line\">&#x2F;&#x2F;引入ReactDOM</span><br><span class=\"line\">import ReactDOM from &#39;react-dom&#39;</span><br><span class=\"line\">&#x2F;&#x2F;引入App</span><br><span class=\"line\">import App from &#39;.&#x2F;App&#39;</span><br><span class=\"line\">&#x2F;&#x2F; 使用index.html中id为root的标签进行渲染</span><br><span class=\"line\">ReactDOM.render(&lt;App&#x2F;&gt;,document.getElementById(&#39;root&#39;))</span><br></pre></td></tr></table></figure>\n<p>在index.js中引入了App，我们来看看App。其实App其实也是一个React Component，我们可以通过在App中引入新的组件和CSS样式来优化我们的项目。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React, &#123; Component &#125; from &#39;react&#39;</span><br><span class=\"line\">&#x2F;&#x2F; export default表示导出App组件，这样其它组件也可以引用它</span><br><span class=\"line\">export default class App extends Component &#123;</span><br><span class=\"line\">\t&#x2F;&#x2F; 组件都写在render方法里</span><br><span class=\"line\">\trender() &#123;</span><br><span class=\"line\">\t\treturn (</span><br><span class=\"line\">\t\t\t&#x2F;&#x2F; 这里添加所有要展示的元素，可以添加HTML代码，也可以</span><br><span class=\"line\">\t\t\t&#x2F;&#x2F; 通过&#123;&#125;的形式引入js代码</span><br><span class=\"line\">\t\t\t&#x2F;&#x2F; 此处我们直接引入刚才前面HTML的内容，但需要做下替换</span><br><span class=\"line\">\t\t\t&#x2F;&#x2F; class由于是关键字 class -&gt; className</span><br><span class=\"line\">\t\t\t&#x2F;&#x2F; style由单引号改为对象，放到&#123;&#123;&#125;&#125;里</span><br><span class=\"line\">\t\t)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;&#x2F; export的另一种写法，如果这样写了，class前的export default要去掉</span><br><span class=\"line\">&#x2F;&#x2F; export default App</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-2-组件拆分\"><a href=\"#2-2-组件拆分\" class=\"headerlink\" title=\"2.2 组件拆分\"></a>2.2 组件拆分</h2><p>React的思想是一个<strong>相对完整的逻辑单元</strong>可以拆分成一个组件Component，也就是说此页面可以拆分称若干个组件，根据上面的功能划分尝试拆分：</p>\n<p><img src=\"https://steve-blog-pics.oss-cn-nanjing.aliyuncs.com/imgs/image-20220824220649146.png\" alt=\"image-20220824220649146\"></p>\n<p>根据刚才图片上组件的划分，我们分为3个组件，那么可以先建立组件的文件，建立后文件结构如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- my-app/ </span><br><span class=\"line\">  - build/</span><br><span class=\"line\">  - node_modules/ </span><br><span class=\"line\">  - public/</span><br><span class=\"line\">  - src/ <span class=\"comment\"># 存放组件和index.js  </span></span><br><span class=\"line\">    - App.css </span><br><span class=\"line\">    - App.js </span><br><span class=\"line\">    - index.js </span><br><span class=\"line\">    - components/ <span class=\"comment\"># 存放新建的组件</span></span><br><span class=\"line\">      - List/ <span class=\"comment\"># List组件，存放所有任务</span></span><br><span class=\"line\">        - index.jsx <span class=\"comment\"># List组件的js代码，下同</span></span><br><span class=\"line\">        - index.css <span class=\"comment\"># List组件的CSS样式，下同</span></span><br><span class=\"line\">      - Header/ <span class=\"comment\"># Header组件，新增任务</span></span><br><span class=\"line\">        - index.jsx</span><br><span class=\"line\">        - index.css      </span><br><span class=\"line\">      - Footer/ <span class=\"comment\"># Footer组件，总结任务状态</span></span><br><span class=\"line\">        - index.jsx</span><br><span class=\"line\">        - index.css</span><br><span class=\"line\">      - Item <span class=\"comment\"># Item组件，存放单个任务</span></span><br><span class=\"line\">        - index.jsx</span><br><span class=\"line\">        - index.css  </span><br><span class=\"line\">  - package.json</span><br></pre></td></tr></table></figure>\n<p>除了分析得出的三个组件，还新增了一个<code>Item</code>组件，其实新增的这个组件主要是为了<code>List</code>组件能更好的操作任务，<code>List</code>中会引入多个<code>Item</code>，<code>Item</code>不会在<code>App</code>中直接引用。</p>\n<p>现在App的代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React, &#123; Component &#125; from &#39;react&#39;</span><br><span class=\"line\">import Header from &#39;.&#x2F;components&#x2F;Header&#39;</span><br><span class=\"line\">import List from &#39;.&#x2F;components&#x2F;List&#39;</span><br><span class=\"line\">import Footer from &#39;.&#x2F;components&#x2F;Footer&#39;</span><br><span class=\"line\">import &#39;.&#x2F;App.css&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">export default class App extends Component &#123;</span><br><span class=\"line\">\t&#x2F;&#x2F; 组件都写在render方法里</span><br><span class=\"line\">\trender() &#123;</span><br><span class=\"line\">\t\treturn (</span><br><span class=\"line\">            &#x2F;&#x2F; 任务管理的container</span><br><span class=\"line\">            &lt;div className&#x3D;&quot;todo-container&quot;&gt;</span><br><span class=\"line\">\t\t\t\t&lt;div className&#x3D;&quot;todo-wrap&quot;&gt;</span><br><span class=\"line\">                    &lt;!-- 代表新增任务栏 --&gt;</span><br><span class=\"line\">\t\t\t\t\t&lt;Header &#x2F;&gt;</span><br><span class=\"line\">                    &lt;!-- 代表任务列表 --&gt;</span><br><span class=\"line\">\t\t\t\t\t&lt;List&#x2F;&gt;</span><br><span class=\"line\">                    &lt;!-- 代表任务总结状态栏 --&gt;</span><br><span class=\"line\">\t\t\t\t\t&lt;Footer &#x2F;&gt;</span><br><span class=\"line\">\t\t\t\t&lt;&#x2F;div&gt;</span><br><span class=\"line\">\t\t\t&lt;&#x2F;div&gt;</span><br><span class=\"line\">\t\t)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>而把刚才原始HTML中的HTML元素都放到各自组件中：</p>\n<p>Header/index.jsx</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React, &#123; Component &#125; from &#39;react&#39;</span><br><span class=\"line\">import &#39;.&#x2F;index.css&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">export default class Header extends Component &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\trender() &#123;</span><br><span class=\"line\">\t\treturn (</span><br><span class=\"line\">\t\t\t&lt;div className&#x3D;&quot;todo-header&quot;&gt;</span><br><span class=\"line\">\t\t\t\t&lt;input type&#x3D;&quot;text&quot; placeholder&#x3D;&quot;请输入你的任务名称，按回车键确认&quot;&#x2F;&gt;</span><br><span class=\"line\">\t\t\t&lt;&#x2F;div&gt;</span><br><span class=\"line\">\t\t)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>List/index.jsx</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React, &#123; Component &#125; from &#39;react&#39;</span><br><span class=\"line\">import Item from &#39;..&#x2F;Item&#39;</span><br><span class=\"line\">import &#39;.&#x2F;index.css&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">export default class List extends Component &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\trender() &#123;</span><br><span class=\"line\">\t\treturn (</span><br><span class=\"line\">\t\t\t&lt;ul className&#x3D;&quot;todo-main&quot;&gt;</span><br><span class=\"line\">              &lt;!-- 此处由于代码还未完成只有一个Item，不影响后续加上 --&gt;</span><br><span class=\"line\">\t\t\t  &lt;Item &#x2F;&gt;</span><br><span class=\"line\">\t\t\t&lt;&#x2F;ul&gt;</span><br><span class=\"line\">\t\t)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Item/index.jsx</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React, &#123; Component &#125; from &#39;react&#39;</span><br><span class=\"line\">import &#39;.&#x2F;index.css&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">export default class Item extends Component &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\trender() &#123;\t</span><br><span class=\"line\">\t\treturn (</span><br><span class=\"line\">            &#x2F;&#x2F; style使用&#123;&#123;&#125;&#125;处理</span><br><span class=\"line\">\t\t\t&lt;li style&#x3D;&#123;&#123;backgroundColor: &#39;white&#39;&#125;&#125; &gt;</span><br><span class=\"line\">\t\t\t\t&lt;label&gt;</span><br><span class=\"line\">\t\t\t\t\t&lt;input type&#x3D;&quot;checkbox&quot; &#x2F;&gt;</span><br><span class=\"line\">\t\t\t\t\t&lt;span&gt;吃饭&lt;&#x2F;span&gt;</span><br><span class=\"line\">\t\t\t\t&lt;&#x2F;label&gt;</span><br><span class=\"line\">\t\t\t\t&lt;button className&#x3D;&quot;btn btn-danger&quot; style&#x3D;&#123;&#123;display:&#39;block&#39;&#125;&#125;&gt;删除&lt;&#x2F;button&gt;</span><br><span class=\"line\">\t\t\t&lt;&#x2F;li&gt;</span><br><span class=\"line\">\t\t)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Footer/index.jsx</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React, &#123; Component &#125; from &#39;react&#39;</span><br><span class=\"line\">import &#39;.&#x2F;index.css&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">export default class Footer extends Component &#123;</span><br><span class=\"line\">\trender() &#123;</span><br><span class=\"line\">\t\treturn (</span><br><span class=\"line\">\t\t\t&lt;div className&#x3D;&quot;todo-footer&quot;&gt;</span><br><span class=\"line\">\t\t\t\t&lt;label&gt;&lt;input type&#x3D;&quot;checkbox&quot; &#x2F;&gt;&lt;&#x2F;label&gt;</span><br><span class=\"line\">\t\t\t\t&lt;span&gt;&lt;span&gt;已完成0&lt;&#x2F;span&gt; &#x2F; 全部1&lt;&#x2F;span&gt;</span><br><span class=\"line\">\t\t\t\t&lt;button className&#x3D;&quot;btn btn-danger&quot;&gt;清除已完成任务&lt;&#x2F;button&gt;</span><br><span class=\"line\">\t\t\t&lt;&#x2F;div&gt;</span><br><span class=\"line\">\t\t)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此时静态代码已经基本拆分完毕，CSS由于不是本文重点，此处不详述，只需要知道，是哪些组件要用的CSS，就放到哪个组件的index.css文件下。</p>\n<h1 id=\"3-动态功能实现\"><a href=\"#3-动态功能实现\" class=\"headerlink\" title=\"3. 动态功能实现\"></a>3. 动态功能实现</h1><p>看下上面的功能总结，并和上面抽象的组件对应起来：</p>\n<ul>\n<li>新增任务（Header）<ul>\n<li>可以通过上面的输入栏新增任务</li>\n</ul>\n</li>\n<li><p>任务列表（List / Item）</p>\n<ul>\n<li>单个任务，鼠标hover后背景变深、展示删除按钮</li>\n<li>单个任务，可以通过前面的checkbox选择已完成或者未完成</li>\n<li>单个任务，如果点击删除后，任务消失</li>\n</ul>\n</li>\n<li><p>任务状态总结（Footer）</p>\n<ul>\n<li>下面任务总结栏，对当前已完成和全部任务的数量进行总结</li>\n<li>点击checkbox能实现所有任务的已完成/未完成状态切换</li>\n<li>点击“清除已完成任务”，删除所有已完成任务，并更新任务数量</li>\n</ul>\n</li>\n</ul>\n<p>挨个来实现一下：</p>\n<h2 id=\"3-1-组件之间数据流通\"><a href=\"#3-1-组件之间数据流通\" class=\"headerlink\" title=\"3.1 组件之间数据流通\"></a>3.1 组件之间数据流通</h2><p>首先我们要明确一下，任务的数据在哪里保存。由于这是个简单的项目，数据我们直接保存在前端代码中，具体放在哪个组件里，简单分析下：</p>\n<ul>\n<li><p>新增任务时：Header把数据传给List，List展示</p>\n</li>\n<li><p>管理单个任务时（删除/修改状态）：List（Item）内部修改</p>\n</li>\n<li><p>任务状态总结：Footer拿到所有数据的状态，并且可以进行删除和状态修改操作</p>\n</li>\n</ul>\n<p>通过上述分析，我们发现数据需要在各个组件中来回流转。React提供了2种方式来在多个组件中流转（可能不止，不过此处只学到了2种）：</p>\n<ul>\n<li>父Component中保存数据，传给子Component，同时提供操作数据的方法，也一并传给子Component，这样子Component通过调用父Component的方法可以操作数据。（此处的父和子Component的定义是：如果一个Component A引用了其它Component B，那么A就是B的父Component，而B是A的子Component）</li>\n<li>通过事件订阅-发布机制来流转数据，可以使用<code>pubsub-js</code>库</li>\n</ul>\n<p>可以看到第一种比较麻烦，第二种更灵活，但是为了学习基础知识，我们先用第一种。</p>\n<p>数据经过分析有：任务的名称、任务的状态。我们在父Component <code>App</code>中新增</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;初始化状态</span><br><span class=\"line\">state &#x3D; &#123;</span><br><span class=\"line\">    todos:[</span><br><span class=\"line\">        &#123;id:&#39;001&#39;,name:&#39;吃饭&#39;,done:true&#125;,</span><br><span class=\"line\">        &#123;id:&#39;002&#39;,name:&#39;睡觉&#39;,done:true&#125;,</span><br><span class=\"line\">        &#123;id:&#39;003&#39;,name:&#39;打代码&#39;,done:false&#125;,</span><br><span class=\"line\">        &#123;id:&#39;004&#39;,name:&#39;逛街&#39;,done:false&#125;</span><br><span class=\"line\">]&#125;</span><br></pre></td></tr></table></figure>\n<p>此处新增了一个id是因为列表是遍历todos数组生成的，如果列表中没有独一无二的key，React会报warning，一会儿写相关代码时会提到。</p>\n<h2 id=\"3-2-功能具体实现\"><a href=\"#3-2-功能具体实现\" class=\"headerlink\" title=\"3.2 功能具体实现\"></a>3.2 功能具体实现</h2><p>除了保存任务的数据以外，必须还有添加任务、更新任务状态、删除任务的函数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;addTodo用于添加一个todo，接收的参数是todo对象</span><br><span class=\"line\">addTodo &#x3D; (todoObj)&#x3D;&gt;&#123;</span><br><span class=\"line\">    &#x2F;&#x2F;获取原todos</span><br><span class=\"line\">    const &#123;todos&#125; &#x3D; this.state</span><br><span class=\"line\">    &#x2F;&#x2F;追加一个todo</span><br><span class=\"line\">    const newTodos &#x3D; [todoObj,...todos]</span><br><span class=\"line\">    &#x2F;&#x2F;更新状态</span><br><span class=\"line\">    this.setState(&#123;todos:newTodos&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;updateTodo用于更新一个todo对象</span><br><span class=\"line\">&#x2F;&#x2F; done表示要更新到的状态，可能是已完成true或者未完成false</span><br><span class=\"line\">updateTodo &#x3D; (id, done)&#x3D;&gt;&#123;</span><br><span class=\"line\">    &#x2F;&#x2F;获取状态中的todos</span><br><span class=\"line\">    const &#123;todos&#125; &#x3D; this.state</span><br><span class=\"line\">    &#x2F;&#x2F;匹配处理数据</span><br><span class=\"line\">    const newTodos &#x3D; todos.map((todoObj)&#x3D;&gt;&#123;</span><br><span class=\"line\">        if(todoObj.id &#x3D;&#x3D;&#x3D; id) return &#123;...todoObj,done&#125;</span><br><span class=\"line\">        else return todoObj</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    this.setState(&#123;todos:newTodos&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;deleteTodo用于删除一个todo对象</span><br><span class=\"line\">deleteTodo &#x3D; (id)&#x3D;&gt;&#123;</span><br><span class=\"line\">    &#x2F;&#x2F;获取原来的todos</span><br><span class=\"line\">    const &#123;todos&#125; &#x3D; this.state</span><br><span class=\"line\">    &#x2F;&#x2F;删除指定id的todo对象</span><br><span class=\"line\">    const newTodos &#x3D; todos.filter((todoObj)&#x3D;&gt;&#123;</span><br><span class=\"line\">        return todoObj.id !&#x3D;&#x3D; id</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    &#x2F;&#x2F;更新状态</span><br><span class=\"line\">    this.setState(&#123;todos:newTodos&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>还有Footer的功能：更改所有的任务状态和删除已完成的任务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;checkAllTodo用于全选任务或者全不选</span><br><span class=\"line\">checkAllTodo &#x3D; (done)&#x3D;&gt;&#123;</span><br><span class=\"line\">    &#x2F;&#x2F;获取原来的todos</span><br><span class=\"line\">    const &#123;todos&#125; &#x3D; this.state</span><br><span class=\"line\">    &#x2F;&#x2F;加工数据</span><br><span class=\"line\">    const newTodos &#x3D; todos.map((todoObj)&#x3D;&gt;&#123;</span><br><span class=\"line\">        return &#123;...todoObj,done&#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    &#x2F;&#x2F;更新状态</span><br><span class=\"line\">    this.setState(&#123;todos:newTodos&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;clearAllDone用于清除所有已完成的</span><br><span class=\"line\">clearAllDone &#x3D; ()&#x3D;&gt;&#123;</span><br><span class=\"line\">    &#x2F;&#x2F;获取原来的todos</span><br><span class=\"line\">    const &#123;todos&#125; &#x3D; this.state</span><br><span class=\"line\">    &#x2F;&#x2F;过滤数据</span><br><span class=\"line\">    const newTodos &#x3D; todos.filter((todoObj)&#x3D;&gt;&#123;</span><br><span class=\"line\">        return !todoObj.done</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    &#x2F;&#x2F;更新状态</span><br><span class=\"line\">    this.setState(&#123;todos:newTodos&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-3-组装后的代码\"><a href=\"#3-3-组装后的代码\" class=\"headerlink\" title=\"3.3 组装后的代码\"></a>3.3 组装后的代码</h2><p>接下来就是组装代码的过程，组装后的App.jsx</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React, &#123; Component &#125; from &#39;react&#39;</span><br><span class=\"line\">import Header from &#39;.&#x2F;components&#x2F;Header&#39;</span><br><span class=\"line\">import List from &#39;.&#x2F;components&#x2F;List&#39;</span><br><span class=\"line\">import Footer from &#39;.&#x2F;components&#x2F;Footer&#39;</span><br><span class=\"line\">import &#39;.&#x2F;App.css&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">export default class App extends Component &#123;</span><br><span class=\"line\">\t&#x2F;&#x2F;初始化状态</span><br><span class=\"line\">\tstate &#x3D; &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\taddTodo &#x3D; (todoObj)&#x3D;&gt;&#123;</span><br><span class=\"line\">        &#x2F;&#x2F;...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\tupdateTodo &#x3D; (id,done)&#x3D;&gt;&#123;</span><br><span class=\"line\">        &#x2F;&#x2F;...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\tdeleteTodo &#x3D; (id)&#x3D;&gt;&#123;</span><br><span class=\"line\">        &#x2F;&#x2F;...</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcheckAllTodo &#x3D; (done)&#x3D;&gt;&#123;</span><br><span class=\"line\">        &#x2F;&#x2F;...</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tclearAllDone &#x3D; ()&#x3D;&gt;&#123;</span><br><span class=\"line\">\t\t&#x2F;&#x2F; ...</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\trender() &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 拿到当前的所有任务</span><br><span class=\"line\">\t\tconst &#123;todos&#125; &#x3D; this.state</span><br><span class=\"line\">\t\treturn (</span><br><span class=\"line\">\t\t\t&lt;div className&#x3D;&quot;todo-container&quot;&gt;</span><br><span class=\"line\">\t\t\t\t&lt;div className&#x3D;&quot;todo-wrap&quot;&gt;</span><br><span class=\"line\">                    &lt;!-- 将添加任务的方法传给Header --&gt;</span><br><span class=\"line\">\t\t\t\t\t&lt;Header addTodo&#x3D;&#123;this.addTodo&#125;&#x2F;&gt;</span><br><span class=\"line\">                    &lt;!-- 将所有任务数据、更新单个任务状态和删除单个的方法传给List --&gt;</span><br><span class=\"line\">\t\t\t\t\t&lt;List todos&#x3D;&#123;todos&#125; </span><br><span class=\"line\">                        updateTodo&#x3D;&#123;this.updateTodo&#125; </span><br><span class=\"line\">                        deleteTodo&#x3D;&#123;this.deleteTodo&#125;</span><br><span class=\"line\">                    &#x2F;&gt;</span><br><span class=\"line\">                    &lt;!-- 将所有任务数据（为了统计任务数量）、更新全部任务状态和删除全部的方法传给Footer --&gt;</span><br><span class=\"line\">\t\t\t\t\t&lt;Footer todos&#x3D;&#123;todos&#125; </span><br><span class=\"line\">                        checkAllTodo&#x3D;&#123;this.checkAllTodo&#125;</span><br><span class=\"line\">                        clearAllDone&#x3D;&#123;this.clearAllDone&#125;</span><br><span class=\"line\">                     &#x2F;&gt;</span><br><span class=\"line\">\t\t\t\t&lt;&#x2F;div&gt;</span><br><span class=\"line\">\t\t\t&lt;&#x2F;div&gt;</span><br><span class=\"line\">\t\t)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此处对于出现过的代码有所精简，如果要查看全部代码请看<a href=\"https://github.com/StephenHuge/blog-code/tree/master/my-app\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<p>要记住的一点是：状态在哪里，操作状态的方法就在哪里。</p>\n<p>现在更新每个组件的代码：</p>\n<p>Header/index.jsx</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React, &#123; Component &#125; from &#39;react&#39;</span><br><span class=\"line\">&#x2F;&#x2F; prop-types可以对类型做约束</span><br><span class=\"line\">import PropTypes from &#39;prop-types&#39;</span><br><span class=\"line\">&#x2F;&#x2F; 引入一个随机数生成库来处理列表中缺少key时warning的问题</span><br><span class=\"line\">import &#123;nanoid&#125; from &#39;nanoid&#39;</span><br><span class=\"line\">import &#39;.&#x2F;index.css&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">export default class Header extends Component &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#x2F;&#x2F;对接收的props进行：类型、必要性的限制</span><br><span class=\"line\">\tstatic propTypes &#x3D; &#123;</span><br><span class=\"line\">\t\taddTodo:PropTypes.func.isRequired</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#x2F;&#x2F; 键盘事件的回调，调用后会传入一个event对象，里面</span><br><span class=\"line\">    &#x2F;&#x2F; 有事件触发后的各种数据，如按键对应的keyCode和</span><br><span class=\"line\">    &#x2F;&#x2F; 按键后生成的值</span><br><span class=\"line\">\thandleKeyUp &#x3D; (event)&#x3D;&gt;&#123;</span><br><span class=\"line\">\t\t&#x2F;&#x2F;解构赋值获取keyCode,target</span><br><span class=\"line\">\t\tconst &#123;keyCode,target&#125; &#x3D; event</span><br><span class=\"line\">\t\t&#x2F;&#x2F;判断是否是回车按键</span><br><span class=\"line\">\t\tif(keyCode !&#x3D;&#x3D; 13) return</span><br><span class=\"line\">\t\t&#x2F;&#x2F;添加的todo名字不能为空</span><br><span class=\"line\">\t\tif(target.value.trim() &#x3D;&#x3D;&#x3D; &#39;&#39;)&#123;</span><br><span class=\"line\">\t\t\talert(&#39;输入不能为空&#39;)</span><br><span class=\"line\">\t\t\treturn</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t&#x2F;&#x2F;准备好一个todo对象</span><br><span class=\"line\">\t\tconst todoObj &#x3D; &#123;id:nanoid(),name:target.value,done:false&#125;</span><br><span class=\"line\">\t\t&#x2F;&#x2F;将todoObj传递给App</span><br><span class=\"line\">\t\tthis.props.addTodo(todoObj)</span><br><span class=\"line\">\t\t&#x2F;&#x2F;清空输入</span><br><span class=\"line\">\t\ttarget.value &#x3D; &#39;&#39;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\trender() &#123;</span><br><span class=\"line\">\t\treturn (</span><br><span class=\"line\">\t\t\t&lt;div className&#x3D;&quot;todo-header&quot;&gt;</span><br><span class=\"line\">                &lt;!-- 此处监听input标签的onKeyUp事件，如果有按钮按下后松开，这个事件就会被触发，对应的handleKeyUp方法就会被调用 --&gt;</span><br><span class=\"line\">\t\t\t\t&lt;input onKeyUp&#x3D;&#123;this.handleKeyUp&#125; type&#x3D;&quot;text&quot; placeholder&#x3D;&quot;请输入你的任务名称，按回车键确认&quot;&#x2F;&gt;</span><br><span class=\"line\">\t\t\t&lt;&#x2F;div&gt;</span><br><span class=\"line\">\t\t)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>List/index.jsx</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React, &#123; Component &#125; from &#39;react&#39;</span><br><span class=\"line\">import PropTypes from &#39;prop-types&#39;</span><br><span class=\"line\">import Item from &#39;..&#x2F;Item&#39;</span><br><span class=\"line\">import &#39;.&#x2F;index.css&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">export default class List extends Component &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#x2F;&#x2F;对接收的props进行：类型、必要性的限制</span><br><span class=\"line\">\tstatic propTypes &#x3D; &#123;</span><br><span class=\"line\">\t\ttodos:PropTypes.array.isRequired,</span><br><span class=\"line\">\t\tupdateTodo:PropTypes.func.isRequired,</span><br><span class=\"line\">\t\tdeleteTodo:PropTypes.func.isRequired,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\trender() &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 通过props拿到App传来的数据和方法</span><br><span class=\"line\">\t\tconst &#123;todos,updateTodo,deleteTodo&#125; &#x3D; this.props</span><br><span class=\"line\">\t\treturn (</span><br><span class=\"line\">\t\t\t&lt;ul className&#x3D;&quot;todo-main&quot;&gt;</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">                    &lt;!-- map方法遍历todos --&gt;</span><br><span class=\"line\">\t\t\t\t\ttodos.map( todo &#x3D;&gt;&#123;</span><br><span class=\"line\">                   &lt;!-- key传给Item防止warning，&#123;...todo&#125;是直接把todos传给Item，同时传入2个方法 --&gt;        </span><br><span class=\"line\">\t\t\t\t\t\treturn &lt;Item key&#x3D;&#123;todo.id&#125; &#123;...todo&#125; updateTodo&#x3D;&#123;updateTodo&#125; deleteTodo&#x3D;&#123;deleteTodo&#125;&#x2F;&gt;</span><br><span class=\"line\">\t\t\t\t\t&#125;)</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&lt;&#x2F;ul&gt;</span><br><span class=\"line\">\t\t)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Footer/index.jsx</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React, &#123; Component &#125; from &#39;react&#39;</span><br><span class=\"line\">import &#39;.&#x2F;index.css&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">export default class Footer extends Component &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#x2F;&#x2F;全选checkbox的回调</span><br><span class=\"line\">\thandleCheckAll &#x3D; (event)&#x3D;&gt;&#123;</span><br><span class=\"line\">\t\tthis.props.checkAllTodo(event.target.checked)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#x2F;&#x2F;清除已完成任务的回调</span><br><span class=\"line\">\thandleClearAllDone &#x3D; ()&#x3D;&gt;&#123;</span><br><span class=\"line\">\t\tthis.props.clearAllDone()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\trender() &#123;</span><br><span class=\"line\">\t\tconst &#123;todos&#125; &#x3D; this.props</span><br><span class=\"line\">\t\t&#x2F;&#x2F;已完成的个数</span><br><span class=\"line\">\t\tconst doneCount &#x3D; todos.reduce((pre,todo)&#x3D;&gt; pre + (todo.done ? 1 : 0),0)</span><br><span class=\"line\">\t\t&#x2F;&#x2F;总数</span><br><span class=\"line\">\t\tconst total &#x3D; todos.length</span><br><span class=\"line\">\t\treturn (</span><br><span class=\"line\">\t\t\t&lt;div className&#x3D;&quot;todo-footer&quot;&gt;</span><br><span class=\"line\">\t\t\t\t&lt;label&gt;</span><br><span class=\"line\">\t\t\t\t\t&lt;input type&#x3D;&quot;checkbox&quot; onChange&#x3D;&#123;this.handleCheckAll&#125; checked&#x3D;&#123;doneCount &#x3D;&#x3D;&#x3D; total &amp;&amp; total !&#x3D;&#x3D; 0 ? true : false&#125;&#x2F;&gt;</span><br><span class=\"line\">\t\t\t\t&lt;&#x2F;label&gt;</span><br><span class=\"line\">\t\t\t\t&lt;span&gt;</span><br><span class=\"line\">\t\t\t\t\t&lt;span&gt;已完成&#123;doneCount&#125;&lt;&#x2F;span&gt; &#x2F; 全部&#123;total&#125;</span><br><span class=\"line\">\t\t\t\t&lt;&#x2F;span&gt;</span><br><span class=\"line\">\t\t\t\t&lt;button onClick&#x3D;&#123;this.handleClearAllDone&#125; className&#x3D;&quot;btn btn-danger&quot;&gt;清除已完成任务&lt;&#x2F;button&gt;</span><br><span class=\"line\">\t\t\t&lt;&#x2F;div&gt;</span><br><span class=\"line\">\t\t)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Item/index.jsx</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React, &#123; Component &#125; from &#39;react&#39;</span><br><span class=\"line\">import &#39;.&#x2F;index.css&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">export default class Item extends Component &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tstate &#x3D; &#123; mouse: false &#125; &#x2F;&#x2F;标识鼠标移入、移出</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#x2F;&#x2F;勾选、取消勾选某一个todo的回调</span><br><span class=\"line\">\thandleCheck &#x3D; (id) &#x3D;&gt; &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 这里注意不是直接使用调用方法</span><br><span class=\"line\">        &#x2F;&#x2F; 而是返回了一个函数</span><br><span class=\"line\">\t\treturn (event) &#x3D;&gt; &#123;</span><br><span class=\"line\">\t\t\tthis.props.updateTodo(id, event.target.checked)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t&#x2F;&#x2F;鼠标移入、移出的回调</span><br><span class=\"line\">\thandleMouse &#x3D; (flag) &#x3D;&gt; &#123;</span><br><span class=\"line\">\t\tthis.setState(&#123; mouse: flag &#125;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#x2F;&#x2F;删除一个todo的回调</span><br><span class=\"line\">\thandleDelete &#x3D; (id) &#x3D;&gt; &#123;</span><br><span class=\"line\">\t\tif (window.confirm(&#39;确定删除吗？&#39;)) &#123;</span><br><span class=\"line\">\t\t\tthis.props.deleteTodo(id)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\trender() &#123;</span><br><span class=\"line\">\t\tconst &#123; id, name, done &#125; &#x3D; this.props</span><br><span class=\"line\">\t\tconst &#123; mouse &#125; &#x3D; this.state</span><br><span class=\"line\">\t\treturn (</span><br><span class=\"line\">\t\t\t&lt;li style&#x3D;&#123;&#123; backgroundColor: mouse ? &#39;#ddd&#39; : &#39;white&#39; &#125;&#125; onMouseEnter&#x3D;&#123;this.handleMouse.bind(this, true)&#125; onMouseLeave&#x3D;&#123;this.handleMouse.bind(this, false)&#125;&gt;</span><br><span class=\"line\">\t\t\t\t&lt;label&gt;</span><br><span class=\"line\">\t\t\t\t\t&lt;input type&#x3D;&quot;checkbox&quot; checked&#x3D;&#123;done&#125; onChange&#x3D;&#123;this.handleCheck(id)&#125; &#x2F;&gt;</span><br><span class=\"line\">\t\t\t\t\t&lt;span&gt;&#123;name&#125;&lt;&#x2F;span&gt;</span><br><span class=\"line\">\t\t\t\t&lt;&#x2F;label&gt;</span><br><span class=\"line\">\t\t\t\t&lt;button onClick&#x3D;&#123;() &#x3D;&gt; this.handleDelete(id)&#125; className&#x3D;&quot;btn btn-danger&quot; style&#x3D;&#123;&#123; display: mouse ? &#39;block&#39; : &#39;none&#39; &#125;&#125;&gt;删除&lt;&#x2F;button&gt;</span><br><span class=\"line\">\t\t\t&lt;&#x2F;li&gt;</span><br><span class=\"line\">\t\t)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-4-带参数方法的绑定\"><a href=\"#3-4-带参数方法的绑定\" class=\"headerlink\" title=\"3.4 带参数方法的绑定\"></a>3.4 带参数方法的绑定</h2><p>这里注意：要绑定<code>onClick</code>、<code>onMouseEnter</code>、<code>onMouseLeave</code>等事件时，由于需要传入参数，如果直接使用<code>onClick={this.handleDelete(id)}</code>类似的方式直接调用，这个方法会在页面渲染后立即执行，而不是点击按钮时执行。原因是这样传参其实是传了方法调用后的返回值而不是方法本身。React提供了3种方式来解决这种情况：</p>\n<p>原始情况:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">handleDelete &#x3D; () &#x3D;&gt; &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 这里其实是删除的实际逻辑，我们用console打印一下日志代替一下</span><br><span class=\"line\">    console.log(&#39;Click delete button!&#39;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;button </span><br><span class=\"line\">    className&#x3D;&quot;btn btn-danger&quot; </span><br><span class=\"line\">    &#x2F;&#x2F; 如果这样直接调用的话，在页面渲染后，会立马打印方法里的文字</span><br><span class=\"line\">    &#x2F;&#x2F; 而不是在点击按钮后</span><br><span class=\"line\">    onClick&#x3D;&#123;this.handleDelete(id)&#125;</span><br><span class=\"line\">&gt;删除&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure>\n<ol>\n<li><p>使用<code>bind</code>关键字：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">handleDelete &#x3D; (id) &#x3D;&gt; &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 这里其实是删除的实际逻辑，我们用console打印一下日志代替一下</span><br><span class=\"line\">    console.log(&#39;Click delete button! Id &#x3D; &#39; + id);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;button </span><br><span class=\"line\">    className&#x3D;&quot;btn btn-danger&quot; </span><br><span class=\"line\">    &#x2F;&#x2F; 使用bind关键字后，只有点击按钮后才会打印方法里的文字</span><br><span class=\"line\">    onClick&#x3D;&#123;this.handleDelete.bind(this, id)&#125;</span><br><span class=\"line\">&gt;删除&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>方法返回一个函数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">handleDelete &#x3D; (id) &#x3D;&gt; &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 这里改为返回一个函数，而不是直接执行逻辑</span><br><span class=\"line\">    return () &#x3D;&gt; console.log(&#39;Click delete button! Id &#x3D; &#39; + id);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;button </span><br><span class=\"line\">    className&#x3D;&quot;btn btn-danger&quot; </span><br><span class=\"line\">    &#x2F;&#x2F; 绑定后，只有点击按钮后才会打印方法里的文字</span><br><span class=\"line\">    onClick&#x3D;&#123;this.handleDelete(id)&#125;</span><br><span class=\"line\">&gt;删除&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>onClick</code>绑定时使用函数的方式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">handleDelete &#x3D; (id) &#x3D;&gt; &#123;</span><br><span class=\"line\">    console.log(&#39;Click delete button! Id &#x3D; &#39; + id);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;button </span><br><span class=\"line\">    className&#x3D;&quot;btn btn-danger&quot; </span><br><span class=\"line\">    &#x2F;&#x2F; 使用函数式绑定，只有点击按钮后才会打印方法里的文字</span><br><span class=\"line\">    onClick&#x3D;&#123;() &#x3D;&gt; this.handleDelete(id)&#125;</span><br><span class=\"line\">&gt;删除&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n","link":"","permalink":"https://stevehuge.github.io/2022/08/23/React%E6%9E%81%E7%AE%80%E5%85%A5%E9%97%A8-1/","categories":[],"tags":[{"name":"React","slug":"React","permalink":"https://stevehuge.github.io/tags/React/"},{"name":"前端","slug":"前端","permalink":"https://stevehuge.github.io/tags/%E5%89%8D%E7%AB%AF/"},{"name":"个人思考","slug":"个人思考","permalink":"https://stevehuge.github.io/tags/%E4%B8%AA%E4%BA%BA%E6%80%9D%E8%80%83/"},{"name":"入门","slug":"入门","permalink":"https://stevehuge.github.io/tags/%E5%85%A5%E9%97%A8/"}]},{"title":"MyBatis系列之-JDBC","date":"2022-08-15T13:05:46.000Z","path":"2022/08/15/MyBatis系列之-JDBC/","content":"<p><img src=\"https://steve-blog-pics.oss-cn-nanjing.aliyuncs.com/imgs/%E6%88%AA%E5%B1%8F2022-08-15%2023.04.54.png\" alt=\"截屏2022-08-15 23.04.54\"></p>\n<p>本系列文章旨在学习整理MyBatis的一些知识。本文是本系列的第一篇，用来介绍JDBC的内容，本文不是纯新手教程，如果有疑问，请查询官方文档。</p>\n<a id=\"more\"></a>\n<h1 id=\"1-JDBC的基本使用\"><a href=\"#1-JDBC的基本使用\" class=\"headerlink\" title=\"1. JDBC的基本使用\"></a>1. JDBC的基本使用</h1><p>JDBC（Java database connectivity），是Java官方出的一个接口标准，第三方厂家可以通过实现此标准来让自己的产品可以通过JDBC通用接口来连接。</p>\n<p>常用的几个类：</p>\n<ul>\n<li>Connection：表示一个数据库连接</li>\n<li>Statement / PreparedStatement：表示一个数据库语句，区别是PreparedStatement可以防止SQL注入</li>\n<li>ResultSet：通过Statement查到的结果集</li>\n<li>ResultSetMetaData：通过ResultSet获得的结果集元数据</li>\n<li>DataSource：数据库连接池，对Connection进行池化的操作接口</li>\n</ul>\n<p>通过Connection、Statement 、ResultSet就可以使用JDBC连接数据库了。以下是代码示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.sql.*;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JdbcDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        String username = <span class=\"string\">\"root\"</span>;</span><br><span class=\"line\">        String password = <span class=\"string\">\"1234\"</span>;</span><br><span class=\"line\">        String jdbcUrl = <span class=\"string\">\"jdbc:MySQL:///lu_tale\"</span>;</span><br><span class=\"line\">        String driverClass = <span class=\"string\">\"com.MySQL.jdbc.Driver\"</span>;</span><br><span class=\"line\">        String sql = <span class=\"string\">\"SELECT uid, username, password\"</span></span><br><span class=\"line\">                + <span class=\"string\">\" FROM t_users WHERE username = ?\"</span>;</span><br><span class=\"line\">        Connection connection = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        PreparedStatement ps = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        ResultSet rs = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        ResultSetMetaData rsmd = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Class.forName(driverClass);</span><br><span class=\"line\">            connection = DriverManager.getConnection(jdbcUrl, username, password);</span><br><span class=\"line\">            ps = connection.prepareStatement(sql);</span><br><span class=\"line\">            ps.setString(<span class=\"number\">1</span>, <span class=\"string\">\"admin' and 1 = 1\"</span>);</span><br><span class=\"line\">            rs = ps.executeQuery();</span><br><span class=\"line\">            rsmd = rs.getMetaData();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (rs.next()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> id = rs.getInt(<span class=\"number\">1</span>);</span><br><span class=\"line\">                String name = rs.getString(<span class=\"number\">2</span>);</span><br><span class=\"line\">                String bestSong = rs.getString(<span class=\"number\">3</span>);</span><br><span class=\"line\">                System.out.println(rsmd.getColumnLabel(<span class=\"number\">1</span>) + <span class=\"string\">\": \"</span> + id + <span class=\"string\">\", \"</span> +</span><br><span class=\"line\">                        rsmd.getColumnLabel(<span class=\"number\">2</span>) + <span class=\"string\">\": \"</span> + name + <span class=\"string\">\", \"</span> +</span><br><span class=\"line\">                        rsmd.getColumnLabel(<span class=\"number\">3</span>) + <span class=\"string\">\": \"</span> + bestSong);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (rs != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    rs.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ps != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    ps.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (connection != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    connection.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用数据库连接池：</p>\n<p>数据库连接池实现常用的有3种：DBCP、C3P0和Druid。</p>\n<p>此处不详述，具体可以参见我刚开始学习时写的<a href=\"https://github.com/StephenHuge/MyJDBCReWrite\" target=\"_blank\" rel=\"noopener\">demo code</a>。</p>\n<h1 id=\"2-PreparedStatement为什么能防SQL注入？\"><a href=\"#2-PreparedStatement为什么能防SQL注入？\" class=\"headerlink\" title=\"2. PreparedStatement为什么能防SQL注入？\"></a>2. PreparedStatement为什么能防SQL注入？</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setString</span><span class=\"params\">(<span class=\"keyword\">int</span> parameterIndex, String x)</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span>(<span class=\"keyword\">this</span>.checkClosed().getConnectionMutex()) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// ...省略</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.isLoadDataQuery || <span class=\"keyword\">this</span>.isEscapeNeededForString(x, stringLength)) &#123;</span><br><span class=\"line\">                needsQuoted = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                buf = <span class=\"keyword\">new</span> StringBuilder((<span class=\"keyword\">int</span>)((<span class=\"keyword\">double</span>)x.length() * <span class=\"number\">1.1</span>));</span><br><span class=\"line\">                buf.append(<span class=\"string\">'\\''</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; stringLength; ++i) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">char</span> c = x.charAt(i);</span><br><span class=\"line\">                    <span class=\"keyword\">switch</span> (c) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">case</span> <span class=\"string\">'\\u0000'</span>:</span><br><span class=\"line\">                            buf.append(<span class=\"string\">'\\\\'</span>);</span><br><span class=\"line\">                            buf.append(<span class=\"string\">'0'</span>);</span><br><span class=\"line\">                            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">case</span> <span class=\"string\">'\\n'</span>:</span><br><span class=\"line\">                            buf.append(<span class=\"string\">'\\\\'</span>);</span><br><span class=\"line\">                            buf.append(<span class=\"string\">'n'</span>);</span><br><span class=\"line\">                            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">case</span> <span class=\"string\">'\\r'</span>:</span><br><span class=\"line\">                            buf.append(<span class=\"string\">'\\\\'</span>);</span><br><span class=\"line\">                            buf.append(<span class=\"string\">'r'</span>);</span><br><span class=\"line\">                            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">case</span> <span class=\"string\">'\\u001a'</span>:</span><br><span class=\"line\">                            buf.append(<span class=\"string\">'\\\\'</span>);</span><br><span class=\"line\">                            buf.append(<span class=\"string\">'Z'</span>);</span><br><span class=\"line\">                            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">case</span> <span class=\"string\">'\"'</span>:</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.usingAnsiMode) &#123;</span><br><span class=\"line\">                                buf.append(<span class=\"string\">'\\\\'</span>);</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                            buf.append(<span class=\"string\">'\"'</span>);</span><br><span class=\"line\">                            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                        <span class=\"comment\">// 如果传入的值有单引号，就传入转义符 + 单引号    </span></span><br><span class=\"line\">                        <span class=\"keyword\">case</span> <span class=\"string\">'\\''</span>:</span><br><span class=\"line\">                            buf.append(<span class=\"string\">'\\\\'</span>);</span><br><span class=\"line\">                            buf.append(<span class=\"string\">'\\''</span>);</span><br><span class=\"line\">                            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">case</span> <span class=\"string\">'\\\\'</span>:</span><br><span class=\"line\">                            buf.append(<span class=\"string\">'\\\\'</span>);</span><br><span class=\"line\">                            buf.append(<span class=\"string\">'\\\\'</span>);</span><br><span class=\"line\">                            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">case</span> <span class=\"string\">'¥'</span>:</span><br><span class=\"line\">                        <span class=\"keyword\">case</span> <span class=\"string\">'₩'</span>:</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.charsetEncoder != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                                CharBuffer cbuf = CharBuffer.allocate(<span class=\"number\">1</span>);</span><br><span class=\"line\">                                ByteBuffer bbuf = ByteBuffer.allocate(<span class=\"number\">1</span>);</span><br><span class=\"line\">                                cbuf.put(c);</span><br><span class=\"line\">                                cbuf.position(<span class=\"number\">0</span>);</span><br><span class=\"line\">                                <span class=\"keyword\">this</span>.charsetEncoder.encode(cbuf, bbuf, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">                                <span class=\"keyword\">if</span> (bbuf.get(<span class=\"number\">0</span>) == <span class=\"number\">92</span>) &#123;</span><br><span class=\"line\">                                    buf.append(<span class=\"string\">'\\\\'</span>);</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                            buf.append(c);</span><br><span class=\"line\">                            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                            buf.append(c);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                buf.append(<span class=\"string\">'\\''</span>);</span><br><span class=\"line\">                parameterAsString = buf.toString();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"><span class=\"comment\">// ...省略</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这是MySQL实现的<code>PreparedStatement</code>的<code>setString()</code>方法实现，代码略去了一些无关的代码，看这行：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 如果传入的值有单引号，就传入转义符 + 单引号    </span></span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">'\\''</span>:</span><br><span class=\"line\">\tbuf.append(<span class=\"string\">'\\\\'</span>);</span><br><span class=\"line\">\tbuf.append(<span class=\"string\">'\\''</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">break</span>;</span><br></pre></td></tr></table></figure>\n<p>在进入这个逻辑之前，先进行了判断</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.isLoadDataQuery || <span class=\"keyword\">this</span>.isEscapeNeededForString(x, stringLength))</span><br></pre></td></tr></table></figure>\n<p>这行中调用了<code>isEscapeNeededForString()</code>方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEscapeNeededForString</span><span class=\"params\">(String x, <span class=\"keyword\">int</span> stringLength)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">boolean</span> needsHexEscape = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; stringLength; ++i) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">char</span> c = x.charAt(i);</span><br><span class=\"line\">           <span class=\"keyword\">switch</span> (c) &#123;</span><br><span class=\"line\">               <span class=\"keyword\">case</span> <span class=\"string\">'\\u0000'</span>:</span><br><span class=\"line\">                   needsHexEscape = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                   <span class=\"keyword\">break</span>;</span><br><span class=\"line\">               <span class=\"keyword\">case</span> <span class=\"string\">'\\n'</span>:</span><br><span class=\"line\">                   needsHexEscape = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                   <span class=\"keyword\">break</span>;</span><br><span class=\"line\">               <span class=\"keyword\">case</span> <span class=\"string\">'\\r'</span>:</span><br><span class=\"line\">                   needsHexEscape = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                   <span class=\"keyword\">break</span>;</span><br><span class=\"line\">               <span class=\"keyword\">case</span> <span class=\"string\">'\\u001a'</span>:</span><br><span class=\"line\">                   needsHexEscape = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                   <span class=\"keyword\">break</span>;</span><br><span class=\"line\">               <span class=\"keyword\">case</span> <span class=\"string\">'\"'</span>:</span><br><span class=\"line\">                   needsHexEscape = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                   <span class=\"keyword\">break</span>;</span><br><span class=\"line\">               <span class=\"keyword\">case</span> <span class=\"string\">'\\''</span>:</span><br><span class=\"line\">                   needsHexEscape = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                   <span class=\"keyword\">break</span>;</span><br><span class=\"line\">               <span class=\"keyword\">case</span> <span class=\"string\">'\\\\'</span>:</span><br><span class=\"line\">                   needsHexEscape = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"keyword\">if</span> (needsHexEscape) &#123;</span><br><span class=\"line\">               <span class=\"keyword\">break</span>;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">return</span> needsHexEscape;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>也就是，如果传入的参数中含有单引号<code>&#39;</code>，PreparedStatement会为其添加转义符，以防止SQL注入。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 转义前传入的原始参数</span></span><br><span class=\"line\">[admin<span class=\"string\">' and '</span><span class=\"number\">1</span><span class=\"string\">' = '</span><span class=\"number\">1</span>]</span><br><span class=\"line\"><span class=\"comment\">// 转义后的参数</span></span><br><span class=\"line\">[admin\\<span class=\"string\">' and \\'1\\' = \\'1]</span></span><br></pre></td></tr></table></figure>\n","link":"","permalink":"https://stevehuge.github.io/2022/08/15/MyBatis%E7%B3%BB%E5%88%97%E4%B9%8B-JDBC/","categories":[],"tags":[{"name":"数据库","slug":"数据库","permalink":"https://stevehuge.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"JDBC","slug":"JDBC","permalink":"https://stevehuge.github.io/tags/JDBC/"},{"name":"MyBatis","slug":"MyBatis","permalink":"https://stevehuge.github.io/tags/MyBatis/"}]},{"title":"关于写技术博客的碎碎念","date":"2022-08-06T13:05:46.000Z","path":"2022/08/06/关于写技术博客的碎碎念/","content":"<p><img src=\"https://steve-blog-pics.oss-cn-nanjing.aliyuncs.com/imgs/%E6%88%AA%E5%B1%8F2022-08-15%2022.57.06.png\" alt=\"截屏2022-08-15 22.57.06\"></p>\n<p>曾经写过一段时间“技术博客”，但是都没坚持下来。“技术博客”打引号是因为现在看来，那些文章并不算真正的技术博客，有为了找工作而做的各种东拼西凑、还有些纯粹就是书本或者技术文档的摘抄和贴图。严格意义上算不得技术博客。</p>\n<p>现在有时间坐下来好好想想，要不要写技术博客，怎么写技术博客（如果要写）这几个萦绕在心头的问题。</p>\n<p>如果在很长的时间尺度中观察，想在事业上取得成就，把自己学到的积累并用自己的方式结构化是必要的，而写技术博客是一种方式。之前写技术博客总是坚持不下来，失败的原因很大程度上是：<strong>写博客不是为了让自己成长，而是为了在找工作时简历上多点东西。</strong>这种想法现在看来十分短视和肤浅，失败只是时间问题。如果是为了自己能在以5年为时间尺度总结自己的能力成长，那么写技术博客是个不错的选择。</p>\n<p>写技术博客还是以兴趣和目标驱动为主。找一个合适的平台，坚持下去。要不断的提醒自己，写文章是为了提升自己的知识储备，找工作或者别人的关注都是附带的，那些并带不来长久的快乐和提升。</p>\n","link":"","permalink":"https://stevehuge.github.io/2022/08/06/%E5%85%B3%E4%BA%8E%E5%86%99%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2%E7%9A%84%E7%A2%8E%E7%A2%8E%E5%BF%B5/","categories":[],"tags":[{"name":"随笔","slug":"随笔","permalink":"https://stevehuge.github.io/tags/%E9%9A%8F%E7%AC%94/"}]},{"title":"2022-08-05随笔","date":"2022-08-05T13:05:46.000Z","path":"2022/08/05/2022-08-05随笔/","content":"<p><img src=\"https://steve-blog-pics.oss-cn-nanjing.aliyuncs.com/imgs/u=3720331565,2925078982&amp;fm=253&amp;app=120&amp;f=JPEG&amp;fmt=auto&amp;q=75.jpeg\" alt=\"img\"></p>\n<p>在最近读了一些书，但是人生还是没有太大的起色，感觉总是对生活提不起热爱。内心仍有诸多纠葛和自我拉扯。<br>很多时候其实不是不知道答案，而是不理解答案。觉得自己按照自己的方式走也不会太差，但是结果是“失之毫厘，差之千里”。但是日子总是要过，而且希望越过越好。一些努力不是深彻的，但是仍然值得鼓励，因为只有慢慢的坚持，最终从整体来看，才是健康的、昂扬的。</p>\n<a id=\"more\"></a>\n<p>不满足现状是因为内心一定有个标杆，自己达到了这个标杆才满足，没有达到就会一直心有戚戚焉。有本书上说：“人对绝对感受不敏感，而对变化敏感。”不满足现状是人基因里带来的，被自然选择过的结果（满足现状的基因可能在气候不好时不能适应环境而被灭绝了）。</p>\n<p>从5年甚至10年为维度来看，目前的现状其实是还不错的，至少不会低于预期。很早以前只觉得能找到一份工作就好了，再之后觉得能找到一份大公司的工作就好了，要是能有一个可以长相厮守的人就更好了。从现在看，这些都实现了。但是内心还是不满足（可恶的基因啊），希望自己能有更高的成就，而不是止步不前。那么如果在若干年后，现在的目标也实现了，自己会满足吗？可能那时候就有更高的目标和追求了，但是在追求目标的时候可能也是现在这样，心有戚戚，并不快乐。</p>\n<p>快乐和奋斗冲突吗？有快乐的奋斗者么？传统故事里，一般都乐于渲染“卧薪尝胆”、“天降大任于斯人也，必先苦其心志 …”云云，告诉我们奋斗可能不怎么快乐，至少并不容易，不是一般人能做到的。但是也听说过有每天志得意满，充满斗志去做事，去奋斗的人。那么就很有意思了，这两条思路可能不冲突。从观察者看来，奋斗这种事是很苦很累的，让人去做十分不人道。那么这些最终成功的人是怎么做到的呢？在他们自己看来，可能并不如观察者看到的那么累，“人不堪其忧，回也不改其乐。贤哉，回也！”自己反而满是冲劲，因为少见，所以孔夫子也要称道一声“贤哉”的。</p>\n<p>对现状不安，拒绝现有的工作，可能不是最好的应对之道，甚至不能说是一个好的应对之道。列举一下自己拥有的，记住自己想要的，可能各有几条。如果自己拥有的几条无法实现有些你想要的条目，忘记这些想要的条目，原因很简单，因为你无法实现，所以想之无用。如果对于自己想要的奋斗乏力，那就想想自己拥有的，你就会更有干劲。 — 《和时间做朋友》</p>\n<p>另一条：出卖时间永远无法实现财富自由，如果想要财富自由，或者接近它，试着用其他的方式来获取财富，股票是一个可行之路，无论是持有别人公司的股票还是自己公司的。</p>\n<p>记录下来当前的想法，希望作为一个锚定，如果日后有类似思想上的纠葛，随时查阅。人还是要往前看，一直呆在一个地方，原地踏步，不肯出来，那可不行。路上说不定有新的风景呢。^_^</p>\n","link":"","permalink":"https://stevehuge.github.io/2022/08/05/2022-08-05%E9%9A%8F%E7%AC%94/","categories":[],"tags":[{"name":"随笔","slug":"随笔","permalink":"https://stevehuge.github.io/tags/%E9%9A%8F%E7%AC%94/"}]},{"title":"听讲座有感-技术驱动业务","date":"2020-11-30T18:21:11.000Z","path":"2020/12/01/听讲座有感-技术驱动业务/","content":"<p>这是听的公司讲关于技术人如何后续发展的讲座，听讲座不能只作机械的记忆，而是应该结合自己的理解，去深入理会和吸收。因为讲座一般是一个人关于自己一段时间内的行为以及收获的总结，它可以帮助我们少走一些弯路，提供更清晰的发展路径。</p>\n<p>演讲主题是《技术驱动业务》。</p>\n<a id=\"more\"></a>\n<h1 id=\"技术驱动业务\"><a href=\"#技术驱动业务\" class=\"headerlink\" title=\"技术驱动业务\"></a>技术驱动业务</h1><h2 id=\"1-技术人的发展方向\"><a href=\"#1-技术人的发展方向\" class=\"headerlink\" title=\"1. 技术人的发展方向\"></a>1. 技术人的发展方向</h2><p>一般有2个路径：</p>\n<ul>\n<li>纵向发展：纯技术领域深耕</li>\n<li>横向发展：复合发展，更多关注业务</li>\n</ul>\n<p>一些需要说明的点：</p>\n<ol>\n<li>有个认知误区：认为纯技术路线走不了太远，后面需要转管理。这其实是个认知谬误，只要技术好，纯技术的路线天花板很高。要做到这点，要关注自己的长进，多轮岗，克服自己的惰性和对变化的恐惧；</li>\n<li>技术 -&gt; 业务，比较容易，写代码的人一般业务不会差；业务 -&gt; 技术：除非爱好，否则业务往往是条不归路；</li>\n<li>技术的深度和赋予的理解力，往往决定了你在横向领域走多远。相同规模的业务的复杂程度一般比技术复杂程度要低，就像学了高等数学后，再去看高中数学，就觉得没有那么难。如果对复杂的逻辑有较为透彻的理解，相对简单的逻辑则不再是问题。</li>\n</ol>\n<h2 id=\"2-什么样的技术人最有价值？\"><a href=\"#2-什么样的技术人最有价值？\" class=\"headerlink\" title=\"2. 什么样的技术人最有价值？\"></a>2. 什么样的技术人最有价值？</h2><p>个人觉得这个标准还是相当高的，不断的让自己接近这个标准，才会有所进益。</p>\n<h3 id=\"a-听老板指挥，指哪打哪\"><a href=\"#a-听老板指挥，指哪打哪\" class=\"headerlink\" title=\"a. 听老板指挥，指哪打哪\"></a>a. 听老板指挥，指哪打哪</h3><p>这句话不绝对，不应唯老板命是从。而是老板的要求下来后，经过自己的分析，得出要不要做，怎么做，老板提的是否有不合理或者不完善的地方，再和老板沟通确认后再”指哪打哪“。</p>\n<p>如果和老板意见相左，听老板的指挥不是唯上或者是简单的拍老板马屁。</p>\n<p>理性分析，老板和自己的决定哪个是正确的，这个可能性一般不会是50%-50%，一般领导会站在更大的scale或者全局的角度来思考问题。所以如果出现了分歧，提出自己的担忧和可能出现的隐患，让决策者知道按照他的方式做，会有怎么样的收益和损失，之后再决定按照谁的方法做。决定了之后，保质保量完成任务，执行过程中遇到突发状况，能解决就自己解决，不能解决，想好1~2个解决方案，让决策者去选择。</p>\n<h3 id=\"b-技术NB搞得定，故障少可靠性高\"><a href=\"#b-技术NB搞得定，故障少可靠性高\" class=\"headerlink\" title=\"b. 技术NB搞得定，故障少可靠性高\"></a>b. 技术NB搞得定，故障少可靠性高</h3><p>这算做技术人的基本要求，使用合理和更加现代化的方法论会有更好的效果。例如UnitTest，集成化测试等等。</p>\n<h3 id=\"c-上下级喜欢，产品-业务好评，360度受欢迎度高\"><a href=\"#c-上下级喜欢，产品-业务好评，360度受欢迎度高\" class=\"headerlink\" title=\"c. 上下级喜欢，产品/业务好评，360度受欢迎度高\"></a>c. 上下级喜欢，产品/业务好评，360度受欢迎度高</h3><p>这个对个人的人际交往能力提出了要求，也对自己的能力有更高的要求，要在同事中口碑好，这个需要自己及时，保质保量的做好手中的工作，能够及时准确的应对各种突发情况，其实是一个相当高的要求。</p>\n<h3 id=\"d-带领的团队越来越强，凝聚力高\"><a href=\"#d-带领的团队越来越强，凝聚力高\" class=\"headerlink\" title=\"d. 带领的团队越来越强，凝聚力高\"></a>d. 带领的团队越来越强，凝聚力高</h3><p>团队的技术氛围要好，和同事，下级要建立和谐的革命友谊。</p>\n<h3 id=\"e-外面的工作找上门，离开了就升职加薪\"><a href=\"#e-外面的工作找上门，离开了就升职加薪\" class=\"headerlink\" title=\"e. 外面的工作找上门，离开了就升职加薪\"></a>e. 外面的工作找上门，离开了就升职加薪</h3><p>这个个人理解还是应该从核心竞争力上来入手，不要以离开为目的。而是在工作生活中提升自己的技术实力，提高自己在团队中的技术话语权。</p>\n<p>也不以升职加薪为唯一目的，虽然现在社会上充斥着这么一种”向钱看齐“的论调，但从各种经验来看，这种论调过于肤浅和偏于流俗，难成大事。当专注于业务本身，同时注重提升自己的能力和话语权，升职加薪会是水到渠成的事。</p>\n<p>技术人应该以做出自己在团队，在公司，在业界的口碑为目标，这样路才越走越宽。</p>\n<h2 id=\"3-正确理解技术驱动业务\"><a href=\"#3-正确理解技术驱动业务\" class=\"headerlink\" title=\"3. 正确理解技术驱动业务\"></a>3. 正确理解技术驱动业务</h2><p>首先，现在的互联网企业，至少大部分业务50%以上都需要技术来做支撑，所以技术人出任各个BU的CEO都是康庄大道。</p>\n<p>技术驱动业务不是简单的业务听技术的，核心可以总结为以下三点：</p>\n<ul>\n<li>创造性地以更高效率或可靠性提升现有方案  </li>\n<li>基于技术的新应用提出并实现新的业务机会 </li>\n<li>用户体验的改进</li>\n</ul>\n<h2 id=\"4-关于驱动的谬误\"><a href=\"#4-关于驱动的谬误\" class=\"headerlink\" title=\"4. 关于驱动的谬误\"></a>4. 关于驱动的谬误</h2><h3 id=\"驱动变成了话语权的争夺\"><a href=\"#驱动变成了话语权的争夺\" class=\"headerlink\" title=\"驱动变成了话语权的争夺\"></a>驱动变成了话语权的争夺</h3><p>技术和产品不能形成合力，其实是各种无能造成的：</p>\n<h4 id=\"1-领导者的无能\"><a href=\"#1-领导者的无能\" class=\"headerlink\" title=\"1. 领导者的无能\"></a>1. 领导者的无能</h4><p>不知道哪边是对的，或者知道哪边是对的，但是由于各种原因，不能坚持正确的意见 — 不要做这样的领导者。</p>\n<h4 id=\"2-产品的无能\"><a href=\"#2-产品的无能\" class=\"headerlink\" title=\"2. 产品的无能\"></a>2. 产品的无能</h4><p>知道技术在折腾/故弄玄虚/怠工却无能为力</p>\n<h4 id=\"3-技术人的无能\"><a href=\"#3-技术人的无能\" class=\"headerlink\" title=\"3. 技术人的无能\"></a>3. 技术人的无能</h4><p>明明知道自己是对的，却不能说服业务/产品/CEO</p>\n<h2 id=\"5-说服能力：领导力的核心组成成分\"><a href=\"#5-说服能力：领导力的核心组成成分\" class=\"headerlink\" title=\"5. 说服能力：领导力的核心组成成分\"></a>5. 说服能力：领导力的核心组成成分</h2><p>技术团队内部，技术特有的语言，技术强的人往往自带强的说服能力</p>\n<p>带领技术团队的人最好是团队内技术能力最强的人(起码是最强者之一)</p>\n<h2 id=\"6-技术如何说服业务？\"><a href=\"#6-技术如何说服业务？\" class=\"headerlink\" title=\"6. 技术如何说服业务？\"></a>6. 技术如何说服业务？</h2><h3 id=\"a-用业务语言，向业务团队说明白\"><a href=\"#a-用业务语言，向业务团队说明白\" class=\"headerlink\" title=\"a. 用业务语言，向业务团队说明白:\"></a>a. 用业务语言，向业务团队说明白:</h3><ul>\n<li>需要先做什么后做什么;(顺序，优先级)</li>\n<li>什么应该做 / 不应该做;(ROI，长期代价，后遗症)</li>\n<li>没有底气站出来说，是因为没有信心 ?逆来顺受明哲保身?</li>\n<li>对技术理解足够深的人应该具备深入简出地对不懂技术地人讲清楚的能力</li>\n</ul>\n<h3 id=\"b-站出来制止滥用\"><a href=\"#b-站出来制止滥用\" class=\"headerlink\" title=\"b. 站出来制止滥用:\"></a>b. 站出来制止滥用:</h3><ul>\n<li>“某领导的项目”;“某领导要做的”</li>\n<li>“这个季度我们要做到某某KPI” – 短期KPI驱动都是短时的局部利益驱动行为</li>\n<li>不站出来的原因，怕得罪人，明哲保身 ?担心工作安全 ?</li>\n</ul>\n<p>不要担心工作安全，工作被辞退了，那就再换。不能容忍不同意见、出于好心而提出的意见的领导者，这样的领导者不值得跟着他混。</p>\n<p>不要做老好人，老好人不被人看重，也没有前途。</p>\n","link":"","permalink":"https://stevehuge.github.io/2020/12/01/%E5%90%AC%E8%AE%B2%E5%BA%A7%E6%9C%89%E6%84%9F-%E6%8A%80%E6%9C%AF%E9%A9%B1%E5%8A%A8%E4%B8%9A%E5%8A%A1/","categories":[],"tags":[{"name":"讲座","slug":"讲座","permalink":"https://stevehuge.github.io/tags/%E8%AE%B2%E5%BA%A7/"},{"name":"发展路径","slug":"发展路径","permalink":"https://stevehuge.github.io/tags/%E5%8F%91%E5%B1%95%E8%B7%AF%E5%BE%84/"}]},{"title":"Some Words In 2020","date":"2020-11-08T11:00:00.000Z","path":"2020/11/08/Some-Words/","content":"<p>最近准备提离职去南京工作，对近两年做个总结。</p>\n<h1 id=\"1-学习到的\"><a href=\"#1-学习到的\" class=\"headerlink\" title=\"1. 学习到的\"></a>1. 学习到的</h1><ol>\n<li>得到了一些教训，对自己不理解或者自身价值观不接受的行为，不过早表露态度，多观察，<strong>多思考</strong>。</li>\n<li>整体上对业务的理解有一定深入。在做一个产品或者功能时，不再仅着急实现预定好的功能，而是先思考功能是否完善，流程是否形成<strong>闭环</strong>，之后再来设计开发。相对以前有很多进益。</li>\n<li>技术上学习到了一些学习的方法，例如源码阅读，很多工具和使用，代码设计也有提高。</li>\n</ol>\n<h1 id=\"2-自身显露出的缺点\"><a href=\"#2-自身显露出的缺点\" class=\"headerlink\" title=\"2. 自身显露出的缺点\"></a>2. 自身显露出的缺点</h1><ol>\n<li>没有从长远思考问题的习惯，无论是工作还是生活。缺乏<strong>深入思考</strong>的能力和习惯，只有焦虑是不足以成事的。</li>\n<li>生活中，对于负面的事，应对还是欠妥，导致自己自身状态不好。</li>\n<li>思考一件事更多的还是在如何做以及实现方式等较为表面的层次，没有深层次考虑它的背景，演进过程已经当前方案是否合理，能否从根源上解决问题。这些思考在平时比较欠缺，也因为工作时间紧张，没有抽出精力来思考。</li>\n<li>技术上还是欠缺，对应用的技术缺乏深度和研究的热情，只停留在应用的层面，而缺乏深入理解的动作，这个对后续发展不利。应用技术的优势和劣势缺乏系统的总结，这是深度上的缺失；应用技术选型的贫乏，这是广度上的缺失。</li>\n<li>身体缺乏锻炼，导致身体亚健康。</li>\n</ol>\n<h1 id=\"3-对未来的展望\"><a href=\"#3-对未来的展望\" class=\"headerlink\" title=\"3. 对未来的展望\"></a>3. 对未来的展望</h1><ol>\n<li>在生活中多思考，或者说多考虑一下未来的可能性和发展规划，避免抽象的，不清晰的发展路径，而是要规划尽量合理的，相对细致的，可完成的，有时间限制的未来发展路径。</li>\n<li>锻炼身体，保持健康的体魄。</li>\n<li>为人处世，多看多想，多关心家人，和朋友交好。</li>\n<li>技术多探究深度和广度，对技术有所坚持，<strong>厚积薄发</strong>，贵在坚持。</li>\n<li>工作不只追求完成工作，而是尝试慢慢建立自己在部门，在公司，在业界的口碑，经营好自己。</li>\n<li>培养自己的爱好，享受生活。</li>\n</ol>\n","link":"","permalink":"https://stevehuge.github.io/2020/11/08/Some-Words/","categories":[],"tags":[]},{"title":"FutureTask","date":"2020-08-21T12:17:00.000Z","path":"2020/08/21/FutureTask/","content":"<h1 id=\"1-Runnable-Callable-Future-FutureTask\"><a href=\"#1-Runnable-Callable-Future-FutureTask\" class=\"headerlink\" title=\"1. Runnable, Callable, Future, FutureTask\"></a>1. Runnable, Callable, Future, FutureTask</h1><h2 id=\"a-Runnable\"><a href=\"#a-Runnable\" class=\"headerlink\" title=\"a. Runnable\"></a>a. Runnable</h2><p>Runnable代表一个可以被线程执行的任务，其中只有一个<code>run()</code>方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 只有一个无参方法run()，当线程执行时，会调用这个run方法</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>Thread类继承了Runnable接口， 其中也有Runnable的引用，它的run方法就是执行引用的Runnable实例的run方法。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Thread</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> Runnable target;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">start</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (threadStatus != <span class=\"number\">0</span>)</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalThreadStateException();</span><br><span class=\"line\">            <span class=\"keyword\">boolean</span> started = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 底层调用JNI方法start0()向OS申请线程资源</span></span><br><span class=\"line\">                start0();</span><br><span class=\"line\">                started = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (!started) &#123;</span><br><span class=\"line\">                        group.threadStartFailed(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Throwable ignore) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">/* do nothing. If start0 threw a Throwable then</span></span><br><span class=\"line\"><span class=\"comment\">                      it will be passed up the call stack */</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title\">start0</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// target在构造方法中设置，线程在执行具体的业务逻辑时会调用run方法</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (target != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            target.run();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br><a id=\"more\"></a></p>\n<h2 id=\"b-Callable\"><a href=\"#b-Callable\" class=\"headerlink\" title=\"b. Callable\"></a>b. Callable</h2><p>Callable代表一个可以有返回值的被线程执行的任务，其中只有一个<code>call()</code>方法，和Runnable相比，它多了一个返回值<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Callable</span>&lt;<span class=\"title\">V</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Computes a result, or throws an exception if unable to do so.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> computed result</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Exception if unable to compute a result</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\">V <span class=\"title\">call</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"c-Future\"><a href=\"#c-Future\" class=\"headerlink\" title=\"c. Future\"></a>c. Future</h2><p>是一个接口，表示一个异步操作的结果。<code>FutureTask</code>是它的一个实现类，同时<code>FutureTask</code>继承了<code>Runnable</code>接口。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Future</span>&lt;<span class=\"title\">V</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Attempts to cancel execution of this task.  This attempt will</span></span><br><span class=\"line\"><span class=\"comment\">     * fail if the task has already completed, has already been cancelled,</span></span><br><span class=\"line\"><span class=\"comment\">     * or could not be cancelled for some other reason. If successful,</span></span><br><span class=\"line\"><span class=\"comment\">     * and this task has not started when &#123;<span class=\"doctag\">@code</span> cancel&#125; is called,</span></span><br><span class=\"line\"><span class=\"comment\">     * this task should never run.  If the task has already started,</span></span><br><span class=\"line\"><span class=\"comment\">     * then the &#123;<span class=\"doctag\">@code</span> mayInterruptIfRunning&#125; parameter determines</span></span><br><span class=\"line\"><span class=\"comment\">     * whether the thread executing this task should be interrupted in</span></span><br><span class=\"line\"><span class=\"comment\">     * an attempt to stop the task.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;After this method returns, subsequent calls to &#123;<span class=\"doctag\">@link</span> #isDone&#125; will</span></span><br><span class=\"line\"><span class=\"comment\">     * always return &#123;<span class=\"doctag\">@code</span> true&#125;.  Subsequent calls to &#123;<span class=\"doctag\">@link</span> #isCancelled&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     * will always return &#123;<span class=\"doctag\">@code</span> true&#125; if this method returned &#123;<span class=\"doctag\">@code</span> true&#125;.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> mayInterruptIfRunning &#123;<span class=\"doctag\">@code</span> true&#125; if the thread executing this</span></span><br><span class=\"line\"><span class=\"comment\">     * task should be interrupted; otherwise, in-progress tasks are allowed</span></span><br><span class=\"line\"><span class=\"comment\">     * to complete</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> &#123;<span class=\"doctag\">@code</span> false&#125; if the task could not be cancelled,</span></span><br><span class=\"line\"><span class=\"comment\">     * typically because it has already completed normally;</span></span><br><span class=\"line\"><span class=\"comment\">     * &#123;<span class=\"doctag\">@code</span> true&#125; otherwise</span></span><br><span class=\"line\"><span class=\"comment\">     * 取消当前异步操作，如果已经取消成功或者执行完毕，会返回false</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">cancel</span><span class=\"params\">(<span class=\"keyword\">boolean</span> mayInterruptIfRunning)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Returns &#123;<span class=\"doctag\">@code</span> true&#125; if this task was cancelled before it completed</span></span><br><span class=\"line\"><span class=\"comment\">     * normally.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> &#123;<span class=\"doctag\">@code</span> true&#125; if this task was cancelled before it completed</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">isCancelled</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Returns &#123;<span class=\"doctag\">@code</span> true&#125; if this task completed.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * Completion may be due to normal termination, an exception, or</span></span><br><span class=\"line\"><span class=\"comment\">     * cancellation -- in all of these cases, this method will return</span></span><br><span class=\"line\"><span class=\"comment\">     * &#123;<span class=\"doctag\">@code</span> true&#125;.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> &#123;<span class=\"doctag\">@code</span> true&#125; if this task completed</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">isDone</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Waits if necessary for the computation to complete, and then</span></span><br><span class=\"line\"><span class=\"comment\">     * retrieves its result.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> the computed result</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> CancellationException if the computation was cancelled</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> ExecutionException if the computation threw an</span></span><br><span class=\"line\"><span class=\"comment\">     * exception</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> InterruptedException if the current thread was interrupted</span></span><br><span class=\"line\"><span class=\"comment\">     * while waiting</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\">V <span class=\"title\">get</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException, ExecutionException</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Waits if necessary for at most the given time for the computation</span></span><br><span class=\"line\"><span class=\"comment\">     * to complete, and then retrieves its result, if available.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> timeout the maximum time to wait</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> unit the time unit of the timeout argument</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> the computed result</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> CancellationException if the computation was cancelled</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> ExecutionException if the computation threw an</span></span><br><span class=\"line\"><span class=\"comment\">     * exception</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> InterruptedException if the current thread was interrupted</span></span><br><span class=\"line\"><span class=\"comment\">     * while waiting</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> TimeoutException if the wait timed out</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\">V <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">long</span> timeout, TimeUnit unit)</span></span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"keyword\">throws</span> InterruptedException, ExecutionException, TimeoutException</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"d-FutureTask\"><a href=\"#d-FutureTask\" class=\"headerlink\" title=\"d. FutureTask\"></a>d. FutureTask</h2><p><code>FutureTask</code>是<code>Future</code>和<code>Runnable</code>的实现类，具体实现是接口<code>RunnableFuture</code>继承了<code>Runnable</code>接口和<code>Future</code>接口，再由<code>FutureTask</code>类实现<code>RunnableFuture</code>接口。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FutureTask</span>&lt;<span class=\"title\">V</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">RunnableFuture</span>&lt;<span class=\"title\">V</span>&gt; </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">RunnableFuture</span>&lt;<span class=\"title\">V</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">Runnable</span>, <span class=\"title\">Future</span>&lt;<span class=\"title\">V</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Sets this Future to the result of its computation</span></span><br><span class=\"line\"><span class=\"comment\">     * unless it has been cancelled.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-成员变量，静态变量，Unsafe相关和构造方法\"><a href=\"#2-成员变量，静态变量，Unsafe相关和构造方法\" class=\"headerlink\" title=\"2. 成员变量，静态变量，Unsafe相关和构造方法\"></a>2. 成员变量，静态变量，Unsafe相关和构造方法</h1><h2 id=\"a-成员变量，静态变量\"><a href=\"#a-成员变量，静态变量\" class=\"headerlink\" title=\"a. 成员变量，静态变量\"></a>a. 成员变量，静态变量</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * The run state of this task, initially NEW.  The run state</span></span><br><span class=\"line\"><span class=\"comment\"> * transitions to a terminal state only in methods set,</span></span><br><span class=\"line\"><span class=\"comment\"> * setException, and cancel.  During completion, state may take on</span></span><br><span class=\"line\"><span class=\"comment\"> * transient values of COMPLETING (while outcome is being set) or</span></span><br><span class=\"line\"><span class=\"comment\"> * INTERRUPTING (only while interrupting the runner to satisfy a</span></span><br><span class=\"line\"><span class=\"comment\"> * cancel(true)). Transitions from these intermediate to final</span></span><br><span class=\"line\"><span class=\"comment\"> * states use cheaper ordered/lazy writes because values are unique</span></span><br><span class=\"line\"><span class=\"comment\"> * and cannot be further modified.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Possible state transitions:</span></span><br><span class=\"line\"><span class=\"comment\"> * NEW -&gt; COMPLETING -&gt; NORMAL</span></span><br><span class=\"line\"><span class=\"comment\"> * NEW -&gt; COMPLETING -&gt; EXCEPTIONAL</span></span><br><span class=\"line\"><span class=\"comment\"> * NEW -&gt; CANCELLED</span></span><br><span class=\"line\"><span class=\"comment\"> * NEW -&gt; INTERRUPTING -&gt; INTERRUPTED</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">// 当前任务的状态</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">int</span> state;</span><br><span class=\"line\"><span class=\"comment\">// 任务尚未执行</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> NEW          = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"comment\">// 任务正在执行完毕，尚未执行完毕，一种临界状态</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> COMPLETING   = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"comment\">// 任务已经执行完毕</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> NORMAL       = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"comment\">// 当前任务执行过程中发生了异常，内部封装的callable.run()方法向上抛出了异常</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> EXCEPTIONAL  = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"comment\">// 当前任务被取消</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> CANCELLED    = <span class=\"number\">4</span>;</span><br><span class=\"line\"><span class=\"comment\">// 当前任务中断中</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> INTERRUPTING = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"comment\">// 当前任务已中断</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> INTERRUPTED  = <span class=\"number\">6</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** The underlying callable; nulled out after running */</span></span><br><span class=\"line\"><span class=\"comment\">// 调用线程池的submit(runnable/callable)后会赋值给它， runnable使用适配器模式转换为callable</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> Callable&lt;V&gt; callable;</span><br><span class=\"line\"><span class=\"comment\">/** The result to return or exception to throw from get() */</span></span><br><span class=\"line\"><span class=\"comment\">// 1. 正常情况：任务正常执行结束，outcome保存执行结果callable返回值</span></span><br><span class=\"line\"><span class=\"comment\">// 2. 异常情况下：callable向上抛出异常，outcome保存异常</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> Object outcome; <span class=\"comment\">// non-volatile, protected by state reads/writes</span></span><br><span class=\"line\"><span class=\"comment\">/** The thread running the callable; CASed during run() */</span></span><br><span class=\"line\"><span class=\"comment\">// 当前任务被执行期间，保存的执行任务的线程对象引用</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> Thread runner;</span><br><span class=\"line\"><span class=\"comment\">/** Treiber stack of waiting threads */</span></span><br><span class=\"line\"><span class=\"comment\">// 多个线程获取任务的结果时，会将每个线程放入一个stack类型的等待栈（头插头取）</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> WaitNode waiters;</span><br></pre></td></tr></table></figure>\n<p><code>WaitNode</code>是<code>FutureTask</code>的内部静态类<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WaitNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 线程引用</span></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> Thread thread;</span><br><span class=\"line\">    <span class=\"comment\">// 下一个节点</span></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> WaitNode next;</span><br><span class=\"line\">    WaitNode() &#123; thread = Thread.currentThread(); &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"b-Unsafe相关\"><a href=\"#b-Unsafe相关\" class=\"headerlink\" title=\"b. Unsafe相关\"></a>b. Unsafe相关</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Unsafe mechanics</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> sun.misc.Unsafe UNSAFE;</span><br><span class=\"line\"><span class=\"comment\">// state字段在类中的内存偏移值</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> stateOffset;</span><br><span class=\"line\"><span class=\"comment\">// runner字段在类中的内存偏移值</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> runnerOffset;</span><br><span class=\"line\"><span class=\"comment\">// waiters字段在类中的内存偏移值</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> waitersOffset;</span><br><span class=\"line\"><span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取Unsafe实例</span></span><br><span class=\"line\">        UNSAFE = sun.misc.Unsafe.getUnsafe();</span><br><span class=\"line\">        Class&lt;?&gt; k = FutureTask<span class=\"class\">.<span class=\"keyword\">class</span></span>;</span><br><span class=\"line\">        <span class=\"comment\">// 初始化成员变量在类中的偏移值</span></span><br><span class=\"line\">        stateOffset = UNSAFE.objectFieldOffset</span><br><span class=\"line\">            (k.getDeclaredField(<span class=\"string\">\"state\"</span>));</span><br><span class=\"line\">        runnerOffset = UNSAFE.objectFieldOffset</span><br><span class=\"line\">            (k.getDeclaredField(<span class=\"string\">\"runner\"</span>));</span><br><span class=\"line\">        waitersOffset = UNSAFE.objectFieldOffset</span><br><span class=\"line\">            (k.getDeclaredField(<span class=\"string\">\"waiters\"</span>));</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Error(e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"c-构造方法\"><a href=\"#c-构造方法\" class=\"headerlink\" title=\"c. 构造方法\"></a>c. 构造方法</h2><p><code>FutureTask</code>有2个构造方法，分别传入一个Callable类型的参数和一个Runnable类型的参数和一个返回值result。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Creates a &#123;<span class=\"doctag\">@code</span> FutureTask&#125; that will, upon running, execute the</span></span><br><span class=\"line\"><span class=\"comment\"> * given &#123;<span class=\"doctag\">@code</span> Callable&#125;.</span></span><br><span class=\"line\"><span class=\"comment\"> * 传入一个Callable对象，生成一个FutureTask对象</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  callable the callable task</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@throws</span> NullPointerException if the callable is null</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">FutureTask</span><span class=\"params\">(Callable&lt;V&gt; callable)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (callable == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NullPointerException();</span><br><span class=\"line\">    <span class=\"comment\">// 内部引用要执行的Callable对象</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.callable = callable;</span><br><span class=\"line\">    <span class=\"comment\">// 状态值设置为待执行状态</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = NEW;       <span class=\"comment\">// ensure visibility of callable</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Creates a &#123;<span class=\"doctag\">@code</span> FutureTask&#125; that will, upon running, execute the</span></span><br><span class=\"line\"><span class=\"comment\"> * given &#123;<span class=\"doctag\">@code</span> Runnable&#125;, and arrange that &#123;<span class=\"doctag\">@code</span> get&#125; will return the</span></span><br><span class=\"line\"><span class=\"comment\"> * given result on successful completion.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 传入一个Runnable对象和返回值，生成一个FutureTask对象</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> runnable the runnable task</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> result the result to return on successful completion. If</span></span><br><span class=\"line\"><span class=\"comment\"> * you don't need a particular result, consider using</span></span><br><span class=\"line\"><span class=\"comment\"> * constructions of the form:</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;<span class=\"doctag\">@code</span> Future&lt;?&gt; f = new FutureTask&lt;Void&gt;(runnable, null)&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@throws</span> NullPointerException if the runnable is null</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">FutureTask</span><span class=\"params\">(Runnable runnable, V result)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Executors.callable()方法将runnable类型和返回值转为一个callable对象，底层使用了适配器模式</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.callable = Executors.callable(runnable, result);</span><br><span class=\"line\">    <span class=\"comment\">// 状态值设置为待执行状态</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = NEW;       <span class=\"comment\">// ensure visibility of callable</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>其中调用了<code>Executors.callable()</code>方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">Callable&lt;T&gt; <span class=\"title\">callable</span><span class=\"params\">(Runnable task, T result)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (task == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NullPointerException();</span><br><span class=\"line\">    <span class=\"comment\">// 使用构造器模式，把Runnable对象转换为Callable对象</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> RunnableAdapter&lt;T&gt;(task, result);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RunnableAdapter</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Callable</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> Runnable task;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> T result;</span><br><span class=\"line\">    RunnableAdapter(Runnable task, T result) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.task = task;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.result = result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">call</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 转换后的Callable对象，底层还是调用传入Runnable的run方法，返回值为传入的result对象 </span></span><br><span class=\"line\">        task.run();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>这里附带说一下，<code>AbstractExecutorService</code>的<code>submit()</code>方法无论传入<code>Runnable</code>对象还是<code>Callable</code>对象也是类似的实现。底层都会将其封装成为一个<code>FutureTask</code>对象。返回的类型<code>RunnableFuture</code>实现了<code>Runnable</code>接口和<code>Future</code>接口，<code>FutureTask</code>实现了此接口。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractExecutorService</span> <span class=\"keyword\">implements</span> <span class=\"title\">ExecutorService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> &lt;T&gt; <span class=\"function\">RunnableFuture&lt;T&gt; <span class=\"title\">newTaskFor</span><span class=\"params\">(Runnable runnable, T value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 底层调用的是FutureTask的构造方法</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> FutureTask&lt;T&gt;(runnable, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> &lt;T&gt; <span class=\"function\">RunnableFuture&lt;T&gt; <span class=\"title\">newTaskFor</span><span class=\"params\">(Callable&lt;T&gt; callable)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 底层调用的是FutureTask的构造方法</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> FutureTask&lt;T&gt;(callable);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 传入的Runnable对象通过newTaskFor方法转为RunnableFuture对象，底层的callable引用返回值为null</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Future&lt;?&gt; submit(Runnable task) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (task == <span class=\"keyword\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NullPointerException();</span><br><span class=\"line\">        <span class=\"comment\">// 将Runnable包装成RunnableFuture对象，此时转化后的Callable的call方法返回值为null！！</span></span><br><span class=\"line\">        RunnableFuture&lt;Void&gt; ftask = newTaskFor(task, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        execute(ftask);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ftask;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 传入的Runnable对象和result结果通过newTaskFor方法转为RunnableFuture对象</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">Future&lt;T&gt; <span class=\"title\">submit</span><span class=\"params\">(Runnable task, T result)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (task == <span class=\"keyword\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NullPointerException();</span><br><span class=\"line\">        <span class=\"comment\">// 将Runnable对象和result结果包装成RunnableFuture对象</span></span><br><span class=\"line\">        RunnableFuture&lt;T&gt; ftask = newTaskFor(task, result);</span><br><span class=\"line\">        execute(ftask);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ftask;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 传入的Callable对象通过newTaskFor方法转为RunnableFuture对象</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">Future&lt;T&gt; <span class=\"title\">submit</span><span class=\"params\">(Callable&lt;T&gt; task)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (task == <span class=\"keyword\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NullPointerException();</span><br><span class=\"line\">        <span class=\"comment\">// 将Callable包装成RunnableFuture对象</span></span><br><span class=\"line\">        RunnableFuture&lt;T&gt; ftask = newTaskFor(task);</span><br><span class=\"line\">        execute(ftask);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ftask;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>A -&gt; B：适配器实现B接口，然后把A接口实现当做构造参数传入。</p>\n<h1 id=\"3-run-方法\"><a href=\"#3-run-方法\" class=\"headerlink\" title=\"3. run()方法\"></a>3. run()方法</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * executorService.submit(runnable/callable) -&gt; newTaskFor(runnable/callable) -&gt; execute(RunnableFuture) -&gt; pool</span></span><br><span class=\"line\"><span class=\"comment\"> * 这个方法是线程执行具体逻辑的入口</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 状态不为NEW：表示已经有其他的线程开始执行了，或者任务已经被cancel了，此时不会再执行，总之，只有状态为NEW才会被执行</span></span><br><span class=\"line\">    <span class=\"comment\">// 如果状态为NEW，通过CAS方式设置执行者为当前线程，设置成功开始执行，否则表示没有抢占任务成功，不执行</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (state != NEW ||</span><br><span class=\"line\">        !UNSAFE.compareAndSwapObject(<span class=\"keyword\">this</span>, runnerOffset,</span><br><span class=\"line\">                                     <span class=\"keyword\">null</span>, Thread.currentThread()))</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        Callable&lt;V&gt; c = callable;</span><br><span class=\"line\">        <span class=\"comment\">// c != null 防止NPE</span></span><br><span class=\"line\">        <span class=\"comment\">// state == NEW 防止外部线程cancel当前任务</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c != <span class=\"keyword\">null</span> &amp;&amp; state == NEW) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 任务执行结果</span></span><br><span class=\"line\">            V result;</span><br><span class=\"line\">            <span class=\"comment\">// 任务是否被执行完</span></span><br><span class=\"line\">            <span class=\"keyword\">boolean</span> ran;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                result = c.call();</span><br><span class=\"line\">                <span class=\"comment\">// c.call未抛出异常时，设置为true</span></span><br><span class=\"line\">                ran = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Throwable ex) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 执行任务过程中抛出异常</span></span><br><span class=\"line\">                result = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                ran = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                setException(ex);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ran)</span><br><span class=\"line\">                set(result);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// runner must be non-null until state is settled to</span></span><br><span class=\"line\">        <span class=\"comment\">// prevent concurrent calls to run()</span></span><br><span class=\"line\">        <span class=\"comment\">// 将执行线程置为null</span></span><br><span class=\"line\">        runner = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"comment\">// state must be re-read after nulling runner to prevent</span></span><br><span class=\"line\">        <span class=\"comment\">// leaked interrupts</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> s = state;</span><br><span class=\"line\">        <span class=\"comment\">// 执行线程中断中或者已中断</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s &gt;= INTERRUPTING)</span><br><span class=\"line\">            handlePossibleCancellationInterrupt(s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">set</span><span class=\"params\">(V v)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 执行完毕未抛出异常时，用CAS尝试将任务状态设置为COMPLETING状态</span></span><br><span class=\"line\">    <span class=\"comment\">// 有没有可能失败？有，call方法执行完毕后，CAS执行前，外部线程操作了cancel，概率很小</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (UNSAFE.compareAndSwapInt(<span class=\"keyword\">this</span>, stateOffset, NEW, COMPLETING)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 将方法执行结果赋值到outcome</span></span><br><span class=\"line\">        outcome = v;</span><br><span class=\"line\">        <span class=\"comment\">// 赋值完毕后，将任务状态改为NORMAL，此处没有使用CAS，而是正常的设值操作 </span></span><br><span class=\"line\">        UNSAFE.putOrderedInt(<span class=\"keyword\">this</span>, stateOffset, NORMAL); <span class=\"comment\">// final state</span></span><br><span class=\"line\">        <span class=\"comment\">// 此方法放在cancel方法中说明</span></span><br><span class=\"line\">        finishCompletion();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">setException</span><span class=\"params\">(Throwable t)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 通过CAS方式将state设置为COMPLETING</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (UNSAFE.compareAndSwapInt(<span class=\"keyword\">this</span>, stateOffset, NEW, COMPLETING)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// outcome 赋值为抛出的异常</span></span><br><span class=\"line\">        outcome = t;</span><br><span class=\"line\">        <span class=\"comment\">// 将state设置为EXCEPTIONAL</span></span><br><span class=\"line\">        UNSAFE.putOrderedInt(<span class=\"keyword\">this</span>, stateOffset, EXCEPTIONAL); <span class=\"comment\">// final state</span></span><br><span class=\"line\">        <span class=\"comment\">// 此方法放在cancel方法中说明</span></span><br><span class=\"line\">        finishCompletion();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Ensures that any interrupt from a possible cancel(true) is only</span></span><br><span class=\"line\"><span class=\"comment\"> * delivered to a task while in run or runAndReset.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">handlePossibleCancellationInterrupt</span><span class=\"params\">(<span class=\"keyword\">int</span> s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// It is possible for our interrupter to stall before getting a</span></span><br><span class=\"line\">    <span class=\"comment\">// chance to interrupt us.  Let's spin-wait patiently.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s == INTERRUPTING)</span><br><span class=\"line\">        <span class=\"comment\">// 如果状态是中断中，不断让出CPU，等待中断完成</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (state == INTERRUPTING)</span><br><span class=\"line\">            Thread.yield(); <span class=\"comment\">// wait out pending interrupt</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// assert state == INTERRUPTED;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// We want to clear any interrupt we may have received from</span></span><br><span class=\"line\">    <span class=\"comment\">// cancel(true).  However, it is permissible to use interrupts</span></span><br><span class=\"line\">    <span class=\"comment\">// as an independent mechanism for a task to communicate with</span></span><br><span class=\"line\">    <span class=\"comment\">// its caller, and there is no way to clear only the</span></span><br><span class=\"line\">    <span class=\"comment\">// cancellation interrupt.</span></span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">    <span class=\"comment\">// Thread.interrupted();</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"4-get-方法\"><a href=\"#4-get-方法\" class=\"headerlink\" title=\"4. get()方法\"></a>4. get()方法</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">get</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException, ExecutionException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> s = state;</span><br><span class=\"line\">    <span class=\"comment\">// state状态处于待执行或者执行中时，等待执行结束   </span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s &lt;= COMPLETING)</span><br><span class=\"line\">        s = awaitDone(<span class=\"keyword\">false</span>, <span class=\"number\">0L</span>); </span><br><span class=\"line\">    <span class=\"comment\">// 返回处理结果</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> report(s);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> V <span class=\"title\">report</span><span class=\"params\">(<span class=\"keyword\">int</span> s)</span> <span class=\"keyword\">throws</span> ExecutionException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// outcome有两种情况：正常结束，即是callable的返回值；异常结束，即是call方法抛出的异常</span></span><br><span class=\"line\">    Object x = outcome;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s == NORMAL)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (V)x;</span><br><span class=\"line\">    <span class=\"comment\">// 如果state为已取消或者中断中，已中断，抛出CancellationException异常</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s &gt;= CANCELLED)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> CancellationException();</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ExecutionException((Throwable)x);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"5-awaitDown-方法\"><a href=\"#5-awaitDown-方法\" class=\"headerlink\" title=\"5. awaitDown()方法\"></a>5. awaitDown()方法</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * Awaits completion or aborts on interrupt or timeout.</span></span><br><span class=\"line\"><span class=\"comment\">  *</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param</span> timed true if use timed waits</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param</span> nanos time to wait, if timed</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@return</span> state upon completion</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">awaitDone</span><span class=\"params\">(<span class=\"keyword\">boolean</span> timed, <span class=\"keyword\">long</span> nanos)</span></span></span><br><span class=\"line\"><span class=\"function\">     <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> deadline = timed ? System.nanoTime() + nanos : <span class=\"number\">0L</span>;</span><br><span class=\"line\">     WaitNode q = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">     <span class=\"keyword\">boolean</span> queued = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">     <span class=\"comment\">// 自旋</span></span><br><span class=\"line\">     <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">         <span class=\"comment\">// interrupted()方法被调用后，线程的interrupted字段置为false。</span></span><br><span class=\"line\">         <span class=\"comment\">// 如果线程被中断了，则移除节点，并抛出一个InterruptedException</span></span><br><span class=\"line\">         <span class=\"keyword\">if</span> (Thread.interrupted()) &#123;</span><br><span class=\"line\">             removeWaiter(q);</span><br><span class=\"line\">             <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InterruptedException();</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         </span><br><span class=\"line\">         <span class=\"keyword\">int</span> s = state;</span><br><span class=\"line\">         <span class=\"comment\">// 状态为已经完成或者已取消，或者中断状态，直接返回状态即可</span></span><br><span class=\"line\">         <span class=\"keyword\">if</span> (s &gt; COMPLETING) &#123;</span><br><span class=\"line\">             <span class=\"keyword\">if</span> (q != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                 <span class=\"comment\">// help the GC</span></span><br><span class=\"line\">                 q.thread = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">             <span class=\"comment\">// 直接返回当前状态</span></span><br><span class=\"line\">             <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"comment\">// 状态为即将完成，表示task即将执行完毕，此时让出CPU，等待再次调度</span></span><br><span class=\"line\">         <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (s == COMPLETING) <span class=\"comment\">// cannot time out yet</span></span><br><span class=\"line\">             Thread.yield();</span><br><span class=\"line\">         <span class=\"comment\">// 第一次自旋：新建WaitNode节点，继续自旋</span></span><br><span class=\"line\">         <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (q == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">             q = <span class=\"keyword\">new</span> WaitNode();</span><br><span class=\"line\">         <span class=\"comment\">// 第二次自旋：将新建的WaitNode使用CAS方式插入到WaitNode栈顶</span></span><br><span class=\"line\">         <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!queued)</span><br><span class=\"line\">             <span class=\"comment\">// 1. a -&gt; b -&gt; c -&gt; ...</span></span><br><span class=\"line\">             <span class=\"comment\">//    ^</span></span><br><span class=\"line\">             <span class=\"comment\">//    |</span></span><br><span class=\"line\">             <span class=\"comment\">// waiters</span></span><br><span class=\"line\">             <span class=\"comment\">// 2. q.next = waiters:</span></span><br><span class=\"line\">             <span class=\"comment\">//    q -&gt; a -&gt; b -&gt; c -&gt; ...</span></span><br><span class=\"line\">             <span class=\"comment\">//         ^</span></span><br><span class=\"line\">             <span class=\"comment\">//         |</span></span><br><span class=\"line\">             <span class=\"comment\">//      waiters  </span></span><br><span class=\"line\">             <span class=\"comment\">// 3. UNSAFE.compareAndSwapObject(this, waitersOffset,q.next = waiters, q)</span></span><br><span class=\"line\">             <span class=\"comment\">//    将waiters的偏移量处的值设置为q：相当于把q插入进入，并把waiters继续指向栈顶</span></span><br><span class=\"line\">             <span class=\"comment\">//    q -&gt; a -&gt; b -&gt; c -&gt; ...</span></span><br><span class=\"line\">             <span class=\"comment\">//    ^</span></span><br><span class=\"line\">             <span class=\"comment\">//    |</span></span><br><span class=\"line\">             <span class=\"comment\">// waiters  </span></span><br><span class=\"line\">             queued = UNSAFE.compareAndSwapObject(<span class=\"keyword\">this</span>, waitersOffset, q.next = waiters, q);</span><br><span class=\"line\">         <span class=\"comment\">// 如果调用get带超时时间的方法，判断等待是否超时</span></span><br><span class=\"line\">         <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (timed) &#123;</span><br><span class=\"line\">             nanos = deadline - System.nanoTime();</span><br><span class=\"line\">             <span class=\"keyword\">if</span> (nanos &lt;= <span class=\"number\">0L</span>) &#123;</span><br><span class=\"line\">                 <span class=\"comment\">// 超时了则移除当前节点</span></span><br><span class=\"line\">                 removeWaiter(q);</span><br><span class=\"line\">                 <span class=\"keyword\">return</span> state;</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">             LockSupport.parkNanos(<span class=\"keyword\">this</span>, nanos);</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"keyword\">else</span></span><br><span class=\"line\">             <span class=\"comment\">// 线程blocked等待唤醒</span></span><br><span class=\"line\">             LockSupport.park(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>附线程状态转换图：<img src=\"87A3F9ADA88A4779BE0D14DB8650EFB8.png\" alt=\"a\"><br>interrupt方法相关</p>\n<blockquote>\n<p>首先，一个线程不应该由其他线程来强制中断或停止，而是应该由线程自己自行停止。<br>所以，Thread.stop, Thread.suspend, Thread.resume 都已经被废弃了。<br>而 Thread.interrupt 的作用其实也不是中断线程，而是「通知线程应该中断了」，具体到底中断还是继续运行，应该由被通知的线程自己处理。    <br/> <br/><br>具体来说，当对一个线程，调用 interrupt() 时，<br>① 如果线程处于被阻塞状态（例如处于sleep, wait, join 等状态），那么线程将立即退出被阻塞状态，并抛出一个InterruptedException异常。仅此而已。<br>② 如果线程处于正常活动状态，那么会将该线程的中断标志设置为 true，仅此而已。被设置中断标志的线程将继续正常运行，不受影响。   <br/> <br/><br>interrupt() 并不能真正的中断线程，需要被调用的线程自己进行配合才行。也就是说，一个线程如果有被中断的需求，那么就可以这样做。<br>① 在正常运行任务时，经常检查本线程的中断标志位，如果被设置了中断标志就自行停止线程。<br>② 在调用阻塞方法时正确处理InterruptedException异常。（例如，catch异常后就结束线程。）<br><code><br>Thread thread = new Thread(() -&gt; {   <br/><br>while (!Thread.interrupted()) {   <br/><br>   // do more work.   <br/><br>}   <br/><br>});   <br/><br>thread.start();   <br/><br>// 一段时间以后   <br/><br>thread.interrupt();  <br/>\n</code><br/><br>具体到你的问题，Thread.interrupted()清除标志位是为了下次继续检测标志位。如果一个线程被设置中断标志后，选择结束线程那么自然不存在下次的问题，而如果一个线程被设置中断标识后，进行了一些处理后选择继续进行任务，而且这个任务也是需要被中断的，那么当然需要清除标志位了。</p>\n</blockquote>\n<p>removeWaiter()方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Tries to unlink a timed-out or interrupted wait node to avoid</span></span><br><span class=\"line\"><span class=\"comment\"> * accumulating garbage.  Internal nodes are simply unspliced</span></span><br><span class=\"line\"><span class=\"comment\"> * without CAS since it is harmless if they are traversed anyway</span></span><br><span class=\"line\"><span class=\"comment\"> * by releasers.  To avoid effects of unsplicing from already</span></span><br><span class=\"line\"><span class=\"comment\"> * removed nodes, the list is retraversed in case of an apparent</span></span><br><span class=\"line\"><span class=\"comment\"> * race.  This is slow when there are a lot of nodes, but we don't</span></span><br><span class=\"line\"><span class=\"comment\"> * expect lists to be long enough to outweigh higher-overhead</span></span><br><span class=\"line\"><span class=\"comment\"> * schemes.</span></span><br><span class=\"line\"><span class=\"comment\"> * 移除传入的WaitNode，两次调用</span></span><br><span class=\"line\"><span class=\"comment\"> * 1. 线程被中断</span></span><br><span class=\"line\"><span class=\"comment\"> * 2. get方法等待超时</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">removeWaiter</span><span class=\"params\">(WaitNode node)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// node 的thread已经置为null</span></span><br><span class=\"line\">        node.thread = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        retry:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (;;) &#123;          <span class=\"comment\">// restart on removeWaiter race</span></span><br><span class=\"line\">            <span class=\"comment\">// pred : 前一个节点</span></span><br><span class=\"line\">            <span class=\"comment\">// q : 当前正处理的节点</span></span><br><span class=\"line\">            <span class=\"comment\">// s : q的下一个节点</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (WaitNode pred = <span class=\"keyword\">null</span>, q = waiters, s; q != <span class=\"keyword\">null</span>; q = s) &#123;</span><br><span class=\"line\">                s = q.next;</span><br><span class=\"line\">                <span class=\"comment\">// q.thread != null表示q不是当前要移除的节点，将pred设置为q，开始第二次自旋</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (q.thread != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                    pred = q;</span><br><span class=\"line\">                <span class=\"comment\">// 第一个条件不满足，也就是q.thread==null，此时删掉q节点，把pred的next节点直接设置为s</span></span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (pred != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    pred.next = s;</span><br><span class=\"line\">                    <span class=\"comment\">// 如果pred.thread为null，重新retry自旋</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (pred.thread == <span class=\"keyword\">null</span>) <span class=\"comment\">// check for race</span></span><br><span class=\"line\">                        <span class=\"keyword\">continue</span> retry;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// 前两个条件均不满足，表示q.thread和pred都为null，所以把s设置为waiters头结点，重新retry自旋</span></span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!UNSAFE.compareAndSwapObject(<span class=\"keyword\">this</span>, waitersOffset,</span><br><span class=\"line\">                                                      q, s))</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span> retry;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"6-cancel-方法\"><a href=\"#6-cancel-方法\" class=\"headerlink\" title=\"6. cancel()方法\"></a>6. cancel()方法</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">cancel</span><span class=\"params\">(<span class=\"keyword\">boolean</span> mayInterruptIfRunning)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 括号内必须两个条件必须都为true，才能执行下去</span></span><br><span class=\"line\">    <span class=\"comment\">// state必须为NEW状态，且state通过CAS方式设置为INTERRUPTING或者CANCELLED</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!(state == NEW &amp;&amp;</span><br><span class=\"line\">          UNSAFE.compareAndSwapInt(<span class=\"keyword\">this</span>, stateOffset, NEW,</span><br><span class=\"line\">              mayInterruptIfRunning ? INTERRUPTING : CANCELLED)))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;    <span class=\"comment\">// in case call to interrupt throws exception</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mayInterruptIfRunning) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                Thread t = runner;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (t != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                    <span class=\"comment\">// 中断执行线程 </span></span><br><span class=\"line\">                    t.interrupt();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123; <span class=\"comment\">// final state</span></span><br><span class=\"line\">                <span class=\"comment\">//  如果执行中断，则将任务状态设置为INTERRUPTED</span></span><br><span class=\"line\">                UNSAFE.putOrderedInt(<span class=\"keyword\">this</span>, stateOffset, INTERRUPTED);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        finishCompletion();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>finishCompletion方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Removes and signals all waiting threads, invokes done(), and</span></span><br><span class=\"line\"><span class=\"comment\"> * nulls out callable.</span></span><br><span class=\"line\"><span class=\"comment\"> * 这个方法有三处调用，调用的时机都是任务已经到了终态，后续不会再执行了。</span></span><br><span class=\"line\"><span class=\"comment\"> * 作用是唤醒所有等待任务结束的线程，也就是清空WaitNode栈</span></span><br><span class=\"line\"><span class=\"comment\"> * 1. cancel方法</span></span><br><span class=\"line\"><span class=\"comment\"> * 2. set(V) 为run方法内部执行成功时调用</span></span><br><span class=\"line\"><span class=\"comment\"> * 3. setEception(Throwable) 为run方法内部执行抛异常时调用</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">finishCompletion</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// assert state &gt; COMPLETING;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (WaitNode q; (q = waiters) != <span class=\"keyword\">null</span>;) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 尝试把waiters设置为null</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (UNSAFE.compareAndSwapObject(<span class=\"keyword\">this</span>, waitersOffset, q, <span class=\"keyword\">null</span>)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 自旋</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">                Thread t = q.thread;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (t != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// help the GC</span></span><br><span class=\"line\">                    q.thread = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                    <span class=\"comment\">// 停止block，唤醒线程</span></span><br><span class=\"line\">                    LockSupport.unpark(t);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                WaitNode next = q.next;</span><br><span class=\"line\">                <span class=\"comment\">// 如果执行到了最后，则跳出自旋</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (next == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                q.next = <span class=\"keyword\">null</span>; <span class=\"comment\">// unlink to help gc</span></span><br><span class=\"line\">                q = next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// FutureTask中为空方法，留待扩展用</span></span><br><span class=\"line\">    done();</span><br><span class=\"line\">    </span><br><span class=\"line\">    callable = <span class=\"keyword\">null</span>;        <span class=\"comment\">// to reduce footprint</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h1><p>[1] <a href=\"https://blog.csdn.net/shi2huang/article/details/80289155\" target=\"_blank\" rel=\"noopener\">Java线程状态分析/线程状态转换图</a><br>[2] <a href=\"https://www.zhihu.com/question/41048032\" target=\"_blank\" rel=\"noopener\">Java里一个线程调用了Thread.interrupt()到底意味着什么？</a>     </p>\n","link":"","permalink":"https://stevehuge.github.io/2020/08/21/FutureTask/","categories":[],"tags":[{"name":"Java","slug":"Java","permalink":"https://stevehuge.github.io/tags/Java/"},{"name":"并发","slug":"并发","permalink":"https://stevehuge.github.io/tags/%E5%B9%B6%E5%8F%91/"},{"name":"JUC","slug":"JUC","permalink":"https://stevehuge.github.io/tags/JUC/"},{"name":"异步","slug":"异步","permalink":"https://stevehuge.github.io/tags/%E5%BC%82%E6%AD%A5/"}]},{"title":"LongAdder","date":"2020-08-13T13:02:36.000Z","path":"2020/08/13/LongAdder/","content":"<p>当原子类竞争很激烈时，使用CAS性能将变低，JDK提供了一个高性能的支持并发的计数器，LongAdder。</p>\n<a id=\"more\"></a>\n<h1 id=\"1-Striped64\"><a href=\"#1-Striped64\" class=\"headerlink\" title=\"1. Striped64\"></a>1. Striped64</h1><h1 id=\"2-LongAdder\"><a href=\"#2-LongAdder\" class=\"headerlink\" title=\"2. LongAdder\"></a>2. LongAdder</h1><h2 id=\"a-常量变量\"><a href=\"#a-常量变量\" class=\"headerlink\" title=\"a. 常量变量\"></a>a. 常量变量</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** Number of CPUS, to place bound on table size */</span></span><br><span class=\"line\"><span class=\"comment\">// 当前机器CPU的核数</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> NCPU = Runtime.getRuntime().availableProcessors();</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Table of cells. When non-null, size is a power of 2.</span></span><br><span class=\"line\"><span class=\"comment\"> * cell数组，当base发生竞争是，使用cells进行增加</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">transient</span> <span class=\"keyword\">volatile</span> Cell[] cells;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Base value, used mainly when there is no contention, but also as</span></span><br><span class=\"line\"><span class=\"comment\"> * a fallback during table initialization races. Updated via CAS.</span></span><br><span class=\"line\"><span class=\"comment\"> * 默认新增时使用的数字，相当于AtomicLong 的value</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">transient</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">long</span> base;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Spinlock (locked via CAS) used when resizing and/or creating Cells.</span></span><br><span class=\"line\"><span class=\"comment\"> * cell数组用的锁，默认为0，当cells数组初始化或者扩容时为1</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">transient</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">int</span> cellsBusy;</span><br></pre></td></tr></table></figure>\n<h2 id=\"b-add-方法\"><a href=\"#b-add-方法\" class=\"headerlink\" title=\"b. add()方法\"></a>b. <code>add()</code>方法</h2><p><img src=\"http://qgnh0gjol.hn-bkt.clouddn.com/LongAdder.png\" alt=\"\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">long</span> x)</span> </span>&#123;</span><br><span class=\"line\">         <span class=\"comment\">// as : cell数组</span></span><br><span class=\"line\">         <span class=\"comment\">// b : base的值</span></span><br><span class=\"line\">         <span class=\"comment\">// v : slot下Cell元素修改前的值</span></span><br><span class=\"line\">         <span class=\"comment\">// m : cells数组长度 - 1</span></span><br><span class=\"line\">         <span class=\"comment\">// a : slot下Cell元素</span></span><br><span class=\"line\">         Cell[] as; <span class=\"keyword\">long</span> b, v; <span class=\"keyword\">int</span> m; Cell a;</span><br><span class=\"line\">         <span class=\"comment\">// 条件一：(as = cells) != null</span></span><br><span class=\"line\">         <span class=\"comment\">//         true -&gt; cells数组不为空，进入代码块              </span></span><br><span class=\"line\">         <span class=\"comment\">//         false -&gt; cells数组为空，此时进入条件二</span></span><br><span class=\"line\">         <span class=\"comment\">// 条件二：!casBase(b = base, b + x)</span></span><br><span class=\"line\">         <span class=\"comment\">//         true -&gt; 更新base失败，进入代码块</span></span><br><span class=\"line\">         <span class=\"comment\">//         false -&gt; 更新base成功，完成更新</span></span><br><span class=\"line\"><span class=\"comment\">// 有两种情况进入代码块：</span></span><br><span class=\"line\"><span class=\"comment\">// 1. cells数组不为空；</span></span><br><span class=\"line\"><span class=\"comment\">// 2. cells数组为空，且CAS更新base失败</span></span><br><span class=\"line\">         <span class=\"keyword\">if</span> ((as = cells) != <span class=\"keyword\">null</span> || !casBase(b = base, b + x)) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// uncontended表示对于cells数组内元素是否有竞争，true表示无竞争，false表示有竞争</span></span><br><span class=\"line\">             <span class=\"keyword\">boolean</span> uncontended = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t<span class=\"comment\">// 条件一二：as == null || (m = as.length - 1) &lt; 0</span></span><br><span class=\"line\">\t<span class=\"comment\">//         true -&gt; cells数组为空，进入代码块，初始化数组</span></span><br><span class=\"line\">\t<span class=\"comment\">//         false -&gt; cells数组不为空，进行下一个条件判断</span></span><br><span class=\"line\">\t<span class=\"comment\">// 条件三：(a = as[getProbe() &amp; m]) == null </span></span><br><span class=\"line\">\t<span class=\"comment\">//         true -&gt; cells数组对应的slot为空，进行初始化</span></span><br><span class=\"line\">\t<span class=\"comment\">//         false -&gt; cells数组对应的slot不为空，进行下一个条件判断</span></span><br><span class=\"line\">\t<span class=\"comment\">// 条件四：!(uncontended = a.cas(v = a.value, v + x))</span></span><br><span class=\"line\">\t<span class=\"comment\">// \t\t   通过CAS的方式对对slot中的cell元素中value数值进行更新</span></span><br><span class=\"line\">\t<span class=\"comment\">//         true -&gt; 更新失败，表示有竞争，uncontended设置为false，进入代码块</span></span><br><span class=\"line\">\t<span class=\"comment\">//         true -&gt; 更新成功，表示没竞争，uncontended设置为true，结束</span></span><br><span class=\"line\">\t<span class=\"comment\">// 有三种情况调用longAccumulate方法</span></span><br><span class=\"line\">\t<span class=\"comment\">// 1. cells数组为空（前置条件是：针对base的CAS操作失败了）</span></span><br><span class=\"line\">\t<span class=\"comment\">// 2. 当前线程对应的slot的cell元素为null</span></span><br><span class=\"line\">\t<span class=\"comment\">// 3. slot中cell元素不为空，但是CAS更新失败</span></span><br><span class=\"line\">             <span class=\"keyword\">if</span> (as == <span class=\"keyword\">null</span> || (m = as.length - <span class=\"number\">1</span>) &lt; <span class=\"number\">0</span> ||</span><br><span class=\"line\">                 (a = as[getProbe() &amp; m]) == <span class=\"keyword\">null</span> ||</span><br><span class=\"line\">                 !(uncontended = a.cas(v = a.value, v + x)))</span><br><span class=\"line\">                 longAccumulate(x, <span class=\"keyword\">null</span>, uncontended);</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br></pre></td></tr></table></figure>\n<p>涉及到了几个方法</p>\n<ul>\n<li><code>casBase()</code>方法</li>\n<li><code>getProbe()</code>方法</li>\n<li><code>cell.cas()</code>方法</li>\n<li><code>longAccumulate()</code>方法</li>\n</ul>\n<p>a. <code>casBase()</code>方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">casBase</span><span class=\"params\">(<span class=\"keyword\">long</span> cmp, <span class=\"keyword\">long</span> val)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 使用CAS更新base的值</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> UNSAFE.compareAndSwapLong(<span class=\"keyword\">this</span>, BASE, cmp, val);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>b. <code>getProbe()</code>方法<br>获取当前线程的probe值<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">getProbe</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> UNSAFE.getInt(Thread.currentThread(), PROBE);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure><br>c. <code>cell.cas()</code>方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">cas</span><span class=\"params\">(<span class=\"keyword\">long</span> cmp, <span class=\"keyword\">long</span> val)</span> </span>&#123;</span><br><span class=\"line\">\t <span class=\"comment\">// valueOffset是Cell类的value变量在类中的地址偏移量\t</span></span><br><span class=\"line\">\t <span class=\"comment\">// 通过CAS的方式对cell元素中value数值进行更新</span></span><br><span class=\"line\">\t <span class=\"keyword\">return</span> UNSAFE.compareAndSwapLong(<span class=\"keyword\">this</span>, valueOffset, cmp, val);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"c-longAccumulate-方法\"><a href=\"#c-longAccumulate-方法\" class=\"headerlink\" title=\"c. longAccumulate()方法\"></a>c. <code>longAccumulate()</code>方法</h2><p><img src=\"http://qgnh0gjol.hn-bkt.clouddn.com/LongAdder_longAccumulate方法.png\" alt=\"\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 有三种情况调用longAccumulate方法</span></span><br><span class=\"line\"><span class=\"comment\"> * 1. cells数组为空（前置条件是：针对base的CAS操作失败了）</span></span><br><span class=\"line\"><span class=\"comment\"> * 2. 当前线程对应的slot的cell元素为null</span></span><br><span class=\"line\"><span class=\"comment\"> * 3. slot中cell元素不为空，但是CAS更新失败</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">longAccumulate</span><span class=\"params\">(<span class=\"keyword\">long</span> x, LongBinaryOperator fn,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                             <span class=\"keyword\">boolean</span> wasUncontended)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// h : 当前线程的probe值，计算slot下标用</span></span><br><span class=\"line\">       <span class=\"keyword\">int</span> h;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> ((h = getProbe()) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">           ThreadLocalRandom.current(); <span class=\"comment\">// force initialization</span></span><br><span class=\"line\">           h = getProbe();</span><br><span class=\"line\">\t\t<span class=\"comment\">// 如果线程probe还未初始化，则说明slot数组还未初始化，之前对于slot肯定无竞争</span></span><br><span class=\"line\">           wasUncontended = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">boolean</span> collide = <span class=\"keyword\">false</span>;                <span class=\"comment\">// True if last slot nonempty</span></span><br><span class=\"line\">       <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// as : cell数组 </span></span><br><span class=\"line\">\t\t<span class=\"comment\">// a : 要处理的cell</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// n : cells数组长度</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// v : CAS更新前的值</span></span><br><span class=\"line\">           Cell[] as; Cell a; <span class=\"keyword\">int</span> n; <span class=\"keyword\">long</span> v;</span><br><span class=\"line\">\t\t<span class=\"comment\">// CASE1 : 数组不为空时进入if代码块，有两种情况：slot下cell为空或者cell不为空且CAS更新cell失败了</span></span><br><span class=\"line\">           <span class=\"keyword\">if</span> ((as = cells) != <span class=\"keyword\">null</span> &amp;&amp; (n = as.length) &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// CASE1.1 当前slot为null</span></span><br><span class=\"line\">               <span class=\"keyword\">if</span> ((a = as[(n - <span class=\"number\">1</span>) &amp; h]) == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 当前没有线程拿到cells的写锁，返回false表示数组正在初始化</span></span><br><span class=\"line\">                   <span class=\"keyword\">if</span> (cellsBusy == <span class=\"number\">0</span>) &#123;       <span class=\"comment\">// Try to attach new Cell</span></span><br><span class=\"line\">                       Cell r = <span class=\"keyword\">new</span> Cell(x);   <span class=\"comment\">// Optimistically create</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// 尝试获取cells数组的写锁</span></span><br><span class=\"line\">                       <span class=\"keyword\">if</span> (cellsBusy == <span class=\"number\">0</span> &amp;&amp; casCellsBusy()) &#123;</span><br><span class=\"line\">                           <span class=\"keyword\">boolean</span> created = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                           <span class=\"keyword\">try</span> &#123;               <span class=\"comment\">// Recheck under lock</span></span><br><span class=\"line\">                               Cell[] rs; <span class=\"keyword\">int</span> m, j;</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"comment\">// 拿到锁之后，再次判断cells数组是否有更新，有更新表示其他线程对数据进行了操作，不再创建</span></span><br><span class=\"line\">                               <span class=\"keyword\">if</span> ((rs = cells) != <span class=\"keyword\">null</span> &amp;&amp;</span><br><span class=\"line\">                                   (m = rs.length) &gt; <span class=\"number\">0</span> &amp;&amp;</span><br><span class=\"line\">                                   rs[j = (m - <span class=\"number\">1</span>) &amp; h] == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t\t<span class=\"comment\">// 为slot赋值新的Cell元素</span></span><br><span class=\"line\">                                   rs[j] = r;</span><br><span class=\"line\">                                   created = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                               &#125;</span><br><span class=\"line\">                           &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"comment\">// 释放锁</span></span><br><span class=\"line\">                               cellsBusy = <span class=\"number\">0</span>;</span><br><span class=\"line\">                           &#125;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"comment\">// created == true表示插入新的Cell成功，直接退出自旋</span></span><br><span class=\"line\">                           <span class=\"keyword\">if</span> (created)</span><br><span class=\"line\">                               <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                           <span class=\"keyword\">continue</span>;           <span class=\"comment\">// Slot is now non-empty</span></span><br><span class=\"line\">                       &#125;</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">                   collide = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// CASE1.2 当前slot不为null，且之前有竞争，此时将wasUncontended设置为true，再自旋一次</span></span><br><span class=\"line\">               <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!wasUncontended)       <span class=\"comment\">// CAS already known to fail</span></span><br><span class=\"line\">                   wasUncontended = <span class=\"keyword\">true</span>;      <span class=\"comment\">// Continue after rehash</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 当前slot不为null，且之前无竞争，尝试通过CAS更新slot下Cell的value，更新成功则退出自旋</span></span><br><span class=\"line\">               <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (a.cas(v = a.value, ((fn == <span class=\"keyword\">null</span>) ? v + x :</span><br><span class=\"line\">                                            fn.applyAsLong(v, x))))</span><br><span class=\"line\">                   <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 如果cells数组的长度达到了CPU核心数，或者cells扩容了</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 设置collide为false并通过下面的语句修改线程的probe再重新尝试</span></span><br><span class=\"line\">               <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (n &gt;= NCPU || cells != as)</span><br><span class=\"line\">                   collide = <span class=\"keyword\">false</span>;            <span class=\"comment\">// At max size or stale</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// CAS更新slot下cell失败，且cell数组未扩容，数组长度未达到CPU核心数，再自旋一次</span></span><br><span class=\"line\">               <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!collide)</span><br><span class=\"line\">                   collide = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// slot下cell不为空且之前碰撞了一次，尝试拿cells数组的写锁</span></span><br><span class=\"line\">               <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cellsBusy == <span class=\"number\">0</span> &amp;&amp; casCellsBusy()) &#123;</span><br><span class=\"line\">                   <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                       <span class=\"comment\">// 拿到锁之后再次进行判断是否有其它线程修改数组</span></span><br><span class=\"line\">                       <span class=\"keyword\">if</span> (cells == as) &#123;      <span class=\"comment\">// Expand table unless stale</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"comment\">// 对cells数组进行扩容，扩容后的数组长度为原来的2倍</span></span><br><span class=\"line\">                           Cell[] rs = <span class=\"keyword\">new</span> Cell[n &lt;&lt; <span class=\"number\">1</span>];</span><br><span class=\"line\">                           <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)</span><br><span class=\"line\">                               rs[i] = as[i];</span><br><span class=\"line\">                           cells = rs;</span><br><span class=\"line\">                       &#125;</span><br><span class=\"line\">                   &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                       <span class=\"comment\">// 释放锁</span></span><br><span class=\"line\">                       cellsBusy = <span class=\"number\">0</span>;</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">                   collide = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                   <span class=\"comment\">// 进入下一次自旋，再次尝试写入cells数组</span></span><br><span class=\"line\">                   <span class=\"keyword\">continue</span>;                   <span class=\"comment\">// Retry with expanded table</span></span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               <span class=\"comment\">// 修改线程的probe再重新尝试</span></span><br><span class=\"line\">               <span class=\"comment\">// 有3种情况会进入这里：</span></span><br><span class=\"line\">               <span class=\"comment\">// 1. wasUncontended=false: 第一次进入longAccumulate且CAS更新slot下的cell元素失败</span></span><br><span class=\"line\">               <span class=\"comment\">// 2. 数组正在初始化</span></span><br><span class=\"line\">               <span class=\"comment\">// 3. n &gt;= NCPU || cells != as：数组长度达到CPU核心数或者数组扩容了</span></span><br><span class=\"line\">               <span class=\"comment\">// 4. collide = false ：CAS更新slot下cell失败，且cell数组未扩容，数组长度未达到CPU核心数，再自旋一次</span></span><br><span class=\"line\">               h = advanceProbe(h);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// CASE2: cells数组为null，cellsBusy为0表示cells数组未加锁，如果CAS获得cells数组的写锁则进行初始化操作</span></span><br><span class=\"line\">           <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cellsBusy == <span class=\"number\">0</span> &amp;&amp; cells == as &amp;&amp; casCellsBusy()) &#123;</span><br><span class=\"line\">               <span class=\"keyword\">boolean</span> init = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">               <span class=\"keyword\">try</span> &#123;                           <span class=\"comment\">// Initialize table</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 拿到锁之后再次进行判断，防止其他线程已经完成初始化</span></span><br><span class=\"line\">                   <span class=\"keyword\">if</span> (cells == as) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// 初始化一个长度为2的cells数组并且插入一个Cell元素</span></span><br><span class=\"line\">                       Cell[] rs = <span class=\"keyword\">new</span> Cell[<span class=\"number\">2</span>];</span><br><span class=\"line\">                       rs[h &amp; <span class=\"number\">1</span>] = <span class=\"keyword\">new</span> Cell(x);</span><br><span class=\"line\">                       cells = rs;</span><br><span class=\"line\">                       init = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">               &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 处理完后释放锁</span></span><br><span class=\"line\">                   cellsBusy = <span class=\"number\">0</span>;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               <span class=\"keyword\">if</span> (init)</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// init == true表示已经更新完毕，直接退出自旋</span></span><br><span class=\"line\">                   <span class=\"keyword\">break</span>;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// CASE3: 数组为空且未拿到cells的写锁，再次尝试CAS写base，写成功退出自旋，否则继续自旋</span></span><br><span class=\"line\">           <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (casBase(v = base, ((fn == <span class=\"keyword\">null</span>) ? v + x :</span><br><span class=\"line\">                                       fn.applyAsLong(v, x))))</span><br><span class=\"line\">               <span class=\"keyword\">break</span>;                          <span class=\"comment\">// Fall back on using base</span></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p><code>casCellsBusy()</code>方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">casCellsBusy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">// 尝试获取cells数组的写锁</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> UNSAFE.compareAndSwapInt(<span class=\"keyword\">this</span>, CELLSBUSY, <span class=\"number\">0</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>","link":"","permalink":"https://stevehuge.github.io/2020/08/13/LongAdder/","categories":[],"tags":[{"name":"Java","slug":"Java","permalink":"https://stevehuge.github.io/tags/Java/"},{"name":"并发","slug":"并发","permalink":"https://stevehuge.github.io/tags/%E5%B9%B6%E5%8F%91/"},{"name":"JUC","slug":"JUC","permalink":"https://stevehuge.github.io/tags/JUC/"},{"name":"Unsafe","slug":"Unsafe","permalink":"https://stevehuge.github.io/tags/Unsafe/"},{"name":"CAS","slug":"CAS","permalink":"https://stevehuge.github.io/tags/CAS/"}]},{"title":"原子类","date":"2020-08-10T13:02:36.000Z","path":"2020/08/10/原子类/","content":"<p><code>java.util.concurrent.atomic</code>包下，大致可分为4类。其中底层原理使用的都是由<code>Unsafe</code>类提供的CAS操作提供。</p>\n<a id=\"more\"></a>\n<h1 id=\"1-基本类型原子类\"><a href=\"#1-基本类型原子类\" class=\"headerlink\" title=\"1. 基本类型原子类\"></a>1. 基本类型原子类</h1><h2 id=\"a-AtomicBoolean\"><a href=\"#a-AtomicBoolean\" class=\"headerlink\" title=\"a. AtomicBoolean\"></a>a. AtomicBoolean</h2><h2 id=\"b-AtomicInteger\"><a href=\"#b-AtomicInteger\" class=\"headerlink\" title=\"b. AtomicInteger\"></a>b. AtomicInteger</h2><p>使用的主要参数<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// setup to use Unsafe.compareAndSwapInt for updates</span></span><br><span class=\"line\"><span class=\"comment\">// 使用Unsafe的compareAndSwapInt来进行原子自增操作</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Unsafe unsafe = Unsafe.getUnsafe();</span><br><span class=\"line\"><span class=\"comment\">// valueOffset表示在当前对象中，value变量的内存偏移量</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> valueOffset;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 静态方法块对valueOffset进行初始化赋值，这个值在赋值后不再变化</span></span><br><span class=\"line\">        valueOffset = unsafe.objectFieldOffset</span><br><span class=\"line\">            (AtomicInteger.class.getDeclaredField(\"value\"));</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception ex) &#123; <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Error(ex); &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// AtomicInteger的值</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">int</span> value;</span><br></pre></td></tr></table></figure><br>主要方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Atomically increments by one the current value.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> the updated value</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">incrementAndGet</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 使用Unsafe的getAndAddInt方法进行自增</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> unsafe.getAndAddInt(<span class=\"keyword\">this</span>, valueOffset, <span class=\"number\">1</span>) + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Atomically sets the value to the given updated value</span></span><br><span class=\"line\"><span class=\"comment\"> * if the current value &#123;<span class=\"doctag\">@code</span> ==&#125; the expected value.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> expect the expected value</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> update the new value</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"doctag\">@code</span> true&#125; if successful. False return indicates that</span></span><br><span class=\"line\"><span class=\"comment\"> * the actual value was not equal to the expected value.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">compareAndSet</span><span class=\"params\">(<span class=\"keyword\">int</span> expect, <span class=\"keyword\">int</span> update)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// // 使用Unsafe的compareAndSwapInt进行替换</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> unsafe.compareAndSwapInt(<span class=\"keyword\">this</span>, valueOffset, expect, update);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>Unsafe的getAndAddInt方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * var1 : 要处理的对象</span></span><br><span class=\"line\"><span class=\"comment\"> * var2 : 要处理的数据在var1中的偏置值</span></span><br><span class=\"line\"><span class=\"comment\"> * var4 : 要新增到旧值的值</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">getAndAddInt</span><span class=\"params\">(Object var1, <span class=\"keyword\">long</span> var2, <span class=\"keyword\">int</span> var4)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 修改之前的值</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> var5;</span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 通过var1和var2拿到主内存中要修改值的最新值</span></span><br><span class=\"line\">        var5 = <span class=\"keyword\">this</span>.getIntVolatile(var1, var2);</span><br><span class=\"line\">        <span class=\"comment\">// 如果通过CAS替换成功，则退出循环，否则一直自旋</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span>(!<span class=\"keyword\">this</span>.compareAndSwapInt(var1, var2, var5, var5 + var4));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> var5;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"c-AtomicLong\"><a href=\"#c-AtomicLong\" class=\"headerlink\" title=\"c. AtomicLong\"></a>c. AtomicLong</h2><h2 id=\"d-原子类的问题\"><a href=\"#d-原子类的问题\" class=\"headerlink\" title=\"d. 原子类的问题\"></a>d. 原子类的问题</h2><ul>\n<li>ABA问题</li>\n<li>只能修改单个元素</li>\n<li>并发量很高时，CAS只能成功一次，大量请求无法更新成功，只能不断自旋，十分消耗CPU自愿，性能很差</li>\n</ul>\n<p>针对第一个ABA问题，JUC中提供了2个带版本号的原子类<code>AtomicMarkableReference</code>和<code>AtomicStampedReference</code>，每次数据更新后都会更新数据的版本号，用来防止ABA问题发生；<br>针对只能修改单个元素的问题，JUC提供了<code>AtomicReference</code>类，它是一个泛型类，可以用来一次性更新多个数据；<br>针对并发量很高CAS性能变差的问题，JUC提供了<code>LongAdder</code>类用来提高性能。   </p>\n<h1 id=\"2-引用原子类型\"><a href=\"#2-引用原子类型\" class=\"headerlink\" title=\"2. 引用原子类型\"></a>2. 引用原子类型</h1><h2 id=\"b-AtomicReference\"><a href=\"#b-AtomicReference\" class=\"headerlink\" title=\"b. AtomicReference\"></a>b. AtomicReference</h2><p>相比基本类型的原子类，<code>AtomicReference</code>可以针对多个变量进行原子更新。<br>变量<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用Unsafe的compareAndSwapObject来进行原子自增操作</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Unsafe unsafe = Unsafe.getUnsafe();</span><br><span class=\"line\"><span class=\"comment\">// valueOffset表示在当前对象中，value变量的内存偏移量</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> valueOffset;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 静态方法块对valueOffset进行初始化赋值，这个值在赋值后不再变化</span></span><br><span class=\"line\">        valueOffset = unsafe.objectFieldOffset</span><br><span class=\"line\">            (AtomicReference.class.getDeclaredField(\"value\"));</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception ex) &#123; <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Error(ex); &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> V value;</span><br></pre></td></tr></table></figure><br>主要方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Atomically sets the value to the given updated value</span></span><br><span class=\"line\"><span class=\"comment\"> * if the current value &#123;<span class=\"doctag\">@code</span> ==&#125; the expected value.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> expect the expected value</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> update the new value</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"doctag\">@code</span> true&#125; if successful. False return indicates that</span></span><br><span class=\"line\"><span class=\"comment\"> * the actual value was not equal to the expected value.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">compareAndSet</span><span class=\"params\">(V expect, V update)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> unsafe.compareAndSwapObject(<span class=\"keyword\">this</span>, valueOffset, expect, update);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 底层是通过调用JNI实现原子更新</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">native</span> <span class=\"keyword\">boolean</span> <span class=\"title\">compareAndSwapObject</span><span class=\"params\">(Object var1, <span class=\"keyword\">long</span> var2, Object var4, Object var5)</span></span>;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"c-AtomicMarkableReference-amp-AtomicStampedReference\"><a href=\"#c-AtomicMarkableReference-amp-AtomicStampedReference\" class=\"headerlink\" title=\"c. AtomicMarkableReference &amp; AtomicStampedReference\"></a>c. AtomicMarkableReference &amp; AtomicStampedReference</h2><p>AtomicMarkableReference 和 AtomicStampedReference  的区别是前者判断是否被更新过使用时使用一个boolean变量mark,后者使用一个int类型的stamp字段判断</p>\n<h3 id=\"AtomicMarkableReference\"><a href=\"#AtomicMarkableReference\" class=\"headerlink\" title=\"AtomicMarkableReference\"></a>AtomicMarkableReference</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 静态内部类，</span></span><br><span class=\"line\"><span class=\"comment\"> * 一个成员变量 reference 持有真正的数据，mark字段标识是否数据被改变</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Pair</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> T reference;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> mark;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Pair</span><span class=\"params\">(T reference, <span class=\"keyword\">boolean</span> mark)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.reference = reference;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.mark = mark;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">Pair&lt;T&gt; <span class=\"title\">of</span><span class=\"params\">(T reference, <span class=\"keyword\">boolean</span> mark)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Pair&lt;T&gt;(reference, mark);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 后续数据都针对静态内部类型的pair字段处理</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> Pair&lt;V&gt; pair;</span><br></pre></td></tr></table></figure>\n<p>主要方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Atomically sets the value of both the reference and mark</span></span><br><span class=\"line\"><span class=\"comment\"> * to the given update values if the</span></span><br><span class=\"line\"><span class=\"comment\"> * current reference is &#123;<span class=\"doctag\">@code</span> ==&#125; to the expected reference</span></span><br><span class=\"line\"><span class=\"comment\"> * and the current mark is equal to the expected mark.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> expectedReference the expected value of the reference</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> newReference the new value for the reference</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> expectedMark the expected value of the mark</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> newMark the new value for the mark</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"doctag\">@code</span> true&#125; if successful</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">compareAndSet</span><span class=\"params\">(V       expectedReference,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                             V       newReference,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                             <span class=\"keyword\">boolean</span> expectedMark,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                             <span class=\"keyword\">boolean</span> newMark)</span> </span>&#123;</span><br><span class=\"line\">    Pair&lt;V&gt; current = pair;</span><br><span class=\"line\">    <span class=\"comment\">// 有3</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">        expectedReference == current.reference &amp;&amp;</span><br><span class=\"line\">        expectedMark == current.mark &amp;&amp;</span><br><span class=\"line\">        ((newReference == current.reference &amp;&amp;</span><br><span class=\"line\">          newMark == current.mark) ||</span><br><span class=\"line\">         casPair(current, Pair.of(newReference, newMark)));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"AtomicStampedReference\"><a href=\"#AtomicStampedReference\" class=\"headerlink\" title=\"AtomicStampedReference\"></a>AtomicStampedReference</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Pair</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> T reference;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> stamp;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Pair</span><span class=\"params\">(T reference, <span class=\"keyword\">int</span> stamp)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.reference = reference;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.stamp = stamp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">Pair&lt;T&gt; <span class=\"title\">of</span><span class=\"params\">(T reference, <span class=\"keyword\">int</span> stamp)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Pair&lt;T&gt;(reference, stamp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> Pair&lt;V&gt; pair;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Atomically sets the value of both the reference and stamp</span></span><br><span class=\"line\"><span class=\"comment\"> * to the given update values if the</span></span><br><span class=\"line\"><span class=\"comment\"> * current reference is &#123;<span class=\"doctag\">@code</span> ==&#125; to the expected reference</span></span><br><span class=\"line\"><span class=\"comment\"> * and the current stamp is equal to the expected stamp.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> expectedReference the expected value of the reference</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> newReference the new value for the reference</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> expectedStamp the expected value of the stamp</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> newStamp the new value for the stamp</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"doctag\">@code</span> true&#125; if successful</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">compareAndSet</span><span class=\"params\">(V   expectedReference,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                             V   newReference,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                             <span class=\"keyword\">int</span> expectedStamp,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                             <span class=\"keyword\">int</span> newStamp)</span> </span>&#123;</span><br><span class=\"line\">    Pair&lt;V&gt; current = pair;</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">        expectedReference == current.reference &amp;&amp;</span><br><span class=\"line\">        expectedStamp == current.stamp &amp;&amp;</span><br><span class=\"line\">        ((newReference == current.reference &amp;&amp;</span><br><span class=\"line\">          newStamp == current.stamp) ||</span><br><span class=\"line\">         casPair(current, Pair.of(newReference, newStamp)));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"3-数组原子类\"><a href=\"#3-数组原子类\" class=\"headerlink\" title=\"3. 数组原子类\"></a>3. 数组原子类</h1><h3 id=\"a-AtomicIntegerArray\"><a href=\"#a-AtomicIntegerArray\" class=\"headerlink\" title=\"a. AtomicIntegerArray\"></a>a. AtomicIntegerArray</h3><p>原子更新int数组中的元素。<br>常量，变量和static代码块<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * unsafe持有对象</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Unsafe unsafe = Unsafe.getUnsafe();</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 返回数组中第一个元素的偏移地址</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> base = unsafe.arrayBaseOffset(<span class=\"keyword\">int</span>[]<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> shift;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span>[] array;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 返回数组中一个元素占用的大小</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> scale = unsafe.arrayIndexScale(<span class=\"keyword\">int</span>[]<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 如果不是2的幂次方，抛异常</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((scale &amp; (scale - <span class=\"number\">1</span>)) != <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Error(<span class=\"string\">\"data type scale not a power of two\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">//  </span></span><br><span class=\"line\">    shift = <span class=\"number\">31</span> - Integer.numberOfLeadingZeros(scale);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>有两个构造方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 创建一个长度为length的原子int数组类对象</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AtomicIntegerArray</span><span class=\"params\">(<span class=\"keyword\">int</span> length)</span> </span>&#123;</span><br><span class=\"line\">    array = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[length];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 传入一个int数组，创建一个长度和其相等的原子int数组类对象</span></span><br><span class=\"line\"><span class=\"comment\"> * 所有元素都会复制到新的原子int数组类对象内</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AtomicIntegerArray</span><span class=\"params\">(<span class=\"keyword\">int</span>[] array)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Visibility guaranteed by final field guarantees</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.array = array.clone();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>常用方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Returns the length of the array.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> the length of the array</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">length</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> array.length;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Gets the current value at position &#123;<span class=\"doctag\">@code</span> i&#125;.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> i the index</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> the current value</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> getRaw(checkedByteOffset(i));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">getRaw</span><span class=\"params\">(<span class=\"keyword\">long</span> offset)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> unsafe.getIntVolatile(array, offset);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>getRaw()方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">long</span> <span class=\"title\">checkedByteOffset</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &lt; <span class=\"number\">0</span> || i &gt;= array.length)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IndexOutOfBoundsException(<span class=\"string\">\"index \"</span> + i);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> byteOffset(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> <span class=\"title\">byteOffset</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ((<span class=\"keyword\">long</span>) i &lt;&lt; shift) + base;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">getRaw</span><span class=\"params\">(<span class=\"keyword\">long</span> offset)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> unsafe.getIntVolatile(array, offset);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>b. AtomicLongArray</p>\n<p>原子更新long数组中的元素。</p>\n<p>（3）AtomicReferenceArray</p>\n<h1 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h1><p>[1] <a href=\"https://mp.weixin.qq.com/s?__biz=Mzg2ODA0ODM0Nw==&amp;mid=2247484111&amp;idx=3&amp;sn=ce706024941b8502c6f809393de96063&amp;chksm=ceb30e7bf9c4876d185fe3e09d4360cbd65cd227ccc8a5180d8577ecbf8484b257d4f4c26f32&amp;scene=158#rd\" target=\"_blank\" rel=\"noopener\">死磕 java原子系列之终结篇\n</a><br>[2] <a href=\"https://tech.meituan.com/2019/02/14/talk-about-java-magic-class-unsafe.html\" target=\"_blank\" rel=\"noopener\">Java魔法类：Unsafe应用解析</a></p>\n","link":"","permalink":"https://stevehuge.github.io/2020/08/10/%E5%8E%9F%E5%AD%90%E7%B1%BB/","categories":[],"tags":[{"name":"Java","slug":"Java","permalink":"https://stevehuge.github.io/tags/Java/"},{"name":"并发","slug":"并发","permalink":"https://stevehuge.github.io/tags/%E5%B9%B6%E5%8F%91/"},{"name":"JUC","slug":"JUC","permalink":"https://stevehuge.github.io/tags/JUC/"},{"name":"Unsafe","slug":"Unsafe","permalink":"https://stevehuge.github.io/tags/Unsafe/"},{"name":"CAS","slug":"CAS","permalink":"https://stevehuge.github.io/tags/CAS/"},{"name":"原子类","slug":"原子类","permalink":"https://stevehuge.github.io/tags/%E5%8E%9F%E5%AD%90%E7%B1%BB/"}]},{"title":"Unsafe类","date":"2020-08-03T13:02:36.000Z","path":"2020/08/03/Unsafe/","content":"<p>Unsafe是一个<code>sun.misc</code>包下的类。Unsafe为我们提供了访问底层的机制，这种机制仅供java核心类库使用，而不应该被普通用户使用。但是，为了更好地了解java的生态体系，我们应该去学习它，去了解它，不求深入到底层的C/C++代码，但求能了解它的基本功能。</p>\n<a id=\"more\"></a>\n<h1 id=\"1-获取Unsafe对象\"><a href=\"#1-获取Unsafe对象\" class=\"headerlink\" title=\"1. 获取Unsafe对象\"></a>1. 获取Unsafe对象</h1><p>由于JVM默认不允许外部使用Unsafe<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Unsafe theUnsafe;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@CallerSensitive</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Unsafe <span class=\"title\">getUnsafe</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Class var0 = Reflection.getCallerClass();</span><br><span class=\"line\">    <span class=\"comment\">// 判断当前类加载器不为系统加载器，抛出一个安全异常</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!VM.isSystemDomainLoader(var0.getClassLoader())) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> SecurityException(<span class=\"string\">\"Unsafe\"</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> theUnsafe;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>需要使用反射获取Unsafe内部持有的Unsafe对象<code>theUnsafe</code><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Unsafe UNSAFE;</span><br><span class=\"line\"><span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        Field theUnsafe = Unsafe.class.getDeclaredField(\"theUnsafe\");</span><br><span class=\"line\">        theUnsafe.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        UNSAFE = (Unsafe) theUnsafe.get(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">        CLogger.writeError(<span class=\"string\">\"title\"</span>, e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"2-Unsafe功能\"><a href=\"#2-Unsafe功能\" class=\"headerlink\" title=\"2. Unsafe功能\"></a>2. Unsafe功能</h1><h2 id=\"a-实例化类\"><a href=\"#a-实例化类\" class=\"headerlink\" title=\"a. 实例化类\"></a>a. 实例化类</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 传入一个Class对象，生成一个Class对象对应类型的对象实例，底层不会调用类的构造方法</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">native</span> Object <span class=\"title\">allocateInstance</span><span class=\"params\">(Class&lt;?&gt; var1)</span> <span class=\"keyword\">throws</span> InstantiationException</span>;</span><br></pre></td></tr></table></figure>\n<p>示例：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UnsafeAllocateInstanceTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">User</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            age = <span class=\"number\">10</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        User u1 = <span class=\"keyword\">new</span> User();</span><br><span class=\"line\">        System.out.println(u1.age); <span class=\"comment\">// 打印结果为10</span></span><br><span class=\"line\">        User u2 = (User) UNSAFE.allocateInstance(User<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">        System.out.println(u2.age); <span class=\"comment\">// 打印结果为0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"b-获取内存偏移地址\"><a href=\"#b-获取内存偏移地址\" class=\"headerlink\" title=\"b. 获取内存偏移地址\"></a>b. 获取内存偏移地址</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\"> * 返回给定的静态属性在它的类的存储分配中的位置(偏移地址)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">native</span> <span class=\"keyword\">long</span> <span class=\"title\">staticFieldOffset</span><span class=\"params\">(Field var1)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\"> * 返回给定的非静态属性在它的类的存储分配中的位置(偏移地址)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">native</span> <span class=\"keyword\">long</span> <span class=\"title\">objectFieldOffset</span><span class=\"params\">(Field var1)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\"> * 返回给定的静态属性的位置，配合staticFieldOffset方法使用</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">native</span> Object <span class=\"title\">staticFieldBase</span><span class=\"params\">(Field var1)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\"> * 返回数组类型的第一个元素的偏移地址(基础偏移地址)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">native</span> <span class=\"keyword\">int</span> <span class=\"title\">arrayBaseOffset</span><span class=\"params\">(Class&lt;?&gt; var1)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\"> * 返回数组中元素与元素之间的偏移地址的增量 </span></span><br><span class=\"line\"><span class=\"comment\"> * 与arrayBaseOffset方法配合使用就可以定位到任何一个元素的地址</span></span><br><span class=\"line\"><span class=\"comment\"> * 在CHM(ConcurrentHashMap中就有用到)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">native</span> <span class=\"keyword\">int</span> <span class=\"title\">arrayIndexScale</span><span class=\"params\">(Class&lt;?&gt; var1)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\"> * 获取本地指针的大小(单位是byte)，通常值为4或者8。常量ADDRESS_SIZE就是调用此方法</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">native</span> <span class=\"keyword\">int</span> <span class=\"title\">addressSize</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\"> * 获取本地内存的页数，此值为2的幂次方 </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">native</span> <span class=\"keyword\">int</span> <span class=\"title\">pageSize</span><span class=\"params\">()</span></span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"c-抛出checked异常，而且不在方法签名中定义异常\"><a href=\"#c-抛出checked异常，而且不在方法签名中定义异常\" class=\"headerlink\" title=\"c. 抛出checked异常，而且不在方法签名中定义异常\"></a>c. 抛出checked异常，而且不在方法签名中定义异常</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 抛出一个checked异常</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title\">throwException</span><span class=\"params\">(Throwable var1)</span></span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"d-使用堆外内存\"><a href=\"#d-使用堆外内存\" class=\"headerlink\" title=\"d. 使用堆外内存\"></a>d. 使用堆外内存</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\"> * 分配一块新的本地内存，通过bytes指定内存块的大小(单位是byte)，返回新开辟的内存的地址 </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">native</span> <span class=\"keyword\">long</span> <span class=\"title\">allocateMemory</span><span class=\"params\">(<span class=\"keyword\">long</span> var1)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\"> * 通过指定的内存地址address重新调整本地内存块的大小，调整后的内存块大小通过bytes指定(单位为byte) </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">native</span> <span class=\"keyword\">long</span> <span class=\"title\">reallocateMemory</span><span class=\"params\">(<span class=\"keyword\">long</span> var1, <span class=\"keyword\">long</span> var3)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\"> * 将给定内存块中的所有字节设置为固定值(通常是0) </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title\">setMemory</span><span class=\"params\">(Object var1, <span class=\"keyword\">long</span> var2, <span class=\"keyword\">long</span> var4, <span class=\"keyword\">byte</span> var6)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\"> * 释放给定地址的内存</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title\">freeMemory</span><span class=\"params\">(<span class=\"keyword\">long</span> var1)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>测试方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OffHeapArray</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 一个int等于4个字节</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> INT = <span class=\"number\">4</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Unsafe unsafe;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Field f = Unsafe.class.getDeclaredField(\"theUnsafe\");</span><br><span class=\"line\">            f.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">            unsafe = (Unsafe) f.get(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (NoSuchFieldException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IllegalAccessException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;     </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">long</span> size;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">long</span> address;</span><br><span class=\"line\">    <span class=\"comment\">// 构造方法，分配内存</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">OffHeapArray</span><span class=\"params\">(<span class=\"keyword\">long</span> size)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.size = size;   <span class=\"comment\">// 参数字节数</span></span><br><span class=\"line\">        address = unsafe.allocateMemory(size * INT);</span><br><span class=\"line\">    &#125;     </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 获取指定索引处的元素</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">long</span> i)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> unsafe.getInt(address + i * INT);</span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 设置指定索引处的元素</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">set</span><span class=\"params\">(<span class=\"keyword\">long</span> i, <span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">        unsafe.putInt(address + i * INT, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 元素个数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">size</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> size;</span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 释放堆外内存</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">freeMemory</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        unsafe.freeMemory(address);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"e-CAS方法\"><a href=\"#e-CAS方法\" class=\"headerlink\" title=\"e. CAS方法\"></a>e. CAS方法</h2><p>CAS （compare and swap）比较并替换，这是一个原子操作，底层实现使用了汇编中<code>cmpxchange</code>指令，传入4个参数：要修改的对象，要修改数据在对象类的相对偏移地址，预期值，想要设置的值。<br>预期值的作用是使用当前内存中最新值和传入的预期值进行比较，如果相同，则要修改的数据没有发生修改（此处可能会有ABA问题，JUC中提供了两个类处理此类问题，后面详述），直接用想要设置的值进行替换。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\"> * 使用CAS方式替换一个对象变量</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">native</span> <span class=\"keyword\">boolean</span> <span class=\"title\">compareAndSwapObject</span><span class=\"params\">(Object var1, <span class=\"keyword\">long</span> var2, Object var4, Object var5)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\"> * 使用CAS方式替换一个int类型变量</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">native</span> <span class=\"keyword\">boolean</span> <span class=\"title\">compareAndSwapInt</span><span class=\"params\">(Object var1, <span class=\"keyword\">long</span> var2, <span class=\"keyword\">int</span> var4, <span class=\"keyword\">int</span> var5)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\"> * 使用CAS方式替换一个long类型变量</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">native</span> <span class=\"keyword\">boolean</span> <span class=\"title\">compareAndSwapLong</span><span class=\"params\">(Object var1, <span class=\"keyword\">long</span> var2, <span class=\"keyword\">long</span> var4, <span class=\"keyword\">long</span> var6)</span></span>;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"f-park-unpark\"><a href=\"#f-park-unpark\" class=\"headerlink\" title=\"f. park / unpark\"></a>f. park / unpark</h2><p>JVM在上下文切换的时候使用了Unsafe中的方法park()和unpark()。在LockSupport.park()/unpark()方法中，它们底层都是调用的Unsafe的这两个方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 当一个线程正在等待某个操作时，JVM调用Unsafe的park()方法来阻塞此线程。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title\">park</span><span class=\"params\">(<span class=\"keyword\">boolean</span> var1, <span class=\"keyword\">long</span> var2)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 当阻塞中的线程需要再次运行时，JVM调用Unsafe的unpark()方法来唤醒此线程。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title\">unpark</span><span class=\"params\">(Object var1)</span></span>;</span><br></pre></td></tr></table></figure>\n<h1 id=\"5-使用Unsafe的CAS功能\"><a href=\"#5-使用Unsafe的CAS功能\" class=\"headerlink\" title=\"5. 使用Unsafe的CAS功能\"></a>5. 使用Unsafe的CAS功能</h1><p>使用Unsafe的CAS功能实现一个原子类AtomicInteger<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyAtomicInteger</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Unsafe UNSAFE;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> amount = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> MyAtomicInteger amountMAI = <span class=\"keyword\">new</span> MyAtomicInteger();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Field theUnsafe = Unsafe.class.getDeclaredField(\"theUnsafe\");</span><br><span class=\"line\">            theUnsafe.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">            UNSAFE = (Unsafe) theUnsafe.get(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            CLogger.writeError(<span class=\"string\">\"title\"</span>, e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">int</span> val;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// right way</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</span><br><span class=\"line\">            Thread title = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i1 = <span class=\"number\">0</span>; i1 &lt; <span class=\"number\">1000</span>; i1++) &#123;</span><br><span class=\"line\">                            amountMAI.incrAndGet();</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (NoSuchFieldException e) &#123;</span><br><span class=\"line\">                        CLogger.writeError(<span class=\"string\">\"title\"</span>, e);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            title.start();</span><br><span class=\"line\">            <span class=\"comment\">// 等待线程执行结束</span></span><br><span class=\"line\">            title.join();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 10000000</span></span><br><span class=\"line\">        System.out.println(amountMAI.getCount());</span><br><span class=\"line\">        <span class=\"comment\">// wrong way</span></span><br><span class=\"line\"><span class=\"comment\">//        for (int i = 0; i &lt; 10000; i++) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//            new Thread(new Runnable() &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//                @Override</span></span><br><span class=\"line\"><span class=\"comment\">//                public void run() &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//                    for (int i1 = 0; i1 &lt; 1000; i1++) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//                        amount++;</span></span><br><span class=\"line\"><span class=\"comment\">//                    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//                &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//            &#125;).start();</span></span><br><span class=\"line\"><span class=\"comment\">//        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//        // 281, 790</span></span><br><span class=\"line\"><span class=\"comment\">//        System.out.println(amount);</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">incrAndGet</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> NoSuchFieldException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 使用Unsafe提供的compareAndSwapInt方法，如果设值失败则一直循环，直到设值成功</span></span><br><span class=\"line\">        while (!UNSAFE.compareAndSwapInt(this, UNSAFE.objectFieldOffset(MyAtomicInteger.class.getDeclaredField(\"val\")), this.val, val + 1))</span><br><span class=\"line\">            ;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getCount</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h1><p>[1] <a href=\"https://mp.weixin.qq.com/s?__biz=Mzg2ODA0ODM0Nw==&amp;mid=2247483866&amp;idx=1&amp;sn=941ef04260f8afea009761f108726211\" target=\"_blank\" rel=\"noopener\">死磕 java魔法类之Unsafe解析</a><br>[2] <a href=\"https://blog.csdn.net/luo_mu_hpu/article/details/106623595\" target=\"_blank\" rel=\"noopener\">Java多线程深入学习-Unsafe类的介绍</a></p>\n","link":"","permalink":"https://stevehuge.github.io/2020/08/03/Unsafe/","categories":[],"tags":[{"name":"Java","slug":"Java","permalink":"https://stevehuge.github.io/tags/Java/"},{"name":"并发","slug":"并发","permalink":"https://stevehuge.github.io/tags/%E5%B9%B6%E5%8F%91/"},{"name":"JUC","slug":"JUC","permalink":"https://stevehuge.github.io/tags/JUC/"},{"name":"Unsafe","slug":"Unsafe","permalink":"https://stevehuge.github.io/tags/Unsafe/"}]},{"title":"HashMap","date":"2020-07-31T12:17:00.000Z","path":"2020/07/31/HashMap/","content":"<h1 id=\"1-基础\"><a href=\"#1-基础\" class=\"headerlink\" title=\"1. 基础\"></a>1. 基础</h1><p>常见的数据存储结构有：数组和链表，其中存储的数据都为有序。</p>\n<ul>\n<li>数组</li>\n</ul>\n<p>优势：可以直接通过二分查找来找数据，时间复杂度$O(N)$，<strong>访问快</strong></p>\n<p>劣势：大小固定，需要添加元素且保持有序时，可能需要移动很多原来的元素，时间复杂度高为$O(N)$， <strong>插入慢</strong></p>\n<ul>\n<li>链表</li>\n</ul>\n<p>优势：插入时时间复杂度为$O(N)$，但是不需要移动数据， <strong>插入相对快</strong></p>\n<p>劣势：查询某个元素时平均时间复杂度为 $O(N )$，<strong>访问慢</strong></p>\n<ul>\n<li>散列表HashMap</li>\n</ul>\n<p>集合了数据和链表的优势</p>\n<p>查询时间复杂度：$O(1)$</p>\n<p>插入时间复杂度：$O(1)$</p>\n<a id=\"more\"></a>\n<h1 id=\"2-常量，变量和构造方法\"><a href=\"#2-常量，变量和构造方法\" class=\"headerlink\" title=\"2. 常量，变量和构造方法\"></a>2. 常量，变量和构造方法</h1><h2 id=\"a-常量\"><a href=\"#a-常量\" class=\"headerlink\" title=\"a. 常量\"></a>a. 常量</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * The default initial capacity - MUST be a power of two.</span></span><br><span class=\"line\"><span class=\"comment\">   * 默认table大小，为16</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> DEFAULT_INITIAL_CAPACITY = <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">4</span>; <span class=\"comment\">// aka 16</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * The maximum capacity, used if a higher value is implicitly specified</span></span><br><span class=\"line\"><span class=\"comment\">   * by either of the constructors with arguments.</span></span><br><span class=\"line\"><span class=\"comment\">   * MUST be a power of two &lt;= 1&lt;&lt;30.</span></span><br><span class=\"line\"><span class=\"comment\">   * table最大长度，为1,073,741,824</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> MAXIMUM_CAPACITY = <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">30</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * The load factor used when none specified in constructor.</span></span><br><span class=\"line\"><span class=\"comment\">   * 默认的负载因子</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> DEFAULT_LOAD_FACTOR = <span class=\"number\">0.75f</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * The bin count threshold for using a tree rather than list for a</span></span><br><span class=\"line\"><span class=\"comment\">   * bin.  Bins are converted to trees when adding an element to a</span></span><br><span class=\"line\"><span class=\"comment\">   * bin with at least this many nodes. The value must be greater</span></span><br><span class=\"line\"><span class=\"comment\">   * than 2 and should be at least 8 to mesh with assumptions in</span></span><br><span class=\"line\"><span class=\"comment\">   * tree removal about conversion back to plain bins upon</span></span><br><span class=\"line\"><span class=\"comment\">   * shrinkage.</span></span><br><span class=\"line\"><span class=\"comment\">   * 树化阈值</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TREEIFY_THRESHOLD = <span class=\"number\">8</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * The bin count threshold for untreeifying a (split) bin during a</span></span><br><span class=\"line\"><span class=\"comment\">   * resize operation. Should be less than TREEIFY_THRESHOLD, and at</span></span><br><span class=\"line\"><span class=\"comment\">   * most 6 to mesh with shrinkage detection under removal.</span></span><br><span class=\"line\"><span class=\"comment\">   * 树降级为链表的阈值</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> UNTREEIFY_THRESHOLD = <span class=\"number\">6</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * The smallest table capacity for which bins may be treeified.</span></span><br><span class=\"line\"><span class=\"comment\">   * (Otherwise the table is resized if too many nodes in a bin.)</span></span><br><span class=\"line\"><span class=\"comment\">   * Should be at least 4 * TREEIFY_THRESHOLD to avoid conflicts</span></span><br><span class=\"line\"><span class=\"comment\">   * between resizing and treeification thresholds.</span></span><br><span class=\"line\"><span class=\"comment\">   * table达到这个长度时才可以树化</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> MIN_TREEIFY_CAPACITY = <span class=\"number\">64</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"b-变量\"><a href=\"#b-变量\" class=\"headerlink\" title=\"b. 变量\"></a>b. 变量</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * The table, initialized on first use, and resized as</span></span><br><span class=\"line\"><span class=\"comment\">    * necessary. When allocated, length is always a power of two.</span></span><br><span class=\"line\"><span class=\"comment\">    * (We also tolerate length zero in some operations to allow</span></span><br><span class=\"line\"><span class=\"comment\">    * bootstrapping mechanics that are currently not needed.)</span></span><br><span class=\"line\"><span class=\"comment\">    * 哈希表，什么时候初始化？第一次put的时候</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"keyword\">transient</span> Node&lt;K,V&gt;[] table;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * Holds cached entrySet(). Note that AbstractMap fields are used</span></span><br><span class=\"line\"><span class=\"comment\">    * for keySet() and values().</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"keyword\">transient</span> Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * The number of key-value mappings contained in this map.</span></span><br><span class=\"line\"><span class=\"comment\">    * 哈希表中元素的个数</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"keyword\">transient</span> <span class=\"keyword\">int</span> size;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * The number of times this HashMap has been structurally modified</span></span><br><span class=\"line\"><span class=\"comment\">    * Structural modifications are those that change the number of mappings in</span></span><br><span class=\"line\"><span class=\"comment\">    * the HashMap or otherwise modify its internal structure (e.g.,</span></span><br><span class=\"line\"><span class=\"comment\">    * rehash).  This field is used to make iterators on Collection-views of</span></span><br><span class=\"line\"><span class=\"comment\">    * the HashMap fail-fast.  (See ConcurrentModificationException).</span></span><br><span class=\"line\"><span class=\"comment\">    * 哈希表结构变化次数：put已有的key不会造成modCount变化</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"keyword\">transient</span> <span class=\"keyword\">int</span> modCount;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * The next size value at which to resize (capacity * load factor).</span></span><br><span class=\"line\"><span class=\"comment\">    * 触发resize()扩容的阈值，当元素个数大于这个值时，触发扩容</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@serial</span></span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"comment\">// (The javadoc description is true upon serialization.</span></span><br><span class=\"line\">   <span class=\"comment\">// Additionally, if the table array has not been allocated, this</span></span><br><span class=\"line\">   <span class=\"comment\">// field holds the initial array capacity, or zero signifying</span></span><br><span class=\"line\">   <span class=\"comment\">// DEFAULT_INITIAL_CAPACITY.)</span></span><br><span class=\"line\">   <span class=\"keyword\">int</span> threshold;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * The load factor for the hash table.</span></span><br><span class=\"line\"><span class=\"comment\">    * 负载因子：threshold = capacity * loadFactor，其中capacity是哈希表数组的长度 </span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@serial</span></span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> loadFactor;</span><br></pre></td></tr></table></figure>\n<h2 id=\"c-构造方法\"><a href=\"#c-构造方法\" class=\"headerlink\" title=\"c. 构造方法\"></a>c. 构造方法</h2><p>一共4个构造方法</p>\n<ul>\n<li><p>new HashMap();</p>\n</li>\n<li><p>new HashMap(int initialCapacity);</p>\n</li>\n<li><p>new HashMap(int initialCapacity, float loadFactor);</p>\n</li>\n<li><p>new HashMap(Map&lt;? extends K, ? extends V&gt; m);</p>\n</li>\n</ul>\n<p>第一个只设置了默认了loadFactor；   </p>\n<p>第二个和第三个底层都是调用了第三个方法，对loadFactor和theashold进行了赋值；   </p>\n<p>第三个对传入的map进行处理，如果不为空，则遍历传入的map，每个元素调用<code>put()</code>方法放入hashMap表中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Constructs an empty &#123;<span class=\"doctag\">@code</span> HashMap&#125; with the specified initial</span></span><br><span class=\"line\"><span class=\"comment\">     * capacity and load factor.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span>  initialCapacity the initial capacity</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span>  loadFactor      the load factor</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> IllegalArgumentException if the initial capacity is negative</span></span><br><span class=\"line\"><span class=\"comment\">     *         or the load factor is nonpositive</span></span><br><span class=\"line\"><span class=\"comment\">     * initialCapacity：初始哈希表大小，可以为0</span></span><br><span class=\"line\"><span class=\"comment\">     * loadFactor：负载因子，必须大于0      </span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HashMap</span><span class=\"params\">(<span class=\"keyword\">int</span> initialCapacity, <span class=\"keyword\">float</span> loadFactor)</span> </span>&#123;</span><br><span class=\"line\">    \t<span class=\"comment\">// 判断传入的initialCapacity是否异常，其取值必须大于且小于MAXIMUM_CAPACITY（1 &lt;&lt; 30）</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (initialCapacity &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Illegal initial capacity: \"</span> +</span><br><span class=\"line\">                                               initialCapacity);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class=\"line\">            initialCapacity = MAXIMUM_CAPACITY;</span><br><span class=\"line\">            <span class=\"comment\">// load factor必须大于0</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (loadFactor &lt;= <span class=\"number\">0</span> || Float.isNaN(loadFactor))</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Illegal load factor: \"</span> +</span><br><span class=\"line\">                                               loadFactor);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.loadFactor = loadFactor;</span><br><span class=\"line\">        <span class=\"comment\">// 此处有个针对threshold的处理方法，将其转为最小的大于initialCapacity且为2的幂次方的数</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.threshold = tableSizeFor(initialCapacity);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Constructs an empty &#123;<span class=\"doctag\">@code</span> HashMap&#125; with the specified initial</span></span><br><span class=\"line\"><span class=\"comment\">     * capacity and the default load factor (0.75).</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span>  initialCapacity the initial capacity.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> IllegalArgumentException if the initial capacity is negative.</span></span><br><span class=\"line\"><span class=\"comment\">     * 调用了双参数的构造方法</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HashMap</span><span class=\"params\">(<span class=\"keyword\">int</span> initialCapacity)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Constructs an empty &#123;<span class=\"doctag\">@code</span> HashMap&#125; with the default initial capacity</span></span><br><span class=\"line\"><span class=\"comment\">     * (16) and the default load factor (0.75).</span></span><br><span class=\"line\"><span class=\"comment\">     * 最常用的方法，只对load factor进行了设置，threshold在第一次put时设置，具体是在resize()方法中</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HashMap</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.loadFactor = DEFAULT_LOAD_FACTOR; <span class=\"comment\">// all other fields defaulted</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Constructs a new &#123;<span class=\"doctag\">@code</span> HashMap&#125; with the same mappings as the</span></span><br><span class=\"line\"><span class=\"comment\">     * specified &#123;<span class=\"doctag\">@code</span> Map&#125;.  The &#123;<span class=\"doctag\">@code</span> HashMap&#125; is created with</span></span><br><span class=\"line\"><span class=\"comment\">     * default load factor (0.75) and an initial capacity sufficient to</span></span><br><span class=\"line\"><span class=\"comment\">     * hold the mappings in the specified &#123;<span class=\"doctag\">@code</span> Map&#125;.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span>   m the map whose mappings are to be placed in this map</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span>  NullPointerException if the specified map is null</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HashMap</span><span class=\"params\">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.loadFactor = DEFAULT_LOAD_FACTOR;</span><br><span class=\"line\">        putMapEntries(m, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"d-tableSizeFor-int-方法\"><a href=\"#d-tableSizeFor-int-方法\" class=\"headerlink\" title=\"d.  tableSizeFor(int)方法\"></a>d.  <code>tableSizeFor(int)</code>方法</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Returns a power of two size for the given target capacity.</span></span><br><span class=\"line\"><span class=\"comment\">     * 返回大于等于传入的数且为2的幂的数</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">tableSizeFor</span><span class=\"params\">(<span class=\"keyword\">int</span> cap)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 减1后，n的非符号不为0的最高位一定小于或等于cap的</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> n = cap - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 无符号右移1位</span></span><br><span class=\"line\">        n |= n &gt;&gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">        n |= n &gt;&gt;&gt; <span class=\"number\">2</span>;</span><br><span class=\"line\">        n |= n &gt;&gt;&gt; <span class=\"number\">4</span>;</span><br><span class=\"line\">        n |= n &gt;&gt;&gt; <span class=\"number\">8</span>;</span><br><span class=\"line\">        n |= n &gt;&gt;&gt; <span class=\"number\">16</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (n &lt; <span class=\"number\">0</span>) ? <span class=\"number\">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"3-get-方法\"><a href=\"#3-get-方法\" class=\"headerlink\" title=\"3. get()方法\"></a>3. get()方法</h1><h2 id=\"a-基本逻辑\"><a href=\"#a-基本逻辑\" class=\"headerlink\" title=\"a. 基本逻辑\"></a>a. 基本逻辑</h2><p><code>get()</code>方法调用了<code>getNode()</code>方法，基本逻辑是：</p>\n<ol>\n<li>通过hash()方法计算出传入key对应的slot下标；</li>\n<li>如果slot为空，则返回null，结束；</li>\n<li>判断传入的key是否和slot中的第一个元素的key相等，相等则返回Node的value，结束；</li>\n<li>如果和slot第一个元素key不相等且slot下存储的是红黑树，通过红黑树对应方法获取Node值，结束；</li>\n<li>如果slot下存储的是链表，遍历链表，判断是否有Node的key和传入的key相等，相等则返回对应Node的值，否则返回null，结束。</li>\n</ol>\n<h2 id=\"b-get-方法\"><a href=\"#b-get-方法\" class=\"headerlink\" title=\"b. get()方法\"></a>b. <code>get()</code>方法</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Returns the value to which the specified key is mapped,</span></span><br><span class=\"line\"><span class=\"comment\"> * or &#123;<span class=\"doctag\">@code</span> null&#125; if this map contains no mapping for the key.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;More formally, if this map contains a mapping from a key</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;<span class=\"doctag\">@code</span> k&#125; to a value &#123;<span class=\"doctag\">@code</span> v&#125; such that &#123;<span class=\"doctag\">@code</span> (key==null ? k==null :</span></span><br><span class=\"line\"><span class=\"comment\"> * key.equals(k))&#125;, then this method returns &#123;<span class=\"doctag\">@code</span> v&#125;; otherwise</span></span><br><span class=\"line\"><span class=\"comment\"> * it returns &#123;<span class=\"doctag\">@code</span> null&#125;.  (There can be at most one such mapping.)</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;A return value of &#123;<span class=\"doctag\">@code</span> null&#125; does not &lt;i&gt;necessarily&lt;/i&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * indicate that the map contains no mapping for the key; it's also</span></span><br><span class=\"line\"><span class=\"comment\"> * possible that the map explicitly maps the key to &#123;<span class=\"doctag\">@code</span> null&#125;.</span></span><br><span class=\"line\"><span class=\"comment\"> * The &#123;<span class=\"doctag\">@link</span> #containsKey containsKey&#125; operation may be used to</span></span><br><span class=\"line\"><span class=\"comment\"> * distinguish these two cases.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span> #put(Object, Object)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">get</span><span class=\"params\">(Object key)</span> </span>&#123;</span><br><span class=\"line\">    Node&lt;K,V&gt; e;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (e = getNode(hash(key), key)) == <span class=\"keyword\">null</span> ? <span class=\"keyword\">null</span> : e.value;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"c-hash-方法\"><a href=\"#c-hash-方法\" class=\"headerlink\" title=\"c. hash()方法\"></a>c. <code>hash()</code>方法</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 散列函数</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">hash</span><span class=\"params\">(Object key)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"comment\">// h表示计算出来的hash值，和key的hashCode()不完全相同</span></span><br><span class=\"line\">       <span class=\"keyword\">int</span> h;</span><br><span class=\"line\">       </span><br><span class=\"line\">       <span class=\"keyword\">return</span> (key == <span class=\"keyword\">null</span>) ? <span class=\"number\">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class=\"number\">16</span>);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>  这段代码是为了对key的hashCode进行扰动计算，防止不同hashCode的高位不同但低位相同导致的hash冲突。简单点说，就是为了把高位的特征和低位的特征组合起来，降低哈希冲突的概率，也就是说，尽量做到任何一位的变化都能对最终得到的结果产生影响。</p>\n</blockquote>\n<p>扰动函数的作用还是减少哈希冲突，让元素存储的更加均匀。</p>\n<h2 id=\"d-getNode-方法\"><a href=\"#d-getNode-方法\" class=\"headerlink\" title=\"d. getNode()方法\"></a>d. <code>getNode()</code>方法</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Implements Map.get and related methods</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> hash hash for key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key the key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> the node, or null if none</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">final</span> Node&lt;K,V&gt; <span class=\"title\">getNode</span><span class=\"params\">(<span class=\"keyword\">int</span> hash, Object key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// tab : 哈希表</span></span><br><span class=\"line\">        <span class=\"comment\">// first : 计算出的数组中slot下的第一个元素</span></span><br><span class=\"line\">        <span class=\"comment\">// e : 临时node</span></span><br><span class=\"line\">        <span class=\"comment\">// n : 哈希表的数组长度</span></span><br><span class=\"line\">        <span class=\"comment\">// k : 临时用来比较的node的key</span></span><br><span class=\"line\">        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; <span class=\"keyword\">int</span> n; K k;</span><br><span class=\"line\">        <span class=\"comment\">// 哈希表不为空，数组长度不为0且对应的slot里有数据时进入</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((tab = table) != <span class=\"keyword\">null</span> &amp;&amp; (n = tab.length) &gt; <span class=\"number\">0</span> &amp;&amp;</span><br><span class=\"line\">            (first = tab[(n - <span class=\"number\">1</span>) &amp; hash]) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// slot中的第一个元素满足条件，直接返回</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (first.hash == hash &amp;&amp; <span class=\"comment\">// always check first node</span></span><br><span class=\"line\">                ((k = first.key) == key || (key != <span class=\"keyword\">null</span> &amp;&amp; key.equals(k))))</span><br><span class=\"line\">                <span class=\"keyword\">return</span> first;</span><br><span class=\"line\">            <span class=\"comment\">// 不是第一个元素，需要遍历</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((e = first.next) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 如果是红黑树，从红黑树中拿</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (first <span class=\"keyword\">instanceof</span> TreeNode)</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</span><br><span class=\"line\">                <span class=\"comment\">// 通过遍历循环获取其值</span></span><br><span class=\"line\">                <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (e.hash == hash &amp;&amp;</span><br><span class=\"line\">                        ((k = e.key) == key || (key != <span class=\"keyword\">null</span> &amp;&amp; key.equals(k))))</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> e;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">while</span> ((e = e.next) != <span class=\"keyword\">null</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"4-put-方法\"><a href=\"#4-put-方法\" class=\"headerlink\" title=\"4. put()方法\"></a>4. put()方法</h1><h2 id=\"a-基本逻辑-1\"><a href=\"#a-基本逻辑-1\" class=\"headerlink\" title=\"a. 基本逻辑\"></a>a. 基本逻辑</h2><p><code>put()</code>方法调用了<code>putVal()</code>方法，基本逻辑是：</p>\n<ol>\n<li>判断哈希表是否初始化，如果未初始化，调用<code>resize()</code>方法初始化；</li>\n<li>通过散列函数计算出来的hash值和哈希表长度-1进行与运算，得出要插入的slot下标；</li>\n<li>判断哈希表中对应slot的情况，有三种：无元素，有元素且为链表，有元素且为红黑树；</li>\n<li>无元素则新建一个新的Node节点，到第7步；</li>\n<li>元素为红黑树，则往红黑树中插入或更新一个节点，到第7步；</li>\n<li>元素为链表，遍历链表，如果存在Node的key和插入key相同，只更新Node的value，否则在Node尾部新插入一个Node节点。之后进行一次判断，当前链表长度是否大于树化阈值<code>TREEIFY_THRESHOLD</code>，这个值为8，也就是插入的元素为第9个元素时，调用树化方法<code>treeifyBin()</code>;</li>\n<li>判断是否有新增元素，有则modCount加1，表示hashMap的结构发生了修改。size加1；</li>\n<li>判断当前size是否大于扩容阈值theashold，如果大于，调用<code>resize()</code>方法</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Associates the specified value with the specified key in this map.</span></span><br><span class=\"line\"><span class=\"comment\"> * If the map previously contained a mapping for the key, the old</span></span><br><span class=\"line\"><span class=\"comment\"> * value is replaced.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> key key with which the specified value is to be associated</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> value value to be associated with the specified key</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> the previous value associated with &lt;tt&gt;key&lt;/tt&gt;, or</span></span><br><span class=\"line\"><span class=\"comment\"> *         &lt;tt&gt;null&lt;/tt&gt; if there was no mapping for &lt;tt&gt;key&lt;/tt&gt;.</span></span><br><span class=\"line\"><span class=\"comment\"> *         (A &lt;tt&gt;null&lt;/tt&gt; return can also indicate that the map</span></span><br><span class=\"line\"><span class=\"comment\"> *         previously associated &lt;tt&gt;null&lt;/tt&gt; with &lt;tt&gt;key&lt;/tt&gt;.)</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 将键值对插入hashMap</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">put</span><span class=\"params\">(K key, V value)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> putVal(hash(key), key, value, <span class=\"keyword\">false</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"b-putVal-方法\"><a href=\"#b-putVal-方法\" class=\"headerlink\" title=\"b. putVal()方法\"></a>b. <code>putVal()</code>方法</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Implements Map.put and related methods</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> hash hash for key : key的哈希值</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> key the key </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> value the value to put : 要设置的值</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> onlyIfAbsent if true, don't change existing value : 如果为true，只有key未保存在HashMap中时才进行插入，否则不处理</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> evict if false, the table is in creation mode.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> previous value, or null if none : 返回之前key对应之前的value，如果不存在返回null</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> V <span class=\"title\">putVal</span><span class=\"params\">(<span class=\"keyword\">int</span> hash, K key, V value, <span class=\"keyword\">boolean</span> onlyIfAbsent,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">               <span class=\"keyword\">boolean</span> evict)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// tab : 哈希表的引用</span></span><br><span class=\"line\">    <span class=\"comment\">// p : 临时变量，表示slot下的entry节点</span></span><br><span class=\"line\">    <span class=\"comment\">// n : 哈希表中的长度</span></span><br><span class=\"line\">    <span class=\"comment\">// i : key对应的slot下标</span></span><br><span class=\"line\">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class=\"keyword\">int</span> n, i;</span><br><span class=\"line\">    <span class=\"comment\">// table为空或者哈希表大小为0，此时对hashMap进行赋值</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((tab = table) == <span class=\"keyword\">null</span> || (n = tab.length) == <span class=\"number\">0</span>)</span><br><span class=\"line\">        n = (tab = resize()).length;</span><br><span class=\"line\">    <span class=\"comment\">// (n - 1) &amp; hash 计算得出数组下标，如果数组元素为空，则为其赋值一个新节点</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((p = tab[i = (n - <span class=\"number\">1</span>) &amp; hash]) == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        tab[i] = newNode(hash, key, value, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// e : 临时Node节点</span></span><br><span class=\"line\">        <span class=\"comment\">// k : 要插入的key*</span></span><br><span class=\"line\">        Node&lt;K,V&gt; e; K k;</span><br><span class=\"line\">        <span class=\"comment\">// 如果key就是数组里的第一个元素，把p赋值给e</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p.hash == hash &amp;&amp;</span><br><span class=\"line\">            ((k = p.key) == key || (key != <span class=\"keyword\">null</span> &amp;&amp; key.equals(k))))</span><br><span class=\"line\">            e = p;</span><br><span class=\"line\">        <span class=\"comment\">// 如果p是一个树节点，证明数组下标内存储的数据结构是红黑树，插入红黑树</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (p <span class=\"keyword\">instanceof</span> TreeNode)</span><br><span class=\"line\">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class=\"keyword\">this</span>, tab, hash, key, value);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> binCount = <span class=\"number\">0</span>; ; ++binCount) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 如果节点的next节点为空，表示一直未找到和插入key相同的key，此时直接在next节点插入新节点</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((e = p.next) == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    p.next = newNode(hash, key, value, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">                    <span class=\"comment\">// binCount从0开始，TREEIFY_THRESHOLD为8</span></span><br><span class=\"line\">                    <span class=\"comment\">// binCount为0时，实际插入的是第2个元素p.next，所以，binCount为7时，插入了第9个元素，此时需要树化</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class=\"number\">1</span>) <span class=\"comment\">// -1 for 1st</span></span><br><span class=\"line\">                        treeifyBin(tab, hash);</span><br><span class=\"line\">                    <span class=\"comment\">// 插入完跳出循环</span></span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// 找到和要插入的key 相同的key，此时e持有这个节点的引用，直接跳出循环</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (e.hash == hash &amp;&amp;</span><br><span class=\"line\">                    ((k = e.key) == key || (key != <span class=\"keyword\">null</span> &amp;&amp; key.equals(k))))</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"comment\">// 上面两个if均不满足，表名p.next!=null 且没找到和要插入的key相同的Node，将e赋给p，继续下一次循环</span></span><br><span class=\"line\">                p = e;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 如果e不为空，表名前面的代码找到了旧的Node，进行value的赋值操作，此处操作完直接返回，没有对modCount进行操作</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (e != <span class=\"keyword\">null</span>) &#123; <span class=\"comment\">// existing mapping for key</span></span><br><span class=\"line\">            V oldValue = e.value;</span><br><span class=\"line\">            <span class=\"comment\">// 如果onlyIfAbsent为false或者旧的value为空时，将新的value赋值进去</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!onlyIfAbsent || oldValue == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                e.value = value;</span><br><span class=\"line\">            afterNodeAccess(e);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> oldValue;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 到此处表示对哈希表的结构进行了改变，modCount+1</span></span><br><span class=\"line\">    ++modCount;</span><br><span class=\"line\">    <span class=\"comment\">// 如果添加了元素后的哈希表size大于扩容阈值，进行扩容</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (++size &gt; threshold)</span><br><span class=\"line\">        resize();</span><br><span class=\"line\">    afterNodeInsertion(evict);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"5-resize-方法\"><a href=\"#5-resize-方法\" class=\"headerlink\" title=\"5. resize()方法\"></a>5. resize()方法</h1><p><code>resize()</code>方法常见情况有以下几个地方调用：</p>\n<ol>\n<li>第一次调用<code>put()</code>方法时，table为空，调用<code>resize()</code>方法初始化哈希表；</li>\n<li><code>put()</code>方法插入新元素后，判断当前size是否大于扩容阈值theashold，大于则进行扩容操作；</li>\n<li><code>put()</code>方法slot下为链表插入新元素后，如果需要链表长度大于树化阈值，则进行树化操作，此时，树化方法会判断哈希表数组长度是否大于64，小于时不会进行树化，而是调用<code>resize()</code>方法进行扩容；这边的64个人推测应该是一个折衷的数字，数组长度太小，则resize()方法时间消耗不大，扩容后元素分布会更加稀疏，相对树化是更优解。</li>\n<li>调用<code>putAll()</code>方法时，底层调用<code>putMapEntries()</code>方法，如果传如的map的size大于扩容阈值theashold，调用<code>resize()</code>方法。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * Initializes or doubles table size.  If null, allocates in</span></span><br><span class=\"line\"><span class=\"comment\">    * accord with initial capacity target held in field threshold.</span></span><br><span class=\"line\"><span class=\"comment\">    * Otherwise, because we are using power-of-two expansion, the</span></span><br><span class=\"line\"><span class=\"comment\">    * elements from each bin must either stay at same index, or move</span></span><br><span class=\"line\"><span class=\"comment\">    * with a power of two offset in the new table.</span></span><br><span class=\"line\"><span class=\"comment\">    *</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return</span> the table</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"keyword\">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class=\"line\">       <span class=\"comment\">// oldTab : 扩容前的数组</span></span><br><span class=\"line\">       Node&lt;K,V&gt;[] oldTab = table;</span><br><span class=\"line\">       <span class=\"comment\">// oldCap : 扩容前的数组长度</span></span><br><span class=\"line\">       <span class=\"keyword\">int</span> oldCap = (oldTab == <span class=\"keyword\">null</span>) ? <span class=\"number\">0</span> : oldTab.length;</span><br><span class=\"line\">       <span class=\"comment\">// oldThr : 扩容前的扩容阈值</span></span><br><span class=\"line\">       <span class=\"keyword\">int</span> oldThr = threshold;</span><br><span class=\"line\">       <span class=\"comment\">// region 计算 newCap和newThr</span></span><br><span class=\"line\">       <span class=\"comment\">// newCap : 扩容后的数组长度，需要计算</span></span><br><span class=\"line\">       <span class=\"comment\">// newThr : 扩容后的扩容阈值，需要计算</span></span><br><span class=\"line\">       <span class=\"keyword\">int</span> newCap, newThr = <span class=\"number\">0</span>;</span><br><span class=\"line\">       <span class=\"comment\">// 旧数组长度大于0，表示已经初始化过了</span></span><br><span class=\"line\">       <span class=\"keyword\">if</span> (oldCap &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">           <span class=\"comment\">// 如果旧的数组长度已经大于最大数组长度MAXIMUM_CAPACITY，此时不再扩容，将扩容阈值设置为int最大值，直接返回</span></span><br><span class=\"line\">           <span class=\"keyword\">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class=\"line\">               threshold = Integer.MAX_VALUE;</span><br><span class=\"line\">               <span class=\"keyword\">return</span> oldTab;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           <span class=\"comment\">// newCap = oldCap &lt;&lt; 1表示新的数组大小为旧数组的2倍</span></span><br><span class=\"line\">           <span class=\"comment\">// 如果新数组的长度小于最大数组长度，且旧的数组长度大于等于默认初始长度16，扩容阈值也变为旧的2倍</span></span><br><span class=\"line\">           <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((newCap = oldCap &lt;&lt; <span class=\"number\">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class=\"line\">                    oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class=\"line\">               newThr = oldThr &lt;&lt; <span class=\"number\">1</span>; <span class=\"comment\">// double threshold</span></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"comment\">// 之前未初始化（put操作）过，且旧的扩容阈值大于0，有两种情况</span></span><br><span class=\"line\">       <span class=\"comment\">// new HashMap(int capacity, float loadFactor)</span></span><br><span class=\"line\">       <span class=\"comment\">// new HashMap(int capacity)</span></span><br><span class=\"line\">       <span class=\"comment\">// 此时threashold为第一次赋值的2的幂次方，所以直接赋值成为下一次的数组长度</span></span><br><span class=\"line\">       <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (oldThr &gt; <span class=\"number\">0</span>) <span class=\"comment\">// initial capacity was placed in threshold</span></span><br><span class=\"line\">           newCap = oldThr;</span><br><span class=\"line\">       <span class=\"comment\">// 之前未初始化（put操作）过，且旧的扩容阈值为0，有一种情况</span></span><br><span class=\"line\">       <span class=\"comment\">// new HashMap()</span></span><br><span class=\"line\">       <span class=\"comment\">// 此时新的数组长度为16，新的阈值长度为默认长度乘以默认负载因子 16 * 0.75 = 12</span></span><br><span class=\"line\">       <span class=\"keyword\">else</span> &#123;               <span class=\"comment\">// zero initial threshold signifies using defaults</span></span><br><span class=\"line\">           newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class=\"line\">           newThr = (<span class=\"keyword\">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"comment\">// 未设置新的扩容阈值时，根据新的数组长度和负载因子算出来</span></span><br><span class=\"line\">       <span class=\"keyword\">if</span> (newThr == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">float</span> ft = (<span class=\"keyword\">float</span>)newCap * loadFactor;</span><br><span class=\"line\">           newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class=\"keyword\">float</span>)MAXIMUM_CAPACITY ?</span><br><span class=\"line\">                     (<span class=\"keyword\">int</span>)ft : Integer.MAX_VALUE);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"comment\">// endregion</span></span><br><span class=\"line\">       <span class=\"comment\">// 算出来的扩容阈值赋值给threshold</span></span><br><span class=\"line\">       threshold = newThr;</span><br><span class=\"line\">       <span class=\"comment\">// 创建新的数组</span></span><br><span class=\"line\">       <span class=\"meta\">@SuppressWarnings</span>(&#123;<span class=\"string\">\"rawtypes\"</span>,<span class=\"string\">\"unchecked\"</span>&#125;)</span><br><span class=\"line\">           Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class=\"keyword\">new</span> Node[newCap];</span><br><span class=\"line\">       table = newTab;</span><br><span class=\"line\">       <span class=\"comment\">// 只有第一次创建时，旧的数组为空，此时直接返回</span></span><br><span class=\"line\">       <span class=\"keyword\">if</span> (oldTab != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">           <span class=\"comment\">// 遍历旧数组的，重新插入数据</span></span><br><span class=\"line\">           <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class=\"line\">               <span class=\"comment\">// e : 临时元素，持有当前操作的Node</span></span><br><span class=\"line\">               Node&lt;K,V&gt; e;</span><br><span class=\"line\">               <span class=\"comment\">// 如果当前下标数组元素不为空</span></span><br><span class=\"line\">               <span class=\"keyword\">if</span> ((e = oldTab[j]) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                   <span class=\"comment\">// 旧数据被e持有，后续可直接对旧数组进行GC</span></span><br><span class=\"line\">                   oldTab[j] = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                   <span class=\"comment\">// 此下标只有一个元素，直接计算出元素的下标，赋值到新数组</span></span><br><span class=\"line\">                   <span class=\"keyword\">if</span> (e.next == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                       newTab[e.hash &amp; (newCap - <span class=\"number\">1</span>)] = e;</span><br><span class=\"line\">                   <span class=\"comment\">// 如果是树节点，往红黑树插入</span></span><br><span class=\"line\">                   <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (e <span class=\"keyword\">instanceof</span> TreeNode)</span><br><span class=\"line\">                       ((TreeNode&lt;K,V&gt;)e).split(<span class=\"keyword\">this</span>, newTab, j, oldCap);</span><br><span class=\"line\">                   <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// preserve order</span></span><br><span class=\"line\">                       <span class=\"comment\">// 数组扩容后，长度多了一位，旧的hash值计算出来有两种情况</span></span><br><span class=\"line\">                       <span class=\"comment\">// 高位是0，此时和旧数组中的下标一致oldHash</span></span><br><span class=\"line\">                       <span class=\"comment\">// 高位是1，此时下标为 oldHash + oldCap</span></span><br><span class=\"line\">                       <span class=\"comment\">// 低位链表 loHead链表头，loTail链表尾部</span></span><br><span class=\"line\">                       Node&lt;K,V&gt; loHead = <span class=\"keyword\">null</span>, loTail = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                       <span class=\"comment\">// 高位链表</span></span><br><span class=\"line\">                       Node&lt;K,V&gt; hiHead = <span class=\"keyword\">null</span>, hiTail = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                       Node&lt;K,V&gt; next;</span><br><span class=\"line\">                       <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">                           next = e.next;</span><br><span class=\"line\">                           <span class=\"comment\">// (e.hash &amp; oldCap) == 0表明新hash值是低位</span></span><br><span class=\"line\">                           <span class=\"keyword\">if</span> ((e.hash &amp; oldCap) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                               <span class=\"comment\">// 第一次插入loTail为空，把loHead赋值为当前Node</span></span><br><span class=\"line\">                               <span class=\"keyword\">if</span> (loTail == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                                   loHead = e;</span><br><span class=\"line\">                               <span class=\"comment\">// 不是第一次插入，在loTail后面新插入即可</span></span><br><span class=\"line\">                               <span class=\"keyword\">else</span></span><br><span class=\"line\">                                   loTail.next = e;</span><br><span class=\"line\">                               <span class=\"comment\">// loTail一直指向最新插入的值</span></span><br><span class=\"line\">                               loTail = e;</span><br><span class=\"line\">                           &#125;</span><br><span class=\"line\">                           <span class=\"comment\">// 高位插入，具体逻辑和低位类似</span></span><br><span class=\"line\">                           <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                               <span class=\"keyword\">if</span> (hiTail == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                                   hiHead = e;</span><br><span class=\"line\">                               <span class=\"keyword\">else</span></span><br><span class=\"line\">                                   hiTail.next = e;</span><br><span class=\"line\">                               hiTail = e;</span><br><span class=\"line\">                           &#125;</span><br><span class=\"line\">                       &#125; <span class=\"keyword\">while</span> ((e = next) != <span class=\"keyword\">null</span>);</span><br><span class=\"line\">                       <span class=\"keyword\">if</span> (loTail != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                           <span class=\"comment\">// 去掉新插入后低位链表尾部的引用</span></span><br><span class=\"line\">                           loTail.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                           <span class=\"comment\">// 把低位链表头赋值到数组里，下标是当前下标</span></span><br><span class=\"line\">                           newTab[j] = loHead;</span><br><span class=\"line\">                       &#125;</span><br><span class=\"line\">                       <span class=\"keyword\">if</span> (hiTail != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                           <span class=\"comment\">// 去掉新插入后低位链表尾部的引用</span></span><br><span class=\"line\">                           hiTail.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                           <span class=\"comment\">// 把低位链表头赋值到数组里，下标是当前下标 + oldCap</span></span><br><span class=\"line\">                           newTab[j + oldCap] = hiHead;</span><br><span class=\"line\">                       &#125;</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> newTab;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h1><p>[1] <a href=\"https://www.zhihu.com/question/20733617\" target=\"_blank\" rel=\"noopener\">JDK 源码中 HashMap 的 hash 方法原理是什么？</a>   </p>\n<p>[2] <a href=\"https://blog.csdn.net/weixin_37139197/article/details/84575054\" target=\"_blank\" rel=\"noopener\">HashMap及其原理</a></p>\n","link":"","permalink":"https://stevehuge.github.io/2020/07/31/HashMap/","categories":[],"tags":[{"name":"Java","slug":"Java","permalink":"https://stevehuge.github.io/tags/Java/"},{"name":"链表","slug":"链表","permalink":"https://stevehuge.github.io/tags/%E9%93%BE%E8%A1%A8/"},{"name":"数组","slug":"数组","permalink":"https://stevehuge.github.io/tags/%E6%95%B0%E7%BB%84/"}]},{"title":"MacBook使用","date":"2020-07-27T13:13:50.000Z","path":"2020/07/27/MacBook使用/","content":"<h1 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h1><h2 id=\"1-环境变量\"><a href=\"#1-环境变量\" class=\"headerlink\" title=\"1. 环境变量\"></a>1. 环境变量</h2><h3 id=\"1-当前用户变量\"><a href=\"#1-当前用户变量\" class=\"headerlink\" title=\"1. 当前用户变量\"></a>1. 当前用户变量</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat ~/.bash_profile</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-设置PATH\"><a href=\"#2-设置PATH\" class=\"headerlink\" title=\"2. 设置PATH\"></a>2. 设置PATH</h3><p>在<code>/etc/.paths.d/</code>，建立要使用的命令的文件，里面存储具体所在可执行文件的位置。<br>例如</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ touch /ect/paths.d/mysql</span><br><span class=\"line\">$ vi /etc/paths.d/mysql</span><br></pre></td></tr></table></figure>\n<p>把mysql bin文件夹的路径存进去</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;usr&#x2F;local&#x2F;mysql&#x2F;bin</span><br></pre></td></tr></table></figure>\n<p>保存之后，打开新的命令窗口，就可以使用了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$~ <span class=\"built_in\">echo</span> <span class=\"variable\">$PATH</span></span><br><span class=\"line\">/usr/<span class=\"built_in\">local</span>/mysql/bin:<span class=\"variable\">$PATH</span></span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h2 id=\"2-JAVA-HOME\"><a href=\"#2-JAVA-HOME\" class=\"headerlink\" title=\"2.  JAVA_HOME\"></a>2.  JAVA_HOME</h2><h3 id=\"1-查看Java安装位置\"><a href=\"#1-查看Java安装位置\" class=\"headerlink\" title=\"1. 查看Java安装位置\"></a>1. 查看Java安装位置</h3><p>有两种方式</p>\n<ol>\n<li>查看系统变量<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$JAVA_HOME</span></span><br></pre></td></tr></table></figure>\n一般都在<code>/Library/Java/JavaVirtualMachines/</code>下。<h3 id=\"2-配置Java环境\"><a href=\"#2-配置Java环境\" class=\"headerlink\" title=\"2. 配置Java环境\"></a>2. 配置Java环境</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看当前使用bash</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$SHELL</span></span><br><span class=\"line\"><span class=\"comment\"># 如果使用bash，打开当前用户配置文件</span></span><br><span class=\"line\">vim ~/.bash_profile</span><br><span class=\"line\"><span class=\"comment\"># 如果使用zsh，打开当前用户配置文件</span></span><br><span class=\"line\">vim ~/.zprofile</span><br></pre></td></tr></table></figure>\n如果有多个JDK版本号，可以使用以下格式保存参数<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> JAVA_11_HOME=/Library/Java/JavaVirtualMachines/jdk11-version/Contents/Home</span><br><span class=\"line\"><span class=\"built_in\">export</span> JAVA_8_HOME=/Library/Java/JavaVirtualMachines/jdk8-version/Contents/Home</span><br><span class=\"line\">PATH=<span class=\"variable\">$JAVA_HOME</span>/bin:<span class=\"variable\">$PATH</span></span><br><span class=\"line\">CLASSPATH=<span class=\"variable\">$JAVA_HOME</span>/lib/tools.jar:<span class=\"variable\">$JAVA_HOME</span>/lib/dt.jar</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#默认JDK为JDK8</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> JAVA_HOME=<span class=\"variable\">$JAVA_8_HOME</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># alias命令动态切换JDK版本</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> jdk11=<span class=\"string\">\"export JAVA_HOME=<span class=\"variable\">$JAVA_11_HOME</span>\"</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> jdk8=<span class=\"string\">\"export JAVA_HOME=<span class=\"variable\">$JAVA_9_HOME</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH</span><br><span class=\"line\"><span class=\"built_in\">export</span> CLASSPATH</span><br></pre></td></tr></table></figure>\n<code>ESC</code> + <code>:wq</code> 保存配置文件之后，使配置文件生效<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># bash</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> ~/.bash_profile</span><br><span class=\"line\"><span class=\"comment\"># zsh </span></span><br><span class=\"line\"><span class=\"built_in\">source</span> ~/.zprofile</span><br></pre></td></tr></table></figure>\n新开一个终端窗口就可以使用<code>java -version</code>查看JDK版本号了。</li>\n</ol>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ol>\n<li><a href=\"https://zhuanlan.zhihu.com/p/111250657\" target=\"_blank\" rel=\"noopener\">Mac下多版本JDK的安装及管理</a></li>\n</ol>\n<h1 id=\"包管理-amp-软件\"><a href=\"#包管理-amp-软件\" class=\"headerlink\" title=\"包管理 &amp; 软件\"></a>包管理 &amp; 软件</h1><h2 id=\"1-Brew\"><a href=\"#1-Brew\" class=\"headerlink\" title=\"1. Brew\"></a>1. Brew</h2><h3 id=\"1-介绍\"><a href=\"#1-介绍\" class=\"headerlink\" title=\"1. 介绍\"></a>1. 介绍</h3><p>Homebrew是一款Mac OS平台下的软件包管理工具，拥有安装、卸载、更新、查看、搜索等很多实用的功能。简单的一条指令，就可以实现包管理，而不用你关心各种依赖和文件路径的情况，十分方便快捷。</p>\n<p>注意事项</p>\n<ul>\n<li>Homebrew会将软件包安装到独立目录,一般为<code>/usr/local/Cellar</code>目录.</li>\n<li>然后将文件软连接至执行路径,一般为<code>/usr/local/bin</code>目录.</li>\n</ul>\n<h3 id=\"2-常用命令\"><a href=\"#2-常用命令\" class=\"headerlink\" title=\"2. 常用命令\"></a>2. 常用命令</h3><ul>\n<li><code>brew install [包名]</code></li>\n<li><code>brew update</code></li>\n<li><code>brew update -verbose</code></li>\n<li><code>brew cleanup</code>:清理旧有软件包.</li>\n<li><code>brew doctor</code>:诊断Homebrew的问题.</li>\n<li><code>brew update-reset</code></li>\n</ul>\n<h3 id=\"3-brew-install-xx卡死问题\"><a href=\"#3-brew-install-xx卡死问题\" class=\"headerlink\" title=\"3. brew install xx卡死问题\"></a>3. <code>brew install xx</code>卡死问题</h3><p>一般都会卡死在<code>Updating Homebrew..</code>界面，原因是brew会使用github作为源，国内访问速度很有限。<br>解决的方法：</p>\n<ol>\n<li>按下<code>Control-c</code>，会停止更新，直接下载。这种方法可以临时使用，但是治标不治本。</li>\n<li>替换源</li>\n</ol>\n<p>使用 <code>brew install -verbose</code>查看brew安装时使用的源<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Fetching /usr/<span class=\"built_in\">local</span>/Homebrew/Library/Taps/homebrew/homebrew-core...</span><br><span class=\"line\">Fetching /usr/<span class=\"built_in\">local</span>/Homebrew...</span><br><span class=\"line\">Fetching /usr/<span class=\"built_in\">local</span>/Homebrew/Library/Taps/homebrew/homebrew-cask...</span><br></pre></td></tr></table></figure><br>可以看到，使用了<code>homebrew</code>, <code>homebrew-cask</code>,<code>homebrew-core</code>3个源，因此我们对这三个源进行替换，推荐使用<a href=\"http://mirrors.ustc.edu.cn/\" target=\"_blank\" rel=\"noopener\">中科大镜像源</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"string\">\"<span class=\"variable\">$(brew --repo)</span>\"</span> <span class=\"comment\"># `$(brew --repo)`是用来自动指向Homebrew的目录的</span></span><br><span class=\"line\">git remote <span class=\"built_in\">set</span>-url origin https://mirrors.ustc.edu.cn/brew.git</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"string\">\"<span class=\"variable\">$(brew --repo)</span>/Library/Taps/homebrew/homebrew-core\"</span></span><br><span class=\"line\">git remote <span class=\"built_in\">set</span>-url origin https://mirrors.ustc.edu.cn/homebrew-core.git</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"string\">\"<span class=\"variable\">$(brew --repo)</span>\"</span>/Library/Taps/homebrew/homebrew-cask</span><br><span class=\"line\">git remote <span class=\"built_in\">set</span>-url origin https://mirrors.ustc.edu.cn/homebrew-cask.git</span><br></pre></td></tr></table></figure>\n<p>参考<a href=\"http://mirrors.ustc.edu.cn/help/brew.git.html\" target=\"_blank\" rel=\"noopener\">Homebrew源使用帮助</a>.<br>参考<a href=\"http://mirrors.ustc.edu.cn/help/homebrew-core.git.html\" target=\"_blank\" rel=\"noopener\">Homebrew Core源使用帮助</a>.<br>参考<a href=\"http://mirrors.ustc.edu.cn/help/homebrew-cask.git.html\" target=\"_blank\" rel=\"noopener\">Homebrew Cask源使用帮助</a>.</p>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><p>[1] <a href=\"https://www.cnblogs.com/tp0829/p/Homebrew.html\" target=\"_blank\" rel=\"noopener\">[Linux实践] macOS平台Homebrew更新brew update卡死,完美解决</a></p>\n","link":"","permalink":"https://stevehuge.github.io/2020/07/27/MacBook%E4%BD%BF%E7%94%A8/","categories":[],"tags":[{"name":"开发工具","slug":"开发工具","permalink":"https://stevehuge.github.io/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"},{"name":"MacBook","slug":"MacBook","permalink":"https://stevehuge.github.io/tags/MacBook/"},{"name":"环境搭建","slug":"环境搭建","permalink":"https://stevehuge.github.io/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"}]},{"title":"Redis数据类型","date":"2020-07-27T13:13:41.000Z","path":"2020/07/27/Redis数据类型/","content":"<h1 id=\"1-什么是Redis\"><a href=\"#1-什么是Redis\" class=\"headerlink\" title=\"1. 什么是Redis\"></a>1. 什么是Redis</h1><p>Redis 是一个开源（BSD许可）的，内存中的数据结构存储系统，它可以用作数据库、缓存和消息中间件。 它支持多种类型的数据结构，如 <a href=\"http://www.redis.cn/topics/data-types-intro.html#strings\" target=\"_blank\" rel=\"noopener\">字符串（strings）</a>， <a href=\"http://www.redis.cn/topics/data-types-intro.html#hashes\" target=\"_blank\" rel=\"noopener\">散列（hashes）</a>， <a href=\"http://www.redis.cn/topics/data-types-intro.html#lists\" target=\"_blank\" rel=\"noopener\">列表（lists）</a>， <a href=\"http://www.redis.cn/topics/data-types-intro.html#sets\" target=\"_blank\" rel=\"noopener\">集合（sets）</a>， <a href=\"http://www.redis.cn/topics/data-types-intro.html#sorted-sets\" target=\"_blank\" rel=\"noopener\">有序集合（sorted sets）</a> 与范围查询， <a href=\"http://www.redis.cn/topics/data-types-intro.html#bitmaps\" target=\"_blank\" rel=\"noopener\">bitmaps</a>， <a href=\"http://www.redis.cn/topics/data-types-intro.html#hyperloglogs\" target=\"_blank\" rel=\"noopener\">hyperloglogs</a> 和 <a href=\"http://www.redis.cn/commands/geoadd.html\" target=\"_blank\" rel=\"noopener\">地理空间（geospatial）</a> 索引半径查询。 Redis 内置了 <a href=\"http://www.redis.cn/topics/replication.html\" target=\"_blank\" rel=\"noopener\">复制（replication）</a>，<a href=\"http://www.redis.cn/commands/eval.html\" target=\"_blank\" rel=\"noopener\">LUA脚本（Lua scripting）</a>， <a href=\"http://www.redis.cn/topics/lru-cache.html\" target=\"_blank\" rel=\"noopener\">LRU驱动事件（LRU eviction）</a>，<a href=\"http://www.redis.cn/topics/transactions.html\" target=\"_blank\" rel=\"noopener\">事务（transactions）</a> 和不同级别的 <a href=\"http://www.redis.cn/topics/persistence.html\" target=\"_blank\" rel=\"noopener\">磁盘持久化（persistence）</a>， 并通过 <a href=\"http://www.redis.cn/topics/sentinel.html\" target=\"_blank\" rel=\"noopener\">Redis哨兵（Sentinel）</a>和自动 <a href=\"http://www.redis.cn/topics/cluster-tutorial.html\" target=\"_blank\" rel=\"noopener\">分区（Cluster）</a>提供高可用性（high availability）。</p>\n<a id=\"more\"></a>\n<h1 id=\"2-Redis数据类型\"><a href=\"#2-Redis数据类型\" class=\"headerlink\" title=\"2. Redis数据类型\"></a>2. Redis数据类型</h1><h2 id=\"z-key的一些操作\"><a href=\"#z-key的一些操作\" class=\"headerlink\" title=\"z. key的一些操作\"></a>z. key的一些操作</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 设置键值</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> key val </span><br><span class=\"line\"><span class=\"comment\"># 获取键对应的值</span></span><br><span class=\"line\">get key</span><br><span class=\"line\"><span class=\"comment\"># 删除键值对</span></span><br><span class=\"line\">del key</span><br><span class=\"line\"><span class=\"comment\"># 设置key的超时时间，单位是秒</span></span><br><span class=\"line\">expire key seconds</span><br><span class=\"line\"><span class=\"comment\"># 查看键对应的超时时间，返回单位是秒</span></span><br><span class=\"line\">ttl key</span><br><span class=\"line\"><span class=\"comment\"># 设置key的超时时间，单位是毫秒</span></span><br><span class=\"line\">pexpire key milliseconds</span><br><span class=\"line\"><span class=\"comment\"># 查看键对应的超时时间，返回单位是毫秒</span></span><br><span class=\"line\">pttl key</span><br><span class=\"line\"><span class=\"comment\"># 判断key是否存在</span></span><br><span class=\"line\">exists key</span><br><span class=\"line\"><span class=\"comment\"># 获取所有key</span></span><br><span class=\"line\">keys *</span><br><span class=\"line\"><span class=\"comment\"># 获取满足特定模式的key</span></span><br><span class=\"line\">keys pattern</span><br><span class=\"line\"><span class=\"comment\"># 换DB, Redis有16个Database，下标为0-15，默认处于第0个</span></span><br><span class=\"line\">select index</span><br><span class=\"line\"><span class=\"comment\"># 将key移动到指定DB</span></span><br><span class=\"line\">move key index</span><br><span class=\"line\"><span class=\"comment\"># 获取value的类型</span></span><br><span class=\"line\"><span class=\"built_in\">type</span> key</span><br></pre></td></tr></table></figure>\n<h2 id=\"a-String\"><a href=\"#a-String\" class=\"headerlink\" title=\"a. String\"></a>a. String</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 设置键值</span></span><br><span class=\"line\">SET key val </span><br><span class=\"line\"><span class=\"comment\"># 获取键对应的值</span></span><br><span class=\"line\">GET key</span><br><span class=\"line\"><span class=\"comment\"># 获取key对应的旧值，设置key的新值，如果旧值不存在，会返回nil</span></span><br><span class=\"line\">GETSET key val</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取key指定偏移量上的位（bit）</span></span><br><span class=\"line\">GETBIT key offset</span><br><span class=\"line\"><span class=\"comment\"># 设置key指定偏移量上的位（bit）</span></span><br><span class=\"line\">SETBIT key offset val</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 设置key-val，并且设置其过期时间（单位为秒）</span></span><br><span class=\"line\">SETEX key seconds val</span><br><span class=\"line\"><span class=\"comment\"># 设置key-val，只有key不存在时才能设置成功</span></span><br><span class=\"line\">SETNX key val</span><br><span class=\"line\"><span class=\"comment\"># 设置key-val，并且设置其过期时间（单位为毫秒）  </span></span><br><span class=\"line\">PSETEX key milliseconds val</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取多个key对应的值</span></span><br><span class=\"line\">MGET key1 [key2] ...</span><br><span class=\"line\"><span class=\"comment\"># 设置多个key-val对</span></span><br><span class=\"line\">MSET key1 val1 [key2 val2]...</span><br><span class=\"line\"><span class=\"comment\"># 设置多个key-val，仅在所有被设置的key都不存在时设置成功，只要里面有一个key存在，返回0表示设置失败，设置成功时返回1</span></span><br><span class=\"line\">MSETNX key1 val1 [key2 val2]...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取范围内的字符串（和Java不同，字符串的截取范围既包括startIndex，也包括endIndex）</span></span><br><span class=\"line\">GETRANGE key startIndex endIndex</span><br><span class=\"line\"><span class=\"comment\"># 使用val覆盖从偏移量offset开始的字符</span></span><br><span class=\"line\">SETRANGE key offset val</span><br><span class=\"line\"><span class=\"comment\"># 在key后追加val的值，如果key不存在，会设置key-val，此时APPEND命令相当于SET</span></span><br><span class=\"line\">APPEND key val</span><br><span class=\"line\"><span class=\"comment\"># 获取key对应的字符串长度，key不存在时返回0</span></span><br><span class=\"line\">STRLEN key </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># INCR 命令将 key 中储存的数字值增一，如果key不存在，按照初始值为0处理；如果key对应的值不是数字，会返回一个错误；</span></span><br><span class=\"line\"><span class=\"comment\"># 本操作的值限制在64bit内；INCR命令放在字符串中的原因是int值在Redis中以字符串的形式保存</span></span><br><span class=\"line\">INCR key</span><br><span class=\"line\"><span class=\"comment\"># 将key中存储的的数字加一个指定的数字increment</span></span><br><span class=\"line\">INCRBY key increment</span><br><span class=\"line\"><span class=\"comment\"># 将key中存储的数字值减一，和INCR功能类似</span></span><br><span class=\"line\">DECR key</span><br><span class=\"line\"><span class=\"comment\"># 将key中存储的的数字减一个指定的数字decrement</span></span><br><span class=\"line\">DECRBY key decrement</span><br></pre></td></tr></table></figure>\n<h2 id=\"b-List\"><a href=\"#b-List\" class=\"headerlink\" title=\"b. List\"></a>b. List</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 移出并获取列表的第一个元素</span></span><br><span class=\"line\">LPOP key</span><br><span class=\"line\"><span class=\"comment\"># 将一个或多个值插入到列表头部</span></span><br><span class=\"line\">LPUSH key value1 [value2]</span><br><span class=\"line\"><span class=\"comment\"># 将一个值插入到已存在的列表头部</span></span><br><span class=\"line\">LPUSHX key value</span><br><span class=\"line\"><span class=\"comment\"># 移除列表的最后一个元素，返回值为移除的元素</span></span><br><span class=\"line\">RPOP key</span><br><span class=\"line\"><span class=\"comment\"># 在列表中添加一个或多个值</span></span><br><span class=\"line\">RPUSH key value1 [value2]</span><br><span class=\"line\"><span class=\"comment\"># 为已存在的列表添加值</span></span><br><span class=\"line\">RPUSHX key value</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 通过索引获取列表中的元素</span></span><br><span class=\"line\">LINDEX key index</span><br><span class=\"line\"><span class=\"comment\"># 通过索引设置列表元素的值</span></span><br><span class=\"line\">LSET key index value</span><br><span class=\"line\"><span class=\"comment\"># 获取列表长度</span></span><br><span class=\"line\">LLEN key</span><br><span class=\"line\"><span class=\"comment\"># 获取列表指定范围内的元素</span></span><br><span class=\"line\">LRANGE key start stop</span><br><span class=\"line\"><span class=\"comment\"># 移除列表元素</span></span><br><span class=\"line\">LREM key count value</span><br><span class=\"line\"><span class=\"comment\"># 通过索引获取列表中的元素</span></span><br><span class=\"line\">LINDEX key index</span><br><span class=\"line\"><span class=\"comment\"># 在列表的元素前或者后插入元素</span></span><br><span class=\"line\">LINSERT key BEFORE|AFTER pivot value</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 对一个列表进行修剪(trim)，就是说，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除</span></span><br><span class=\"line\">LTRIM key start stop</span><br><span class=\"line\"><span class=\"comment\"># 移出并获取列表的第一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止</span></span><br><span class=\"line\">BLPOP key1 [key2 ] timeout</span><br><span class=\"line\"><span class=\"comment\"># 移出并获取列表的最后一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止</span></span><br><span class=\"line\">BRPOP key1 [key2 ] timeout</span><br></pre></td></tr></table></figure>\n<h2 id=\"c-Hash\"><a href=\"#c-Hash\" class=\"headerlink\" title=\"c. Hash\"></a>c. Hash</h2><p>Hash采用的数据结构是哈希表，每个hash中最多可以存2^31-1个键值对，约40多亿个</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将哈希表 key 中的字段 field 的值设为 value </span></span><br><span class=\"line\">HSET key field val</span><br><span class=\"line\"><span class=\"comment\"># 获取存储在哈希表中指定字段的值</span></span><br><span class=\"line\">HGET key field</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除一个或多个哈希表字段</span></span><br><span class=\"line\">HDEL key field1 [field2]</span><br><span class=\"line\"><span class=\"comment\"># 查看哈希表 key 中，指定的字段是否存在</span></span><br><span class=\"line\"></span><br><span class=\"line\">HEXISTS key field</span><br><span class=\"line\"><span class=\"comment\"># 获取所有哈希表中的字段</span></span><br><span class=\"line\">HKEYS key</span><br><span class=\"line\"><span class=\"comment\"># 获取哈希表中所有值</span></span><br><span class=\"line\">HVALS key</span><br><span class=\"line\"><span class=\"comment\"># 获取哈希表中字段的数量</span></span><br><span class=\"line\">HLEN key</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取在哈希表中指定 key 的所有字段和值</span></span><br><span class=\"line\">HGETALL key</span><br><span class=\"line\"><span class=\"comment\"># 同时将多个 field-value (域-值)对设置到哈希表 key 中</span></span><br><span class=\"line\">HMSET key field1 val1 [field2, val2]...</span><br><span class=\"line\"><span class=\"comment\"># 获取所有给定字段的值</span></span><br><span class=\"line\">HMGET key field1 [field2]...</span><br></pre></td></tr></table></figure>\n<h2 id=\"d-Set\"><a href=\"#d-Set\" class=\"headerlink\" title=\"d. Set\"></a>d. Set</h2><h2 id=\"e-ZSet\"><a href=\"#e-ZSet\" class=\"headerlink\" title=\"e. ZSet\"></a>e. ZSet</h2><h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p>[1] <a href=\"http://www.redis.cn/\" target=\"_blank\" rel=\"noopener\"><em>redis</em>中文官方网站</a></p>\n<p>[2] </p>\n","link":"","permalink":"https://stevehuge.github.io/2020/07/27/Redis%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/","categories":[],"tags":[{"name":"Redis","slug":"Redis","permalink":"https://stevehuge.github.io/tags/Redis/"},{"name":"分布式","slug":"分布式","permalink":"https://stevehuge.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"},{"name":"缓存","slug":"缓存","permalink":"https://stevehuge.github.io/tags/%E7%BC%93%E5%AD%98/"}]},{"title":"LaTeX简介及其在Mardown中的用法","date":"2017-11-04T14:21:11.000Z","path":"2017/11/04/LaTeX简介及其在Mardown中的用法/","content":"<p><img src=\"https://github.com/StephenHuge/Markdown_Pic/blob/master/Tools/LaTeX/top.jpg?raw=true\" alt=\"\"></p>\n<h1 id=\"1-LaTeX-是什么？\"><a href=\"#1-LaTeX-是什么？\" class=\"headerlink\" title=\"1. $\\LaTeX$是什么？\"></a>1. $\\LaTeX$是什么？</h1><p>在介绍$\\LaTeX$之前，我们得知道什么是$\\TeX$。</p>\n<h2 id=\"TeX\"><a href=\"#TeX\" class=\"headerlink\" title=\"$\\TeX$\"></a>$\\TeX$</h2><p>$\\TeX$（希腊语：/tɛx/，音译“泰赫”，文本模式下写作TeX），是一个由美国计算机教授高德纳（Donald Ervin Knuth）编写的功能强大的排版软件。它在学术界十分流行，特别是数学、物理学和计算机科学界。$\\TeX$被普遍认为是一个优秀的排版工具，特别是在处理复杂的数学公式时。利用诸如是$\\LaTeX$等终端软件，$\\TeX$就能够排版出精美的文本以帮助人们辨认和查找。</p>\n<p>高德纳（Donald Knuth,1938/01/10 -）最早开始自行编写 $\\TeX$ 的原因，是因为当时的排版技术十分粗糙，已经影响到他的巨著《计算机程序设计艺术》的印刷质量。他以典型的黑客思维模式，决定自行编写一个排版软件：$\\TeX$。他原本以为他只需要半年时间，在1978年下半年就能完成，但最终他用了超过十年时间，直到1989年$\\TeX$才最终停止修改。</p>\n<a id=\"more\"></a>\n<h2 id=\"LaTeX\"><a href=\"#LaTeX\" class=\"headerlink\" title=\"$\\LaTeX$\"></a>$\\LaTeX$</h2><p>$\\LaTeX$（/ˈlɑːtɛx/，常被读作/ˈlɑːtɛk/或/ˈleɪtɛk/），文字形式写作LaTeX，是一种基于$\\TeX$的排版系统，由美国计算机科学家莱斯利·兰伯特在20世纪80年代初期开发，利用这种格式系统的处理，即使用户没有排版和程序设计的知识也可以充分发挥由$\\TeX$所提供的强大功能，不必一一亲自去设计或校对，能在几天，甚至几小时内生成很多具有书籍质量的印刷品。对于生成复杂表格和数学公式，这一点表现得尤为突出。因此它非常适用于生成高印刷质量的科技和数学、化学类文档。这个系统同样适用于生成从简单的信件到完整书籍的所有其他种类的文档。<br>$\\LaTeX$使用$\\TeX$作为它的格式化引擎，当前的版本是$\\LaTeX2_ε$。</p>\n<p>$\\LaTeX$ 本质上是用编程语言写成的一个“$\\TeX$ 宏包”，它扩展了 $\\TeX$ 的功能，使我们很方便的逻辑的进行创作而不是专心于字体，缩进这些烦人的东西。</p>\n<h1 id=\"2-LaTeX-能干什么？\"><a href=\"#2-LaTeX-能干什么？\" class=\"headerlink\" title=\"2. $\\LaTeX$能干什么？\"></a>2. $\\LaTeX$能干什么？</h1><p>$\\LaTeX$能较为友好的在网页或者文档中显示出规范整洁的各类公式和符号，例如</p>\n<script type=\"math/tex; mode=display\">\n\\sum_{i=0}^n i^2 = \\frac{(n^2+n)(2n+1)}{6}</script><p>$\\log_3 G$， $\\Omega (N^2)$ <script type=\"math/tex\">x = \\dfrac{-b \\pm \\sqrt{b^2 - 4ac}}{2a}</script></p>\n<p>这些公式都是通过$\\LaTeX$实现的，对应的$\\LaTeX$语句如下：</p>\n<p><code>$$\\sum_{i=0}^n i^2 = \\frac{(n^2+n)(2n+1)}{6}$$</code></p>\n<p><code>$\\log_3 G$</code></p>\n<p><code>$\\Omega (N^2)$</code></p>\n<p><code>$$ x = \\dfrac{-b \\pm \\sqrt{b^2 - 4ac}}{2a} $$</code></p>\n<p>可以发现，有些公式和正常文字一样，有些却是在页面正中间。这是行内公式和行间公式的区别，对应到语法上就是行内公式使用<code>$formula$</code>，而行间公式使用<code>$$formula$$</code>， <code>formula</code>代表公式的内容。</p>\n<p>$\\LaTeX$的功能远不止这么简单，很多高级数学公式例如求和，求积以及一些复杂的物理公式都可以用其表示。</p>\n<h1 id=\"3-LaTeX-在Markdown中的用法\"><a href=\"#3-LaTeX-在Markdown中的用法\" class=\"headerlink\" title=\"3. $\\LaTeX$在Markdown中的用法\"></a>3. $\\LaTeX$在Markdown中的用法</h1><p>先说$\\LaTeX$的简单用法：</p>\n<ol>\n<li>在数学公式中，经常用到 <strong>上标和下标</strong>，在LaTeX语法中对应<code>^</code>和<code>-</code>。例如<code>x_i^2</code> : $x_i^2$, <code>\\log_2 N</code> : $\\log_2 N$。</li>\n<li><strong>分组</strong>，简单来说就是当遇到下标或者上标不是单字符时会用到，例如 $x_{a1}^2$, 用式子<code>x_a1^2</code>会得出错误的公式$x_a1^2$。由于这时<code>a</code>和<code>1</code>属于同一组，所以需要声明它们是一起的。$\\LaTeX$中使用大括号<code>{}</code>将同一组的符号括到一起。刚才的式子正确表示是<code>x_{a1}^2</code>。</li>\n<li><strong>括号</strong>，如果式子中本来就有括号<code>()[]{}</code>，那么使用时<code>()[]</code>正常使用即可，而<code>{}</code>在括号之前需要加转义符<code>\\</code>。例如$(2 + 3)[4 + 4]\\{5 + 6\\}$ : <code>(2 + 3)[4 + 4]\\{5 + 6\\}</code>。</li>\n<li><strong>分数</strong>，分数通过<code>\\frac{}{}</code>实现。例如 $\\frac{3}{5}$ : <code>\\frac{3}{5}</code>。稍微复杂的分数也能表示</li>\n</ol>\n<p><script type=\"math/tex\">\\frac{\\log_2 N + N^3}{\\ln N - 2N^2}</script> 式子是<code>\\frac{\\log_2 N + N^3}{\\ln N - 2N^2}</code>。</p>\n<p>在Markdown中可以使用<code>$formula$</code>或<code>$$formula$$</code>插入公式，也可以使用<code>\\\\(formula\\\\)</code>插入，但是由于Hexo使用的markdown解析引擎的问题，后一种时有出错，推荐使用第一种方式。</p>\n<h1 id=\"4-附录\"><a href=\"#4-附录\" class=\"headerlink\" title=\"4. 附录\"></a>4. 附录</h1><p> <strong>常见函数</strong>表达方法：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">函数名称</th>\n<th style=\"text-align:center\">函数符号</th>\n<th style=\"text-align:center\">表达方法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">根号</td>\n<td style=\"text-align:center\">$\\sqrt3$</td>\n<td style=\"text-align:center\"><code>\\sqrt3</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">求和</td>\n<td style=\"text-align:center\">$\\sum_{i=0}^N i$</td>\n<td style=\"text-align:center\"><code>\\sum_{i=0}^N i</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">求积</td>\n<td style=\"text-align:center\">$\\prod_{0}^5 a$</td>\n<td style=\"text-align:center\"><code>\\prod_{0}^5 a</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">积分</td>\n<td style=\"text-align:center\">$\\int_{0}^\\infty x^3$</td>\n<td style=\"text-align:center\"><code>\\int_{0}^\\infty x^3</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">多次开方</td>\n<td style=\"text-align:center\">$\\sqrt[3]{\\frac xy}$</td>\n<td style=\"text-align:center\"><code>\\sqrt[3]{\\frac xy}</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">三角函数</td>\n<td style=\"text-align:center\">$\\sin$, $\\cos$, $\\tan$</td>\n<td style=\"text-align:center\"><code>\\sin</code>, <code>\\cos</code>, <code>\\tan</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">极限</td>\n<td style=\"text-align:center\">$\\lim_{x\\to0}$</td>\n<td style=\"text-align:center\"><code>\\lim_{x\\to0}</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">对数函数</td>\n<td style=\"text-align:center\">$\\log_5 x$, $\\ln y$</td>\n<td style=\"text-align:center\"><code>\\log_5 x</code>, <code>\\ln y</code></td>\n</tr>\n</tbody>\n</table>\n</div>\n<p> <strong>常见符号</strong>表示方法：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">符号名称</th>\n<th style=\"text-align:center\">符号</th>\n<th style=\"text-align:center\">表达方法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">希腊字母</td>\n<td style=\"text-align:center\">$ \\alpha$, $\\beta$, …, $\\omega$</td>\n<td style=\"text-align:center\">\\alpha, \\beta, …, \\omega</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">希腊字母大写</td>\n<td style=\"text-align:center\">$\\Gamma$, $\\Delta$, …, $\\Omega$</td>\n<td style=\"text-align:center\">\\Gamma, \\Delta, …, \\Omega</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">比较符</td>\n<td style=\"text-align:center\">$\\lt$ $\\gt$ $\\le$ $\\ge$ $\\neq$</td>\n<td style=\"text-align:center\">\\lt \\gt \\le \\ge \\neq</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">运算符</td>\n<td style=\"text-align:center\">$\\times$ $\\div$ $\\pm$ $\\mp$</td>\n<td style=\"text-align:center\">\\times \\div \\pm \\mp</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">常见数学符号1</td>\n<td style=\"text-align:center\">$\\cup$ $\\cap$ $\\setminus$ $\\subset$ $\\subseteq$ $\\subsetneq$ $\\supset$ $\\in$ $\\notin$ $\\emptyset$ $\\varnothing$</td>\n<td style=\"text-align:center\">\\cup \\cap \\setminus \\subset \\subseteq \\subsetneq \\supset \\in \\notin \\emptyset \\varnothing</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">常见数学符号2</td>\n<td style=\"text-align:center\">$\\land$ $\\lor$ $\\lnot$ $\\forall$ $\\exists$ $\\top$ $\\bot$ $\\vdash$ $\\vDash$</td>\n<td style=\"text-align:center\">\\land \\lor \\lnot \\forall \\exists \\top \\bot \\vdash \\vDash</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">箭头</td>\n<td style=\"text-align:center\">$\\to$ $\\rightarrow$ $\\leftarrow$ $\\Rightarrow$ $\\Leftarrow$ $\\mapsto$</td>\n<td style=\"text-align:center\">\\to \\rightarrow \\leftarrow \\Rightarrow \\Leftarrow \\mapsto</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>在<a href=\"http://docs.mathjax.org/en/latest/tex.html#supported-latex-commands\" target=\"_blank\" rel=\"noopener\"> list of currently supported LATEXLATEX commands</a>中有更多$\\LaTeX$ 支持的语法。</p>\n<h1 id=\"5-遇到的问题\"><a href=\"#5-遇到的问题\" class=\"headerlink\" title=\"5. 遇到的问题\"></a>5. 遇到的问题</h1><p>刚开始使用的时候，经常发现页面中的公式解析出错，例如<code>_</code>在Hexo中会生成<em>斜体的字符</em>，在$\\LaTeX$中生成的$是_{下标}$。这就导致了矛盾。<br>可行的解决方法有两个：</p>\n<ul>\n<li>更换Hexo的markdown引擎。Hexo自带的引擎是 <code>hexo-renderer-marked</code>，可以换成功能更强大的Pandoc。   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm uninstall hexo-renderer-marked --save   &#x2F;&#x2F; 卸载旧的引擎</span><br><span class=\"line\">npm install hexo-renderer-pandoc --save     &#x2F;&#x2F; 安装pandoc</span><br></pre></td></tr></table></figure></li>\n<li>手动修改Hexo渲染源码</li>\n</ul>\n<p>修改hexo的渲染源码: 打开<code>nodes_modules/marked/lib/marked.js</code>:<br>第一步: 去掉\\\\的额外转义。 先备份一下，然后修改第449行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">escape: &#x2F;^\\\\([\\\\&#96;*&#123;&#125;\\[\\]()# +\\-.!_&gt;])&#x2F;,</span><br></pre></td></tr></table></figure><br>改为:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">escape: &#x2F;^\\\\([&#96;*&#123;&#125;\\[\\]()# +\\-.!_&gt;])&#x2F;,</span><br></pre></td></tr></table></figure><br>这样就会去掉\\\\的转义了。<br>第二步:将<code>em</code>标签对应的符号中，去掉<code>_</code>。第459行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">em: &#x2F;^\\b_((?:[^_]|__)+?)_\\b|^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)&#x2F;,</span><br></pre></td></tr></table></figure><br>修改为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">em:&#x2F;^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)&#x2F;,</span><br></pre></td></tr></table></figure><br>因为markdown中有<code>*</code>可以表示斜体，<code>_</code>就去掉了,这样问题就解决了。</p>\n<p>这部分参考天空的城的<a href=\"http://shomy.top/2016/10/22/hexo-markdown-mathjax/#\" target=\"_blank\" rel=\"noopener\">Hexo下mathjax的转义问题</a>。</p>\n<h1 id=\"参考网站\"><a href=\"#参考网站\" class=\"headerlink\" title=\"参考网站\"></a>参考网站</h1><p>[1] <a href=\"https://www.mathjax.org/\" target=\"_blank\" rel=\"noopener\">mathjax官网</a><br>[2] <a href=\"https://zh.wikipedia.org/wiki/TeX\" target=\"_blank\" rel=\"noopener\">TeX维基百科</a><br>[3] <a href=\"https://zh.wikipedia.org/wiki/LaTeX\" target=\"_blank\" rel=\"noopener\">LaTeX维基百科</a><br>[3] <a href=\"https://github.com/hexojs/hexo/issues/524\" target=\"_blank\" rel=\"noopener\">Github上的issue</a><br>[4] <a href=\"https://math.meta.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference\" target=\"_blank\" rel=\"noopener\">MathJax basic tutorial and quick reference</a><br>[5] <a href=\"https://www.zhihu.com/question/31298277/answer/275151599\" target=\"_blank\" rel=\"noopener\">知乎上的公式是怎么打出来的？</a><br>[6] <a href=\"https://segmentfault.com/q/1010000003987383\" target=\"_blank\" rel=\"noopener\">hexo 如何解决markdown下划线要加反斜杠，以及如何使用其他markdown的渲染引擎？</a><br>[7] <a href=\"http://shomy.top/2016/10/22/hexo-markdown-mathjax/#\" target=\"_blank\" rel=\"noopener\">Hexo下mathjax的转义问题</a><br>[8] <a href=\"http://2wildkids.com/2016/10/06/%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86Hexo%E5%92%8CMathJax%E7%9A%84%E5%85%BC%E5%AE%B9%E9%97%AE%E9%A2%98/\" target=\"_blank\" rel=\"noopener\">如何处理Hexo和MathJax的兼容问题</a><br>[9] <a href=\"https://www.jianshu.com/p/68e6f82d88b7\" target=\"_blank\" rel=\"noopener\">使用LaTex添加公式到Hexo博客里</a></p>\n","link":"","permalink":"https://stevehuge.github.io/2017/11/04/LaTeX%E7%AE%80%E4%BB%8B%E5%8F%8A%E5%85%B6%E5%9C%A8Mardown%E4%B8%AD%E7%9A%84%E7%94%A8%E6%B3%95/","categories":[],"tags":[{"name":"工具","slug":"工具","permalink":"https://stevehuge.github.io/tags/%E5%B7%A5%E5%85%B7/"},{"name":"LaTeX","slug":"LaTeX","permalink":"https://stevehuge.github.io/tags/LaTeX/"},{"name":"markdown","slug":"markdown","permalink":"https://stevehuge.github.io/tags/markdown/"}]},{"title":"Java中的Comparable接口和Comparator接口","date":"2017-10-19T14:00:53.000Z","path":"2017/10/19/Java中的Comparable接口和Comparator接口/","content":"<p><img src=\"https://github.com/StephenHuge/Markdown_Pic/blob/master/Java/JDK%E6%BA%90%E7%A0%81/Comparable&amp;Comparator/top.jpg?raw=true\" alt=\"\"></p>\n<p>最近Algorithms 4 课上提到了排序。趁着这个机会，梳理一下。<br><a id=\"more\"></a></p>\n<h1 id=\"1-介绍\"><a href=\"#1-介绍\" class=\"headerlink\" title=\"1. 介绍\"></a>1. 介绍</h1><p><code>Comparable&lt;T&gt;</code>接口和<code>Comparator&lt;T&gt;</code>接口都是JDK中提供的和比较相关的接口。使用它们可以对<strong>对象进行比较大小，排序</strong>等操作。这算是之后排序的先导知识吧。<br><code>Comparable</code>， 字面意思是“可以比较的”，所以实现它的类的多个实例应该可以相互比较“大小”或者“高低”等等。<br><code>Comparator</code>， 字面意思是“比较仪，比较器”， 它应该是专门用来比较用的“工具”。</p>\n<h1 id=\"2-Comparable\"><a href=\"#2-Comparable\" class=\"headerlink\" title=\"2. Comparable\"></a>2. Comparable</h1><p><code>Comparable&lt;T&gt;</code>接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compareTo</span><span class=\"params\">(T o)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>首先看看JDK中怎么说的：</p>\n<blockquote>\n<p> This interface imposes a total ordering on the objects of each class that implements it.  This ordering is referred to as the class’s <i>natural ordering</i>, and the class’s <tt>compareTo</tt> method is referred to as its <i>natural comparison method</i>.<p></p>\n</blockquote>\n<p>大意是: 任何实现这个接口的类，其多个实例能以固定的次序进行排列。次序具体由接口中的方法<code>compareTo</code>方法决定。  </p>\n<blockquote>\n<p>Lists (and arrays) of objects that implement this interface can be sorted automatically by {@link Collections#sort(List) Collections.sort} (and {@link Arrays#sort(Object[]) Arrays.sort}).  </p>\n</blockquote>\n<p>如果某个类实现了这个接口，则它的<code>List</code>或数组都能使用<code>Collections.sort()</code>或<code>Arrays.sort()</code>进行排序。<br>常见的类如<code>Integer</code>, <code>Double</code>, <code>String</code>都实现了此类。一会儿会结合源码进行分析。</p>\n<h2 id=\"2-1-Integer类中Comparable接口的实现\"><a href=\"#2-1-Integer类中Comparable接口的实现\" class=\"headerlink\" title=\"2.1 Integer类中Comparable接口的实现\"></a>2.1 Integer类中Comparable接口的实现</h2><p>我们先来看<code>Integer</code>中的实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Integer</span> <span class=\"keyword\">extends</span> <span class=\"title\">Number</span> <span class=\"keyword\">implements</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">Integer</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> value;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compareTo</span><span class=\"params\">(Integer anotherInteger)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> compare(<span class=\"keyword\">this</span>.value, anotherInteger.value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (x &lt; y) ? -<span class=\"number\">1</span> : ((x == y) ? <span class=\"number\">0</span> : <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">compareUnsigned</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> compare(x + MIN_VALUE, y + MIN_VALUE);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>我们只贴出了和比较相关的方法。<br>可以看到，<code>compareTo</code>方法其中调用了<code>compare</code>方法，这是JDK1.7增加的方法。在<code>Integer</code>中新增这个方法是为了减少不必要的自动装箱拆箱。传入<code>compare</code>方法的是两个<code>Integer</code>的值<code>x</code>和<code>y</code>。<br>如果<code>x &lt; y</code>， 返回<code>-1</code>；如果<code>x = y</code>， 返回<code>0</code>；如果<code>x &gt; y</code>， 返回<code>1</code>。<br>顺便一说，JDK中的实现非常简洁，只有一行代码， 当判断情况有三种时，使用这种嵌套的判断 <code>x ? a : b</code> 可以简洁不少，这是该学习的。</p>\n<p>后面的<code>compareUnsigned</code>是JDK1.8新加入的方法, 用来比较无符号数。这里的无符号数意思是默认二进制最高位不再作为符号位，而是计入数的大小。<br>其实现是</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">compareUnsigned</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> compare(x + MIN_VALUE, y + MIN_VALUE);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>直接为每个值加了<code>Integer</code>的最小值 -2<sup>31</sup>。我们知道Java中<code>int</code>类型为4个字节，共32位。符号位占用一位的话，则其范围为-2<sup>31</sup> 到2<sup>31</sup> - 1。<br>使用此方法时，所有正数都比负数小。最大值为 <code>-1</code>，因为 <code>-1</code>的二进制所有位均为 1。<br>也就是<code>1111 1111 1111 1111 1111 1111 1111 1111</code> &gt; 其它任何32位数。</p>\n<p>关于编码可参考此篇博文<a href=\"https://stephenhuge.github.io/2017/10/18/计算机编码简介/\" target=\"_blank\" rel=\"noopener\">计算机编码简介</a></p>\n<h2 id=\"2-2-String类型的compareTo方法\"><a href=\"#2-2-String类型的compareTo方法\" class=\"headerlink\" title=\"2.2 String类型的compareTo方法\"></a>2.2 String类型的compareTo方法</h2><p>看完<code>Integer</code>后，我们再来看<code>String</code>中<code>compareTo</code>的实现方式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">String</span></span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"keyword\">implements</span> <span class=\"title\">java</span>.<span class=\"title\">io</span>.<span class=\"title\">Serializable</span>, <span class=\"title\">Comparable</span>&lt;<span class=\"title\">String</span>&gt;, <span class=\"title\">CharSequence</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/** The value is used for character storage. */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">char</span> value[];     <span class=\"comment\">// String的值</span></span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compareTo</span><span class=\"params\">(String anotherString)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len1 = value.length;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len2 = anotherString.value.length;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> lim = Math.min(len1, len2);     <span class=\"comment\">// limit， 表示两个String中长度较小的String长度</span></span><br><span class=\"line\">        <span class=\"keyword\">char</span> v1[] = value;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> v2[] = anotherString.value;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> k = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (k &lt; lim) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">char</span> c1 = v1[k];</span><br><span class=\"line\">            <span class=\"keyword\">char</span> c2 = v2[k];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (c1 != c2) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> c1 - c2;     <span class=\"comment\">// 如果char不相同，则取其差值</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            k++;    <span class=\"comment\">// 如果char值相同，则继续往后比较</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> len1 - len2;     <span class=\"comment\">// 如果所有0 ~ (lim - 1)的char均相同，则比较两个String的长短</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 字面意思是对大小写不敏感的比较器</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Comparator&lt;String&gt; CASE_INSENSITIVE_ORDER</span><br><span class=\"line\">                                         = <span class=\"keyword\">new</span> CaseInsensitiveComparator();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CaseInsensitiveComparator</span></span></span><br><span class=\"line\"><span class=\"class\">            <span class=\"keyword\">implements</span> <span class=\"title\">Comparator</span>&lt;<span class=\"title\">String</span>&gt;, <span class=\"title\">java</span>.<span class=\"title\">io</span>.<span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">8575799808933029326L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(String s1, String s2)</span> </span>&#123;  </span><br><span class=\"line\">            <span class=\"keyword\">int</span> n1 = s1.length();</span><br><span class=\"line\">            <span class=\"keyword\">int</span> n2 = s2.length();</span><br><span class=\"line\">            <span class=\"keyword\">int</span> min = Math.min(n1, n2);     <span class=\"comment\">// 和上面类似，均是取两个String间的最短长度</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; min; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">char</span> c1 = s1.charAt(i);</span><br><span class=\"line\">                <span class=\"keyword\">char</span> c2 = s2.charAt(i);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (c1 != c2) &#123;</span><br><span class=\"line\">                    c1 = Character.toUpperCase(c1); <span class=\"comment\">// 统一换成大写</span></span><br><span class=\"line\">                    c2 = Character.toUpperCase(c2); <span class=\"comment\">// 统一换成大写</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (c1 != c2) &#123;     <span class=\"comment\">// 大写如果不相等则再换为小写试试</span></span><br><span class=\"line\">                        c1 = Character.toLowerCase(c1);</span><br><span class=\"line\">                        c2 = Character.toLowerCase(c2);</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (c1 != c2) &#123;     <span class=\"comment\">// 到此处则确定不相等</span></span><br><span class=\"line\">                            <span class=\"comment\">// No overflow because of numeric promotion</span></span><br><span class=\"line\">                            <span class=\"keyword\">return</span> c1 - c2;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> n1 - n2;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/** Replaces the de-serialized object. */</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> Object <span class=\"title\">readResolve</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> CASE_INSENSITIVE_ORDER; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// String的方法，可以直接使用这个方法和其它String进行比较，</span></span><br><span class=\"line\">    <span class=\"comment\">// 内部实现是调用内部比较器的compare方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compareToIgnoreCase</span><span class=\"params\">(String str)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> CASE_INSENSITIVE_ORDER.compare(<span class=\"keyword\">this</span>, str);</span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>String</code>中的关于<code>compare</code>的方法相对复杂一点，但还是比较简单。我们先不看其他的代码，只重点关注<code>compareTo</code>方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compareTo</span><span class=\"params\">(String anotherString)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len1 = value.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len2 = anotherString.value.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> lim = Math.min(len1, len2);     <span class=\"comment\">// limit， 表示两个String中长度较小的String长度</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> v1[] = value;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> v2[] = anotherString.value;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> k = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (k &lt; lim) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> c1 = v1[k];</span><br><span class=\"line\">        <span class=\"keyword\">char</span> c2 = v2[k];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c1 != c2) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> c1 - c2;     <span class=\"comment\">// 如果char不相同，则取其差值</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        k++;    <span class=\"comment\">// 如果char值相同，则继续往后比较</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> len1 - len2;     <span class=\"comment\">// 如果所有0 ~ (lim - 1)的char均相同，则比较两个String的长短</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>内容很简洁，就是取两个<code>String</code>的长度中较小的，作为限定值(<code>lim</code>)。之后对数组下标为从<code>0</code>到<code>lim - 1</code>的<code>char</code>变量进行遍历比较，如果遇到不相同的值，返回其差值。一般我们只用其正负性，如果返回负数则说明第一个对象比第二个对象“小”。<br>例如比较 <code>&quot;abc&quot;</code>和<code>&quot;bcd&quot;</code>，当对各自第一个字符<code>&#39;a&#39;</code>和 <code>&#39;b&#39;</code>进行比较时，发现 <code>&#39;a&#39; != &#39;b&#39;</code>，则返回 <code>&#39;a&#39; - &#39;b&#39;</code> ，这个值是负数， <code>char</code>类型的<code>-1</code>，Java会自动将其类型强转为<code>int</code>型。最后得出结论<code>&quot;abc&quot;</code>比<code>&quot;bcd&quot;</code>小。</p>\n<h1 id=\"3-Comparator\"><a href=\"#3-Comparator\" class=\"headerlink\" title=\"3. Comparator\"></a>3. Comparator</h1><p><code>Comparator&lt;T&gt;</code>接口<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Comparator</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(T o1, T o2)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>这是一个外部排序接口，它的功能是规定“比较大小”的方式。实现它的类可以作为参数传入<code>Collections.sort()</code>或<code>Arrays.sort()</code>，使用它的比较方式进行排序。<br><strong>它可以为没有实现<code>Comparable</code>接口的类提供排序方式。</strong><br><code>String</code>类中以及<code>Array</code>类等都有实现此接口的内部类。</p>\n<p>在上面<code>String</code>的源码中就有一个内部的自定义<code>Comparator</code>类<code>CaseInsensitiveComparator</code>， 我们看看它的源码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Comparator&lt;String&gt; CASE_INSENSITIVE_ORDER</span><br><span class=\"line\">                                         = <span class=\"keyword\">new</span> CaseInsensitiveComparator();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CaseInsensitiveComparator</span></span></span><br><span class=\"line\"><span class=\"class\">            <span class=\"keyword\">implements</span> <span class=\"title\">Comparator</span>&lt;<span class=\"title\">String</span>&gt;, <span class=\"title\">java</span>.<span class=\"title\">io</span>.<span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">8575799808933029326L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(String s1, String s2)</span> </span>&#123;  </span><br><span class=\"line\">            <span class=\"keyword\">int</span> n1 = s1.length();</span><br><span class=\"line\">            <span class=\"keyword\">int</span> n2 = s2.length();</span><br><span class=\"line\">            <span class=\"keyword\">int</span> min = Math.min(n1, n2);     <span class=\"comment\">// 和上面类似，均是取两个String间的最短长度</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; min; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">char</span> c1 = s1.charAt(i);</span><br><span class=\"line\">                <span class=\"keyword\">char</span> c2 = s2.charAt(i);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (c1 != c2) &#123;</span><br><span class=\"line\">                    c1 = Character.toUpperCase(c1); <span class=\"comment\">// 统一换成大写</span></span><br><span class=\"line\">                    c2 = Character.toUpperCase(c2); <span class=\"comment\">// 统一换成大写</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (c1 != c2) &#123;     <span class=\"comment\">// 大写如果不相等则再换为小写试试</span></span><br><span class=\"line\">                        c1 = Character.toLowerCase(c1);</span><br><span class=\"line\">                        c2 = Character.toLowerCase(c2);</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (c1 != c2) &#123;     <span class=\"comment\">// 到此处则确定不相等</span></span><br><span class=\"line\">                            <span class=\"comment\">// No overflow because of numeric promotion</span></span><br><span class=\"line\">                            <span class=\"keyword\">return</span> c1 - c2;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> n1 - n2;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/** Replaces the de-serialized object. */</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> Object <span class=\"title\">readResolve</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> CASE_INSENSITIVE_ORDER; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// String的方法，可以直接使用这个方法和其它String进行比较，</span></span><br><span class=\"line\">    <span class=\"comment\">// 内部实现是调用内部比较器的compare方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compareToIgnoreCase</span><span class=\"params\">(String str)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> CASE_INSENSITIVE_ORDER.compare(<span class=\"keyword\">this</span>, str);</span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>CaseInsensitiveComparator</code>, 字面意思是对大小写不敏感的比较器。<br>我们观察它的<code>compare</code>方法，可以发现，它和上面的<code>compareTo</code>方法实现类似，都是取两个<code>String</code>中长度较小的，作为限定值<code>min</code>，之后对数组下标为从<code>0</code>到<code>min - 1</code>的<code>char</code>变量进行遍历比较。和上面稍有不同的是，此处先将<code>char</code>字符统一换成大写（upper case）， 如果仍然不相等，再将其换为小写（lower case）比较。一个字母只有大写或者小写两种情形，如果这两种情况都不想等则确定不相等，返回其差值。如果限定值内所有的<code>char</code>都相等的话，再去比较两个<code>String</code>类型的长度。</p>\n<p>例如比较 <code>&quot;abC&quot;</code>和<code>&quot;ABc&quot;</code>，<code>compareTo</code>会直接返回 <code>&#39;a&#39; - &#39;A&#39;</code>，而<code>compareToIgnoreCase</code>方法由于使用了<code>CaseInsensitiveComparator</code>，比较结果最终会返回<code>true</code>。</p>\n<h1 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h1><p> 【1】<a href=\"http://blog.csdn.net/Yvonne8_5/article/details/50957079\" target=\"_blank\" rel=\"noopener\">Java源码学习之Integer类（二）——1.8新增的几个函数和变量</a></p>\n","link":"","permalink":"https://stevehuge.github.io/2017/10/19/Java%E4%B8%AD%E7%9A%84Comparable%E6%8E%A5%E5%8F%A3%E5%92%8CComparator%E6%8E%A5%E5%8F%A3/","categories":[],"tags":[{"name":"Java","slug":"Java","permalink":"https://stevehuge.github.io/tags/Java/"},{"name":"Sorting","slug":"Sorting","permalink":"https://stevehuge.github.io/tags/Sorting/"},{"name":"Comparable","slug":"Comparable","permalink":"https://stevehuge.github.io/tags/Comparable/"},{"name":"Comparator","slug":"Comparator","permalink":"https://stevehuge.github.io/tags/Comparator/"}]},{"title":"原码、反码和补码","date":"2017-10-18T14:00:53.000Z","path":"2017/10/18/原码、反码和补码/","content":"<p><img src=\"https://github.com/StephenHuge/Markdown_Pic/blob/master/%E7%BC%96%E7%A0%81/%E7%BC%96%E7%A0%81_top.jpg?raw=true\" alt=\"\"></p>\n<h1 id=\"1-原码、反码和补码\"><a href=\"#1-原码、反码和补码\" class=\"headerlink\" title=\"1. 原码、反码和补码\"></a>1. 原码、反码和补码</h1><p>首先我们知道，在计算机中，所有数都是以二进制存在，也就是<code>0</code>和<code>1</code>的组合。  </p>\n<p>但是通过研究二进制，人们发现了二进制并不能很好的和十进制对应起来。首先十进制中有正数和负数，而二进制中的负号<code>-</code>该如何表示呢？有人想到用二进制的最高位表示，此位为<code>0</code>则表示正数，<code>1</code>表示这个数为负数。</p>\n<a id=\"more\"></a>\n<h2 id=\"举个例子：\"><a href=\"#举个例子：\" class=\"headerlink\" title=\"举个例子：\"></a>举个例子：</h2><p><code>1</code>的二进制为<code>0001</code>，那么<code>-1</code>的二进制就是<code>1001</code>。</p>\n<p>但是直接这么表示就会出现刚才提到的对应问题。</p>\n<p>例如如果<code>1</code>和<code>-1</code>直接相加，则<code>1 + （-1） = 0</code>，十进制是没有问题的。而二进制表示为<code>0001 + 1001 = 1010 != 0</code>，所以不能直接使用这种方式做运算。而这种直接用最高位表示符号位，其他位表示数字的编码形式称为<strong>原码</strong>。</p>\n<p>原码不能解决这个问题，于是又出现了<strong>反码</strong>，反码是当这个数为负数时，原码除符号位外其他位取反。<code>1001（-1）</code>（原码）取反后为<code>1110</code>。</p>\n<p>继续进行刚才的计算，这次使用反码： （反码）<code>0001 （1） + 1110 （-1） = 1111</code> 。由于<code>1111</code>最高位为1，是负数，所以再次取反之后才是其真实值，取反后为<code>1000</code>，也就是<code>-0</code>。</p>\n<p>这能满足条件了，但是美中不足的是，<code>0</code>带了负号。唯一的问题其实就出现在<code>0</code>这个特殊的数值上。 虽然人们理解上<code>+0</code>和<code>-0</code>是一样的， 但是0带符号是没有任何意义的。 而且会有<code>0000</code>原和<code>1000</code>原两个编码表示<code>0</code>。怎么办呢？</p>\n<p>人们又想出了补码，它的定义是反码加<code>1</code>。<code>-1</code>的补码是 <code>1111</code>，以上的运算用补码表示就是<code>0001 （1） + 1111 （-1） = 0000 = 0</code>。神奇的发现，这个式子完美契合了十进制加法！<br>同时我们留出了<code>1000</code>，可以用它表示<code>-8</code></p>\n<p><code>(-1) + (-7) = (补码) 1111 + 1001 = 1000 = -8</code>。注意，由于此处的<code>-8</code>使用了之前<code>-0</code>的补码来表示，所以<code>-8</code>没有没有原码和反码表示（针对的四位，如果是八位，则没有原码和反码的是<code>-128</code>，依次类推）。</p>\n<p>使用补码, 不仅仅修复了<code>0</code>的符号以及存在两个编码的问题, 而且还能够多表示一个最低数. 这就是为什么4位二进制, 使用原码或反码表示的范围为<code>[-7, +7]</code>, 而使用补码表示的范围为<code>[-8, 7]</code>.</p>\n<p>推广到<code>k</code>位：在处理k位的有符号数时，用二进制补码的形式表示负整数<code>-n</code>(1 $\\le$ n $\\le$ $2^k - 1$)， 则补码的二进制值为$2^k - n$ 。非负整数<code>p</code>(0 $\\le$ p $\\le$ $2^{k - 1} - 1$)，只是简单的用k位二进制数表示<code>p</code>的值。因此对于给定的<code>k</code>位，我们可以通过二进制补码表示$-2^{k - 1}$到$2^{k - 1} - 1$的值。</p>\n<p><strong>总结</strong></p>\n<p>为了使数字在计算机中运算不出错，出现了原码，反码和补码。原码就是一个数的二进制表示，其中最高位为符号位，表示其正负。  </p>\n<p><img src=\"https://github.com/StephenHuge/Markdown_Pic/blob/master/Java/JDK%E6%BA%90%E7%A0%81/Comparable&amp;Comparator/%E5%8E%9F%E7%A0%81%E5%8F%8D%E7%A0%81%E8%A1%A5%E7%A0%81.jpg?raw=true\" alt=\"\"></p>\n<p>原码，反码和补码运算对比。</p>\n<p><img src=\"https://github.com/StephenHuge/Markdown_Pic/blob/master/Java/JDK%E6%BA%90%E7%A0%81/Comparable&amp;Comparator/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%8A%A0%E6%B3%95.jpg?raw=true\" alt=\"\"></p>\n<p>这就是简单的要用反码和补码的原因。</p>\n<h1 id=\"2-大数溢出问题\"><a href=\"#2-大数溢出问题\" class=\"headerlink\" title=\"2. 大数溢出问题\"></a>2. 大数溢出问题</h1><p><code>int</code>类型在32位系统中占4个字节、32bit，补码表示的的数据范围为：</p>\n<p>[10000000 00000000 00000000 00000000] ~ [01111111 11111111 11111111 11111111]</p>\n<p>[−2<sup>31</sup>,2<sup>31</sup>−1]<br>[-2147483648, 2147483647]</p>\n<p>在java中表示为：</p>\n<p>[Integer.MIN_VALUE, Integer.MAX_VALUE]</p>\n<p>与<code>byte</code>类型的表示一样，由于负数比正数多表示了一个数字。对下限取相反数后的数值会超过上限值，溢出到下限，因此下限的相反数与下限相等；对上限去相反数的数值为负值，该负值比下限的负值大1，在可以表示的范围内，因此上限的相反数是上限直接取负值。也就是</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a = Integer.MIN_VALUE;</span><br><span class=\"line\"><span class=\"keyword\">assert</span> a == -a; <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h1><p>【1】<a href=\"http://blog.csdn.net/u011080472/article/details/51280919\" target=\"_blank\" rel=\"noopener\">计算机原码、反码、补码详解</a></p>\n","link":"","permalink":"https://stevehuge.github.io/2017/10/18/%E5%8E%9F%E7%A0%81%E3%80%81%E5%8F%8D%E7%A0%81%E5%92%8C%E8%A1%A5%E7%A0%81/","categories":[],"tags":[{"name":"编码","slug":"编码","permalink":"https://stevehuge.github.io/tags/%E7%BC%96%E7%A0%81/"}]},{"title":"动态代理2","date":"2017-08-20T16:21:27.000Z","path":"2017/08/21/动态代理2/","content":"<p><img src=\"https://github.com/StephenHuge/Markdown_Pic/blob/master/Reflection%20&amp;%20Proxy/proxy_top.jpg?raw=true\" alt=\"代理模式\"></p>\n<h1 id=\"动态代理原理\"><a href=\"#动态代理原理\" class=\"headerlink\" title=\"动态代理原理\"></a>动态代理原理</h1><p>我们在上篇文章中提到通过调用<code>Proxy</code>类的<code>newProxyInstance()</code>方法生成了一个临时实例，这个实例就是我们需要的代理类。我们的代理类被动态的创建，省去了我们针对业务方法而手动实现如日志记录等功能。<br>我们继续深入，来详细看一下这个过程：<br><a id=\"more\"></a></p>\n<pre><code>    public static Object newProxyInstance(ClassLoader loader, Class&lt;?&gt;[] interfaces, \n                                                InvocationHandler h) {\n            ...        \n            //1. 获取传入的之前被代理类实现的接口\n            final Class&lt;?&gt;[] intfs = interfaces.clone();    \n            ...\n             //2. 生成设计好的代理类的Class对象\n            Class&lt;?&gt; cl = getProxyClass0(loader, intfs);   \n            ...\n            //3. 获取生成好代理类的带参构造方法，其中参数就是InvocationHandler接口的实例\n            final Constructor&lt;?&gt; cons = cl.getConstructor(constructorParams);   \n\n            final InvocationHandler ih = h; \n            ...\n            //4. 通过构造方法生成代理类实例\n            return cons.newInstance(new Object[]{h});   \n            ...\n    }\n</code></pre><p>这就是<code>Proxy</code>类<code>newProxyInstance</code>方法的核心逻辑，其中去除了一些判断和异常处理代码，这些都跟我们目前的讨论没有太大关系。<br>可以看出来，这里最重要的就是这一句：</p>\n<pre><code>    //2. 生成设计好的代理类的Class对象\n    Class&lt;?&gt; cl = getProxyClass0(loader, intfs);    \n</code></pre><p>生成了设计好的临时代理类的<code>Class</code>对象之后，我们可以使用反射获取它的构造方法进而生成它的实例，这个<code>Class</code>对象的具体生成方法是什么呢？<br>我们继续探究它的实现方式：</p>\n<pre><code>    /**\n     * 生成代理类的Class对象\n     */\n     private static Class&lt;?&gt; getProxyClass0(ClassLoader loader,\n                                               Class&lt;?&gt;... interfaces) {\n            ...\n            // If the proxy class defined by the given loader implementing\n            // the given interfaces exists, this will simply return the cached copy;\n            // otherwise, it will create the proxy class via the ProxyClassFactory\n\n            //使用缓存获取之前生成的Class对象，如果之前未生成，则使用ProxyClassFactory生成\n            return proxyClassCache.get(loader, interfaces);\n        }\n</code></pre><p>这里使用到了缓存技术，如果之前生成过该类的Class对象，直接通过缓存返回它。我们这是第一次生成，看注释中提到：</p>\n<pre><code>    If the proxy class defined by the given loader implementing \n    the given interfaces exists, this will simply return the cached copy;\n    otherwise, it will create the proxy class via the ProxyClassFactory\n</code></pre><p>意思是之前已经创建过这个代理类，那么直接使用缓存，未建立的话使用<code>ProxyClassFactory</code>类建立代理类，通过缓存类的代码，我们发现其中调用了<code>ProxyClassFactory</code>的<code>apply</code>方法。我们现在做的就是研究代理类的生成机理，所以来看看<code>ProxyClassFactory</code>。<br>我使用的是<code>eclipse</code>，使用快捷键：<code>Ctrl+Shift+T</code>打开搜索界面，输入<code>ProxyClassFactory</code>，找到这个类。这个类其实是<code>Proxy</code>类 的一个内部类，我们通过<code>eclipse</code>发现其中只有一个方法<code>apply</code>，看来就是它了，它的代码是：</p>\n<pre><code>    public Class&lt;?&gt; apply(ClassLoader loader, Class&lt;?&gt;[] interfaces) {\n        ...\n        //1. 生成指定的代理类的二进制数组\n        byte[] proxyClassFile = ProxyGenerator.generateProxyClass(\n        proxyName, interfaces, accessFlags);    \n        ...\n        //2. 通过生成的二进制数组proxyClassFile生成一个Class&lt;?&gt;类型的实例，这是一个native方法\n        return defineClass0(loader, proxyName,\n                        proxyClassFile, 0, proxyClassFile.length); \n    }\n</code></pre><p>和之前一样，略去了一些判断语句和生成细节等代码。<br>我们发现直接通过<code>ProxyGenerator</code>类的<code>generateProxyClass</code>方法得到了一个二进制文件，这个也就是我们平时说的<code>.class</code>文件。到此处已经比较清楚代理类的生成过程了，之后二进制文件的具体生成步骤不再跟进，有兴趣的读者可以继续深入研究。<br>最后根据这个<code>.class</code>文件通过虚拟机加载，解析，初始化生成代理类的<code>Class</code>类对象，最终，使用反射获取其构造方法后生成代理类的对象。  </p>\n<p>我们通过下面的图看可能会清晰一点：  </p>\n<p><img src=\"https://github.com/StephenHuge/Markdown_Pic/blob/master/Reflection%20&amp;%20Proxy/Proxy%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E5%9B%BE.jpg?raw=true\" alt=\"Proxy函数调用图\"></p>\n<p>其实用户接触的只有一个<code>newProxyInstance</code>方法，其余的方法都是层层调用被使用的。其实就具体就干了两件事：生成代理类<code>Class</code>对象和生成代理类对象，后者依赖于前者。<br>按照图中标注的顺序而且根据方法具体的行为来说：<br>a. 外部测试代码调用<code>Proxy</code>类的<code>newProxyInstance</code>方法<br>b. <code>newProxyInstance</code>方法中调用了<code>Proxy</code>类的<code>getProxyClass0</code>方法<br>c. <code>getProxyClass0</code>方法中调用<code>Proxy</code>类的内部类<code>ProxyClassFactory</code>类的<code>apply</code>方法<br>d. <code>ProxyClassFactory</code>类的<code>apply</code>方法中调用<code>ProxyGenerator</code>类的<code>generateProxyClass</code>方法，这步生成了一个二进制数组<br>e. <code>generateProxyClass</code>方法把二进制数组返回给<code>apply</code>方法<br>f. 之后<code>apply</code>方法继续调用<code>native</code>方法<code>defineClass0</code>，然后生成了一个<code>Class</code>类对象<br>g. <code>Class</code>对象返回给<code>apply</code>方法<br>h. <code>Class</code>对象返回给<code>getProxyClass0</code>方法<br>i. <code>Class</code>对象返回给<code>newProxyInstance</code>方法<br>j. <code>newProxyInstance</code>方法中使用返回的<code>Class</code>对象，通过反射获取其带参构造方法，之后生成一个代理类的对象，返回给测试类  </p>\n<p>具体行为对应的方法：<br><img src=\"https://github.com/StephenHuge/Markdown_Pic/blob/master/Reflection%20&amp;%20Proxy/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E5%85%B7%E4%BD%93%E6%96%B9%E6%B3%95%E4%BD%9C%E7%94%A8.jpg?raw=true\" alt=\"动态代理具体方法作用\"></p>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><p>[1] <a href=\"http://blog.csdn.net/luanlouis/article/details/24589193#t2\" target=\"_blank\" rel=\"noopener\">Java动态代理机制详解（JDK 和CGLIB，Javassist，ASM）</a>  </p>\n<p>[2] <a href=\"http://blog.csdn.net/zhangerqing/article/details/42504281\" target=\"_blank\" rel=\"noopener\">Java之美[从菜鸟到高手演练]之JDK动态代理的实现及原理）</a>  </p>\n<p>[3] <a href=\"https://mp.weixin.qq.com/s/t5pU_aHiqQt3yUJKgs4hqQ\" target=\"_blank\" rel=\"noopener\">JAVA 动态代理</a></p>\n","link":"","permalink":"https://stevehuge.github.io/2017/08/21/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%862/","categories":[],"tags":[{"name":"设计模式","slug":"设计模式","permalink":"https://stevehuge.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"},{"name":"Spring","slug":"Spring","permalink":"https://stevehuge.github.io/tags/Spring/"},{"name":"AOP","slug":"AOP","permalink":"https://stevehuge.github.io/tags/AOP/"},{"name":"Proxy","slug":"Proxy","permalink":"https://stevehuge.github.io/tags/Proxy/"}]},{"title":"动态代理1","date":"2017-08-20T12:40:27.000Z","path":"2017/08/20/动态代理1/","content":"<p><img src=\"https://github.com/StephenHuge/Markdown_Pic/blob/master/Reflection%20&amp;%20Proxy/proxy_top.jpg?raw=true\" alt=\"代理模式\"></p>\n<h1 id=\"0-代理模式\"><a href=\"#0-代理模式\" class=\"headerlink\" title=\"0. 代理模式\"></a>0. 代理模式</h1><p>代理模式是一个很常见的设计模式，简单来说就是代理类<code>Proxy</code>替被代理类做一些东西。其中具体又有静态代理和动态代理两种。<br><a id=\"more\"></a></p>\n<h2 id=\"1-静态代理\"><a href=\"#1-静态代理\" class=\"headerlink\" title=\"1. 静态代理\"></a>1. 静态代理</h2><p>现在移动支付在中国各个大中小城市都已经非常普及了，平时我们出去吃饭购物都可以使用支付宝或者微信支付轻松完成交易，而不再使用现金。我们现在就以这个作为例子来说明一下代理模式。<br>有两个角色：微信支付（<code>WeChatPay</code>）和银行（<code>Bank</code>），微信支付本质上就是银行的一个代理。每当你使用微信支付付款时，事实上是微信支付“代理”你和银行进行交互，最终完成了支付。两个类的代码如下：</p>\n<p>Bank.java</p>\n<pre><code>    public class Bank {\n        ...\n        public void pay() { //付款功能\n            ...\n        }\n        public void gathering() {   //收款功能\n            ...\n        }\n        ...\n    }\n</code></pre><p>WeChatPay.java</p>\n<pre><code>    public class WeChatPay {\n        ...\n        public void pay() { //付款功能\n            ...\n        }\n        public void gathering() {   //收款功能\n            ...\n        }\n        ...\n    }\n</code></pre><p>我们发现两个类的方法都是一样的，两个类的本质功能一致，都是对我们的财产进行管理，所以给它们抽象出一个共同的接口：<br>WealthManagement.java</p>\n<pre><code>    public interface WealthManagement {\n        public void pay();\n\n        public void gathering();\n    }\n</code></pre><p>然后让两个类均实现这个接口。同时由于微信支付是代理了银行的功能，事实上工作的实体是银行,所以一般它需要绑定一个银行类，我们改变后的代码是：<br>WeChatPay.java</p>\n<pre><code>    public class WeChatPay implements WealthManagement {\n        ...\n        private Bank bank = new Bank();\n\n        public void pay() { //付款功能\n            bank.pay();\n        }\n        public void gathering() {   //收款功能\n            bank.gathering();\n        }\n        ...\n    }\n</code></pre><p>一个最简单的微信支付模型出来了，它其中有一个银行类的成员变量，每当需要进行付款或者收款操作时，它都会调用银行的收款和付款方法。<br>看起来还不错，但是仍然有需要改进之处：<br>(1) 我们不希望在微信支付中固定某个银行，而是希望用户能在使用微信时手动的添加；<br>(2) 微信支付调用了银行的功能，我们希望给用户一些提示，告知他们正在使用微信支付代理而非原版的银行功能。<br>加上之后这两个请求之后，完整的微信支付功能如下：<br>WeChatPay.java</p>\n<pre><code>    public class WeChatPay implements WealthManagement {\n        //...\n        private Bank bank;\n\n        public WeChatPay(Bank bank) {\n            this.bank = bank;\n        }\n\n        public void pay() { //付款功能\n            System.out.println(&quot;您正在使用微信支付...&quot;);\n            bank.pay();\n            System.out.println(&quot;微信支付使用完毕...&quot;);\n        }\n        public void gathering() {   //收款功能\n            System.out.println(&quot;您正在使用微信支付...&quot;);\n            bank.gathering();\n            System.out.println(&quot;微信支付使用完毕...&quot;);\n        }\n        //...\n    }\n</code></pre><p>我们使用构造方法传入一个银行类变量<code>bank</code>，进行指定具体的银行，并且在微信支付的每个方法中都加入了提醒功能。<br>完整的银行代码：<br>Bank.java</p>\n<pre><code>    public class Bank implements WealthManagement {\n        //...\n        public void pay() { //付款功能\n            System.out.println(&quot;使用银行的付款功能&quot;);\n        }\n        public void gathering() {   //收款功能\n            System.out.println(&quot;使用银行的收款功能&quot;);\n        }\n        //...\n    }\n</code></pre><p>现在貌似可以使用了，我们写一个测试类<code>Test</code>测试一下：<br>Test.java</p>\n<pre><code>    public class Test {\n        public static void main(String[] args) {\n            Bank construction = new Bank();\n\n            WeChatPay wePay = new WeChatPay(construction);\n\n            wePay.pay();\n            System.out.println(&quot;----------&quot;);\n            wePay.gathering();\n        }\n    }\n</code></pre><p>打印结果:</p>\n<pre><code>您正在使用微信支付...\n使用银行的付款功能\n微信支付使用完毕...\n----------\n您正在使用微信支付...\n使用银行的收款功能\n微信支付使用完毕...\n</code></pre><p>这其实就是一个简单的代理模式的例子。被代理类（<code>Bank</code>类）和代理类（<code>WeChatPay</code>类）实现同一个接口，然后代理类（<code>WeChatPay</code>类）持有一个被代理类（<code>Bank</code>类）的成员变量。这样做两个类实现了同样的方法，代理类（<code>WeChatPay</code>类）中的方法会调用自己持有的被代理类（<code>Bank</code>类）对象的方法，相当于是“包装”了一下被代理类的方法。代理类（<code>WeChatPay</code>）做的就是在被代理类（<code>Bank</code>）的基础上加一点工作，它是为被代理类服务的。    </p>\n<p>这个例子中就是：微信支付<code>WeChatPay</code>代理银行<code>Bank</code>让用户进行财产管理操作，在我们使用微信支付的付款<code>pay</code>方法时，事实上调用的是<code>Bank</code>的<code>pay</code>方法，只不过这个过程在微信<code>WeChatPay</code>的<code>pay</code>方法的“代理”下完成，微信支付的<code>pay</code>方法对银行的<code>pay</code>方法进行了一下“包装”，在其前后添加了两个提醒的功能。  </p>\n<p><img src=\"https://github.com/StephenHuge/Markdown_Pic/blob/master/Reflection%20&amp;%20Proxy/银行_微信代理.jpg?raw=true\" alt=\"银行_微信代理\"></p>\n<p>这就是一个静态代理的简单的例子。想说明的一点就是：代理模式就是通过一个代理类来替一个正常工作的类完成额外的一些操作，这些操作对于被代理类来说可以完全不用知道，由代理类完成即可。<br>例如简单的日志打印模块，我们需要在业务操作之前之后打印相关数据的日志，输入为一个业务操作相关的实例。<br>我们用代理模式完成，只需要在代理类（日志打印模块）中传入这个实例（业务操作），通过业务操作实例的一些get方法获取一些数据，然后用代理类（日志打印模块）的打印方法打印出这些数据，之后再去调用正常的业务方法即可。  </p>\n<h3 id=\"原理分析以及静态代理的问题\"><a href=\"#原理分析以及静态代理的问题\" class=\"headerlink\" title=\"原理分析以及静态代理的问题\"></a><strong>原理分析以及静态代理的问题</strong></h3><p>静态代理是AOP（Aspect Oriented Programming， 面向切面编程）最简单的实现，想在多个相同实例的方法之前之后都加上点权限管理或者类似的功能，那么使用代理类就可以轻松完成而不用修改代码。  </p>\n<p>我们针对上面的例子深入分析：<br>当在代码阶段规定好了代理关系（微信支付代理银行支付，我们需要支付操作时，直接使用微信支付即可）后，微信支付类<code>WeChatPay</code>类通过编译器编译成<code>class</code>文件，当系统运行时，此<code>class</code>已经存在了。这种静态的代理模式固然在访问无法访问的资源，增强现有的接口业务功能方面有很大的优点，但是大量使用这种静态代理，会使我们系统内的类的规模增大，并且不易维护；<br>并且由于<code>WeChatPay</code>和<code>Bank</code>的功能 本质上是相同的，<code>WeChatPay</code>只是起到了中介的作用，这种代理在系统中的存在，导致系统结构比较臃肿和松散。<br>让我们把这个例子补充的更完整一点：对应到现实生活中就是除了使用微信支付进行付款和收款操作之外，我们有时可能还需要进行退款（<code>refund</code>）操作，如果继续使用之前的方法，操作就是：<br>（1） 在<code>WealthManagement</code>接口中添加<code>refund</code>方法；<br>（2） 在<code>Bank</code>类中实现<code>refund</code>方法；<br>（3） 在<code>WeChatPay</code>类中实现<code>refund</code>方法。  </p>\n<p>实现<code>refund</code>方法的WeChatPay.java</p>\n<pre><code>    public class WeChatPay implements WealthManagement {\n        //...\n\n        public void refund() { //退款功能\n            System.out.println(&quot;您正在使用微信支付...&quot;);\n            bank.refund();\n            System.out.println(&quot;微信支付使用完毕...&quot;);\n        }\n        //...\n    }\n</code></pre><p>如果以后要再实现其它新的方法时，也要重复上述三个步骤。  </p>\n<p><img src=\"https://github.com/StephenHuge/Markdown_Pic/blob/master/Reflection%20&amp;%20Proxy/微信_静态代理局限.jpg?raw=true\" alt=\"微信_静态代理局限\"></p>\n<p>我们发现，第（3）步中事实上只是继续在“包装”<code>Bank</code>的<code>refund</code>方法前后继续添加提醒功能。其内容和<code>pay</code>以及<code>gathering</code>方法几乎一样，这样做其实导致业务代码中夹杂了大量的重复的提醒代码，做了大量不必要的重复性工作，同时系统的冗余大量增加。</p>\n<p><img src=\"https://github.com/StephenHuge/Markdown_Pic/blob/master/Reflection%20&amp;%20Proxy/%E9%9D%99%E6%80%81%E4%BB%A3%E7%90%86%E4%BB%A3%E7%A0%81.jpg?raw=true\" alt=\"静态代理代码\"></p>\n<p>提醒代码事实上只有一份就足够了。如何实现呢？<br>我们希望可以一次性实现这个功能，之后我们不再需要对每个具体的被代理方法实现对应的代理方法。这叫做<strong>针对某一类功能实现</strong>：例如说提示功能，不需要每个业务方法都有一个对应的带提醒的“包装”方法，而是最好由一个类或者一个方法直接实现所有的提醒功能，类似可以实现的功能还有日志打印。<br>这时不得不提一个很厉害的工具——<strong>动态代理</strong>。</p>\n<p>动态代理正是为了解决代理类中代码爆炸的问题而出现的。具体实现为：在运行状态中，需要代理的地方，根据代理接口和被代理类，动态地创建一个代理类，用完之后，就会销毁，无需我们手动去创建代理类，这样就可以避免了代理类角色的<code>class</code>在系统中代码冗杂的问题了。  </p>\n<h2 id=\"2-动态代理\"><a href=\"#2-动态代理\" class=\"headerlink\" title=\"2. 动态代理\"></a>2. 动态代理</h2><p>上述的问题使用动态代理该怎么做呢？我们看代码：<br>动态代理类NewWeChatPay.java</p>\n<pre><code>    public class NewWeChatPay implements InvocationHandler {\n\n        private Object obj;\n\n        public NewWeChatPay(Object obj) {\n            this.obj = obj;\n        }\n\n        @Override\n        public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n\n            System.out.println(&quot;您正在使用微信支付...&quot;);\n\n            Object result = method.invoke(obj, args);\n\n            System.out.println(&quot;微信支付使用完毕...&quot;);\n\n            return result;\n        }\n    }\n</code></pre><p>在这里<code>NewWeChatPay</code> 是一个新的微信支付类，它实现了<code>InvocationHandler</code>接口。这个接口是个调用处理器，每当我们生成的代理类执行方法时，都会调用这个接口实现类的方法。我们先不着急了解它的原理，因为在下一篇文章中会详细阐述。   </p>\n<p>测试类 DynamicTest.java</p>\n<pre><code>    import java.lang.reflect.InvocationHandler;\n    import java.lang.reflect.Proxy;\n\n    public class DynamicTest {\n        public static void main(String[] args) throws Throwable {\n\n            Bank construction = new Bank();  //这是一个银行实例\n\n            InvocationHandler handle = new NewWeChatPay(construction); //新建一个微信支付调用处理器\n\n            ClassLoader loader = handle.getClass().getClassLoader(); //获取加载handle的类加载器\n\n            Class[] interfaces = construction.getClass().getInterfaces();  //获取银行实现的接口\n\n\n            InvocationHandler h = handle;\n\n            Object proxy = Proxy.newProxyInstance(loader, interfaces, h);     //这一句生成了代理银行的微信支付类\n\n            WealthManagement myProxy = (WealthManagement) proxy;\n\n            myProxy.pay();    //微信支付代理类执行pay方法\n\n        }\n    }\n</code></pre><p>打印结果：</p>\n<pre><code>您正在使用微信支付...\n使用银行的付款功能\n微信支付使用完毕...\n</code></pre><p>看着很长，但是大家不要怕，其实主要就一句：</p>\n<pre><code>Object proxy = Proxy.newProxyInstance(loader, interfaces, h);     //这一句生成了代理银行的微信支付类\n</code></pre><p>调用<code>Proxy</code>类的<code>newProxyInstance()</code>方法生成了一个代理类实例，这个实例就是我们需要的代理类。<br>我们发现，在使用动态代理之后，的确减少了代码量。之前<code>Bank</code>类的每个方法都需要代理类实现对应的方法，而现在，只需要<code>NewWeChatPay</code>类中的一个<code>invoke</code>方法就可以完成多个方法的代理。<br>在动态代理中生成的代理类是一个临时的类，我们的代理类需要实现<code>Bank</code>类所实现的接口，所以传入了<code>Bank</code>实现的接口，传入其类加载器是为了确认这些接口的Class类对象和动态代理类的Class对象都是被同一个类加载器加载的，最后的<code>InvocationHandler</code>接口的实例就是我们之前创建好的调用处理器。<br><img src=\"https://github.com/StephenHuge/Markdown_Pic/blob/master/Reflection%20&amp;%20Proxy/%E5%BE%AE%E4%BF%A1_%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E5%85%B3%E7%B3%BB.jpg?raw=true\" alt=\"动态代理关系\"></p>\n<p>在接下来的一篇文章中，我们会详细探讨<code>Proxy</code>类的<code>newProxyInstance()</code>方法生成临时代理类的过程。</p>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><p>[1] <a href=\"http://blog.csdn.net/luanlouis/article/details/24589193#t2\" target=\"_blank\" rel=\"noopener\">Java动态代理机制详解（JDK 和CGLIB，Javassist，ASM）</a>  </p>\n","link":"","permalink":"https://stevehuge.github.io/2017/08/20/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%861/","categories":[],"tags":[{"name":"设计模式","slug":"设计模式","permalink":"https://stevehuge.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"},{"name":"Spring","slug":"Spring","permalink":"https://stevehuge.github.io/tags/Spring/"},{"name":"AOP","slug":"AOP","permalink":"https://stevehuge.github.io/tags/AOP/"},{"name":"Proxy","slug":"Proxy","permalink":"https://stevehuge.github.io/tags/Proxy/"}]},{"title":"JDBC的总结","date":"2017-08-06T10:56:27.000Z","path":"2017/08/06/JDBC总结/","content":"<p><img src=\"https://github.com/StephenHuge/Markdown_Pic/blob/master/JDBC/top.jpg?raw=true\" alt=\"JDBC top\">  </p>\n<a id=\"more\"></a>\n<h1 id=\"记录JDBC的学习过程\"><a href=\"#记录JDBC的学习过程\" class=\"headerlink\" title=\"记录JDBC的学习过程\"></a>记录JDBC的学习过程</h1><h2 id=\"学习心得\"><a href=\"#学习心得\" class=\"headerlink\" title=\"学习心得\"></a>学习心得</h2><p>　　最近两周总结了一下JDBC的大致原理和一些API的使用。 </p>\n<h2 id=\"JDBC\"><a href=\"#JDBC\" class=\"headerlink\" title=\"JDBC\"></a>JDBC</h2><p>　　整体来说，JDBC是一组公共接口，用来确定如何让应用程序和数据库打交道，而各个数据库厂商会针对JDBC公共接口提供自己的实现类。  </p>\n<p>项目在GitHub上的地址：<a href=\"https://github.com/StephenHuge/MyJDBCReWrite\" target=\"_blank\" rel=\"noopener\">https://github.com/StephenHuge/MyJDBCReWrite</a><br>其中分为6个包：<br><strong><a href=\"https://github.com/StephenHuge/MyJDBCReWrite/tree/master/src/com/jdbc/common\" target=\"_blank\" rel=\"noopener\">com.jdbc.common</a>：存储一些JDBC的基础知识</strong>  </p>\n<p><strong><a href=\"https://github.com/StephenHuge/MyJDBCReWrite/tree/master/src/com/jdbc/extensions\" target=\"_blank\" rel=\"noopener\">com.jdbc.extensions</a>： 存储一些初基础之外接近扩展工具的知识</strong>  </p>\n<p><strong><a href=\"https://github.com/StephenHuge/MyJDBCReWrite/tree/master/src/com/jdbc/transaction\" target=\"_blank\" rel=\"noopener\">com.jdbc.transaction</a>： 存储JDBC中关于数据库事务的知识</strong>  </p>\n<p><strong><a href=\"https://github.com/StephenHuge/MyJDBCReWrite/tree/master/src/com/jdbc/connectionpool\" target=\"_blank\" rel=\"noopener\">com.jdbc.connectionpool</a>： 存储JDBC中关于数据库连接池的知识</strong>  </p>\n<p><strong><a href=\"https://github.com/StephenHuge/MyJDBCReWrite/tree/master/src/com/jdbc/dbutilstest\" target=\"_blank\" rel=\"noopener\">com.jdbc.dbutilstest</a>： 存储对Apache开发的一个工具类DBUtils的简单测试</strong>  </p>\n<p><strong><a href=\"https://github.com/StephenHuge/MyJDBCReWrite/tree/master/src/com/jdbc/mytools\" target=\"_blank\" rel=\"noopener\">com.jdbc.mytools</a>： 工具包，存储自己抽取出来的一些工具代码</strong>  </p>\n","link":"","permalink":"https://stevehuge.github.io/2017/08/06/JDBC%E6%80%BB%E7%BB%93/","categories":[],"tags":[{"name":"数据库","slug":"数据库","permalink":"https://stevehuge.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"JDBC","slug":"JDBC","permalink":"https://stevehuge.github.io/tags/JDBC/"},{"name":"Hibernate","slug":"Hibernate","permalink":"https://stevehuge.github.io/tags/Hibernate/"}]},{"title":"聊赖一记","date":"2017-05-05T13:22:07.000Z","path":"2017/05/05/聊赖一记/","content":"<p><img src=\"https://github.com/StephenHuge/Markdown_Pic/blob/master/%E9%9A%8F%E7%AC%94/%E6%A1%83%E8%8A%B1.jpg?raw=true\" alt=\"\"><br><a id=\"more\"></a><br>　这两天可以说是百无聊赖了。</p>\n<p>　　自从5.1放假之后，状态就不是很好。做完一个和手头项目不相关的实验，仿佛用掉了大部分的力气。现在便是和以前有段时间一样——脑袋昏沉不已，仿若脑中被抽成了真空，没有一丝的声音，也没有一丝的光线。而这种状态，经常如同春末夏初的风和雨，说来便来，说走就走。而我，对此无可奈何，任何尝试性的努力，看再多的鸡汤文也无济于事。只能等啊、等啊，等到这股无形的劲儿过去了，一切便风轻云淡，一如从前了。<br>　　风还在刮，这八楼的风一如从前，每到换季的日子，这些从西伯利亚吹来的冷空气，便又开始喋喋不休地在窗外回旋。而楼下刚开的丁香花，在这一轮又一轮的风中，瑟缩颤抖，直到被吹落到地上，再被风给卷起，不知飘到何处去了。寥落，便是这些花中一大部分成员的一生。春风来了，她们便也跟着来了，季风来了，她们也就跟着这风，这雨，一起飘到城市的另一端去了。<br>　　还记得前两天这些花刚绽放时，都是一簇簇，一团团地开，极美却又绝不妖艳。那花儿，缩成一小团却每团却又通透的紧，如同一个个刚出锅的糯米团，给人一种软软的很轻柔的亲切，又如同一颗颗月中时分的小月亮，透着明亮、干净，而又馨香馥郁。<br>　　来这科学园的人不少，大多数都是附近的白领，周末带着孩子来游玩。往往是一家三口，拍照的、小孩子玩轮滑的，一番和谐气象。在这些花、这些树的下面，便都是快乐的声音，这声音往往极富感染力，让你不由自主的亲近，不，应该是沉浸，沉浸在快乐和和谐交织的情境中，总能回忆起家的温馨、家的舒适自如。而过后的，便是怅然若失。<br>　　平日里总是一个人，幽寂得活着，不跟身边的人交流，而自己也在日复一日的沉默寡言和患得患失中，沉沦了。读书是个很好的消解寂寞的方式，但沉沦的人往往静不下心来，尝试这古老却又流行的法子。沉沦的人会出去闲逛，在春日的俯视下，在心中有无限沟壑却因不知如何表达的情况下，面沉如水。去逛逛吧，这是他对自己说的话。他也是这么做的，提着自己的身体，仰望园中各类的古树名木，静静地走一圈，又走一圈。身体累了，他便在园中随意找个地方，席地而坐，休息一会儿，但想来却也说不出什么名堂来。<br>…</p>\n","link":"","permalink":"https://stevehuge.github.io/2017/05/05/%E8%81%8A%E8%B5%96%E4%B8%80%E8%AE%B0/","categories":[],"tags":[{"name":"随笔","slug":"随笔","permalink":"https://stevehuge.github.io/tags/%E9%9A%8F%E7%AC%94/"}]},{"title":"我的git使用教程2","date":"2017-05-04T15:00:48.000Z","path":"2017/05/04/我的git使用教程2/","content":"<p><img src=\"https://github.com/StephenHuge/Markdown_Pic/blob/master/%E6%88%91%E7%9A%84Git%E6%95%99%E7%A8%8B/Git.jpg?raw=true\" alt=\"Git\"></p>\n<h1 id=\"为仓库创建一个分支（branch）\"><a href=\"#为仓库创建一个分支（branch）\" class=\"headerlink\" title=\"为仓库创建一个分支（branch）\"></a>为仓库创建一个分支（branch）</h1><p>现在我们有个提交过几次的git仓库，如果我们想在给我们的项目加点测试的东西，而又不想留一份原始不被影响的代码。传统的做法是复制项目，创建一个副本项目，在副本项目中进行测试，这样原来的项目不会受到影响。<br>这样看似不错，但是万一我们觉得测试代码不错，想要把它放进原始项目中，我们又不得不把测试代码复制到原始项目中（测试副本要不断进行新的开发），多来几次，万一其中有次出现了错误而没有发现，那修改就很麻烦了。<br>不过不用担心，git提供了另一个很有用的功能——分支(branch)。使用它能多层次、用户进行开发，十分便于管理且提升了效率。版本控制软件的好处就是你可以回到任何一个之前的开发版本中，而分支功能能很好在不影响稳定代码的情况下，允许我们进行更多操作，快来学习一下吧。分支的建立详细参见<a href=\"https://git-scm.com/book/zh/v1/Git-%E5%88%86%E6%94%AF-%E5%88%86%E6%94%AF%E7%9A%84%E6%96%B0%E5%BB%BA%E4%B8%8E%E5%90%88%E5%B9%B6\" target=\"_blank\" rel=\"noopener\" title=\"Git分支 - 分支的新建与合并\">Git分支 - 分支的新建与合并</a>。<br><a id=\"more\"></a><br>1.在git bash中输入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b develop\t&#x2F;&#x2F;创建并切换到develop</span><br></pre></td></tr></table></figure><br> 这句话等价于<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch develop\t&#x2F;&#x2F;创建develop分支</span><br><span class=\"line\">git checkout develop\t&#x2F;&#x2F;切换到develop分支</span><br></pre></td></tr></table></figure><br>我们现在处于develop分支中，与原来的master分支相对应，develop就是一个git分支，我们可以在develop分支中对代码进行各种修改，添加，删除操作，提交后（这个不能忘记），这些操作只会修改develop分支中的内容，而对主分支master不会造成任何影响。如果修改出现了问题，想要回到之前的master分支，只需要输入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout master\t&#x2F;&#x2F;回到master主分支</span><br></pre></td></tr></table></figure><br> 就可回到主分支了。<br>2.如果在develop中开发了一段时间中，觉得代码已经稳定了，想要将develop分支合并到主分支去,那么git也提供合并操作。具体做法是：切换到主分支（不要忘记）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout master\t&#x2F;&#x2F;回到master主分支</span><br></pre></td></tr></table></figure><br> 合并分支<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git merge develop\t&#x2F;&#x2F;合并master和develop</span><br></pre></td></tr></table></figure><br> 这样master分支和develop分支就合并到一起了，之前在develop分支开发的版本仍然存在，但是如果觉得develop版本已经没用了，以后不会再用到它，那么可以使用删除操作<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -d develop\t&#x2F;&#x2F;删除develop分支</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"为项目添加-gitignore文件\"><a href=\"#为项目添加-gitignore文件\" class=\"headerlink\" title=\"为项目添加.gitignore文件\"></a>为项目添加.gitignore文件</h1><p>虽然上面的方法能帮助我们成功的将项目托管到GitHub上，但是总会遇到一些不完全如我们愿的事情。  </p>\n<p><center>![生成.gitigore文件之前](https://github.com/StephenHuge/Markdown_Pic/blob/master/%E6%88%91%E7%9A%84Git%E6%95%99%E7%A8%8B/gitignore之前.jpg?raw=true)</center><br>如图所示，我们把一个在eclipse上完成的项目上传到GitHub上。但是发现项目中的一些不想或者不必要上传的文件或文件夹也被上传了，例如其中的bin文件夹是存放由.java文件编译成的.class文件的地方，.class文件是虚拟机执行的文件，所以这是一个不必要上传的文件夹。事实上，如图中的bin文件夹、.setting文件夹、.classpath文件和.project文件都是不必要上传的。<br>怎么样能不上传这些文件和文件夹呢？一个不错的答案是每次使用<code>git add</code> 的时候手动添加文件盒文件夹，把这些文件不添加就行了。这可能在文件比较少的时候可行，如果遇到一个较大的项目，动辄几百个文件，手动添加就太耗费精力了，而且也没有必要。<br>其实Git已经给我们提供成熟的工具——<code>.gitignore</code> 文件，只要在<code>.gitignore</code> 文件中添加忽略路径就能达到有选择性的上传文件了，一起来学习一下。<br>在项目文件夹下打开git bash，输入：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch .gitignore    &#x2F;&#x2F;生成.gitigore文件</span><br></pre></td></tr></table></figure><br>之后.gitignore文件就由Git自动生成了，打开<code>.gitignore</code> 文件，我以上面图中的项目为例，在里面添加如下字段：</p>\n<blockquote>\n<p>bin/<br>.settings<br>.classpath<br>.project  </p>\n</blockquote>\n<p>这样上面提到的文件和文件夹都可以被过滤掉了。之后继续输入：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rm -r --cached .&#x2F;&#x2F;清空缓存      </span><br><span class=\"line\">git add .&#x2F;&#x2F;重新提交     </span><br><span class=\"line\">git commit -m &quot;update .gitignore&quot;       </span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure></p>\n<p>效果如图：  </p>\n<p><center>![生成.gitigore文件之后](https://github.com/StephenHuge/Markdown_Pic/blob/master/%E6%88%91%E7%9A%84Git%E6%95%99%E7%A8%8B/gitignore之后.jpg?raw=true)  </center><br><img src=\"https://github.com/StephenHuge/Markdown_Pic/blob/master/%E6%88%91%E7%9A%84Git%E6%95%99%E7%A8%8B/gitignore%E8%BF%87%E6%BB%A4%E8%A7%84%E5%88%99.jpg?raw=true\" alt=\"具体过滤规则\"></p>\n<h1 id=\"撤销未提交的修改\"><a href=\"#撤销未提交的修改\" class=\"headerlink\" title=\"撤销未提交的修改\"></a>撤销未提交的修改</h1><p>例如对<code>README.md</code>文件进行了修改，之后发现提交不必要，使用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -- README.md</span><br></pre></td></tr></table></figure>\n<p>则能取消修改，回到之前文件未修改的状态。</p>\n<h1 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h1><p>[1] <a href=\"https://zhidao.baidu.com/question/2053485325521871027.html\" target=\"_blank\" rel=\"noopener\">如何创建.gitignore文件，忽略不必要提交的文件</a><br>[2] <a href=\"http://blog.csdn.net/qq_32388047/article/details/67724085\" target=\"_blank\" rel=\"noopener\">git更新.gitignore后如何提交</a></p>\n","link":"","permalink":"https://stevehuge.github.io/2017/05/04/%E6%88%91%E7%9A%84git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B2/","categories":[],"tags":[{"name":"环境搭建","slug":"环境搭建","permalink":"https://stevehuge.github.io/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"},{"name":"git","slug":"git","permalink":"https://stevehuge.github.io/tags/git/"}]},{"title":"我的git使用教程1","date":"2017-05-03T15:00:48.000Z","path":"2017/05/03/我的git使用教程1/","content":"<p><img src=\"https://github.com/StephenHuge/Markdown_Pic/blob/master/%E6%88%91%E7%9A%84Git%E6%95%99%E7%A8%8B/Git.jpg?raw=true\" alt=\"Git\"></p>\n<h1 id=\"将一个项目放到GitHub上\"><a href=\"#将一个项目放到GitHub上\" class=\"headerlink\" title=\"将一个项目放到GitHub上\"></a>将一个项目放到GitHub上</h1><hr>\n<p>Git是一个分布式的代码托管仓库，是每个程序员必备的工具。<br><a id=\"more\"></a><br>前提：</p>\n<ul>\n<li>有一个GitHub账号</li>\n<li>本地已经安装Git</li>\n<li>github账号已经绑定本地ssh值</li>\n</ul>\n<p>这是后面步骤的基础，如果没有请参考此教程 <a href=\"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137396287703354d8c6c01c904c7d9ff056ae23da865a000\" target=\"_blank\" rel=\"noopener\" title=\"安装Git\">安装Git</a>，<a href=\"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/0013752340242354807e192f02a44359908df8a5643103a000\" target=\"_blank\" rel=\"noopener\" title=\"Git添加远程仓库\">Git添加远程仓库</a>。</p>\n<p>步骤如下:<br>1.在github上新建一个repository,例如为“swordOffer”，带README.md文件；<br>2.在本地新建文件夹swordOffer，本地的swordOffer已存在的忽略这一步；<br>3.进入swordOffer；<br>4.在swordOffer文件夹内右键打开git bash；<br>5.现在我们github和本地都有文件夹swordOffer，不同的是github上文件夹内有README.md文件，而本地文件夹为空（或者有文件）；<br>6.在本地打开的git bash中输入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br></pre></td></tr></table></figure><br> 进行初始化本地git仓库，本地swordOffer文件夹内会出现一个隐藏的.git文件夹。这个文件夹是本地的仓库，动了会破坏本地仓库，所以不要动它；<br>7.之后我们要做的是将本地和远程联系起来：在远程仓库中找到其地址，例如我的是：<br><a href=\"https://github.com/StephenHuge/swordOffer.git\" target=\"_blank\" rel=\"noopener\">https://github.com/StephenHuge/swordOffer.git</a> 。在git bash中输入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin https:&#x2F;&#x2F;github.com&#x2F;StephenHuge&#x2F;swordOffer.git</span><br></pre></td></tr></table></figure><br> 之后没有什么报错的话就是成功了，现在本地仓库和远程仓库绑到一起了；<br>8.由于远程仓库中相比本地仓库还有一个README.md文件，所以我们必须先将这个文件同步到本地，之后才能在本地进行添加上传动作。git bash中输入：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull origin master --allow-unrelated-histories</span><br></pre></td></tr></table></figure><br> pull是拉的意思，这个命令将README文件“拉”到本地来。此时本地会出现一个README文件。<br>9.之后我们就可以在本地添加代码了，写好之后，输入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .\t&#x2F;&#x2F;添加修改</span><br></pre></td></tr></table></figure><br>进行添加修改，其中的<code>.</code>表示添加所有已编辑文件，然后输入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m &quot;**&quot;\t\t&#x2F;&#x2F;提交修改，**为本次修改的大概描述</span><br></pre></td></tr></table></figure><br>进行提交，可以使用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status\t\t&#x2F;&#x2F;查看Git状态</span><br></pre></td></tr></table></figure><br>来查看当前的Git状态，显示更改已经全部提交，之后输入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push -u origin master</span><br></pre></td></tr></table></figure><br>push是推的意思，将本地代码“推”到远程仓库中。”-u”选项的意思是指定一个默认主机，第一次输入需要使用”-u”，以后可以不加任何参数使用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push</span><br></pre></td></tr></table></figure><br>或者<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin master</span><br></pre></td></tr></table></figure><br>进行提交。刷新github的页面，就会发现代码已经上传到远程仓库上了；<br>10.一段时间后又有新代码写好，要同步，add和commit按照第9步来，就可以直接推送了。<br>11.在github网页上改动了文件，需要同步到本地，本地应该怎么操作呢？在网页上修改了文件后，保存，然后在本地git bash中输入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull origin</span><br></pre></td></tr></table></figure><br> 就完成了远程修改。  </p>\n","link":"","permalink":"https://stevehuge.github.io/2017/05/03/%E6%88%91%E7%9A%84git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B1/","categories":[],"tags":[{"name":"环境搭建","slug":"环境搭建","permalink":"https://stevehuge.github.io/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"},{"name":"git","slug":"git","permalink":"https://stevehuge.github.io/tags/git/"}]},{"title":"使用Hexo+github搭建个人博客","date":"2017-05-01T10:11:35.000Z","path":"2017/05/01/使用Hexo-github搭建个人博客/","content":"<h1 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a><strong>环境搭建</strong></h1><p>使用Hexo+github搭建个人博客。<br><a id=\"more\"></a><br>由于本文只是一个对于搭建博客过程的记录而不是教程，所以仅供参考。想要详细的教程请参考参考文章中的第一篇。<br>需要的具体环境有：<br>Node.js<br>Git<br>GitHub账号<br>Hexo<br>简单介绍一下，Node.js 是一个Javascript运行环境，是一个基于Javascipt，性能十分优秀的前端框架。Git就不说了，是一个分布式的代码托管仓库。程序员必备工具，如果你还不会，赶紧去学，这里有篇很好的教程 <a href=\"https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\" target=\"_blank\" rel=\"noopener\">廖雪峰的Git教程</a> 。<br><br>而GitHub是一个基于Git的线上代码托管仓库，你可以把你的代码上传到网站服务器进行托管。GitHub在这里充当的角色是服务器，通过访问你的线上仓库你就可以使用个人博客了~<br>当然只有这些还不够，之后是Hexo的安装，Hexo是一个开源的静态博客生成器，基于Node.js开发。安装结束后就可以进行博客的写作了。</p>\n<h1 id=\"个人博客的维护\"><a href=\"#个人博客的维护\" class=\"headerlink\" title=\"个人博客的维护\"></a><strong>个人博客的维护</strong></h1><p>这个部分可以分为两个部分：1.主题更换；2.发布文章。</p>\n<h2 id=\"主题更换\"><a href=\"#主题更换\" class=\"headerlink\" title=\"主题更换\"></a><strong>主题更换</strong></h2><p>主题就是基于个人博客的页面布局等具体结构的封装文件。每个不同的主题有不同的页面布置，操作方式等。<br>我用的主题是<a href=\"https://github.com/giscafer/hexo-theme-cafe\" target=\"_blank\" rel=\"noopener\">cafe</a>，将其下载下来放到Hexo安装目录下themes文件夹中，例如我的Hexo安装位置是G:\\Blog，cafe的位置是G:\\Blog\\themes\\cafe。<br>在Hexo中有两份配置文件，名称均为 _config.yml，一份位于站点根目录下，主要包含Hexo本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的各类选项。下面举例说明一下：<br>在G:\\Blog下的 _config.yml是整个<b>网站的配置文件</b>，而在G:\\Blog\\themes\\cafe\\下还有一个 _config.y文件，这个文件是cafe<b>主题的配置文件</b>。<br><b>主题配置文件</b>由主题作者提供，如何进行配置，主题作者都会在README中详细说明，例如主题cafe的 <a href=\"https://github.com/giscafer/hexo-theme-cafe/blob/master/README.md\" target=\"_blank\" rel=\"noopener\">cafe的README文件</a>，故在此不再详述。<br>而<b>网站配置文件</b>是通用的。其中一般包括网站名称、作者（你的名字）、语言、友情链接等设置。其中重要的是两个：theme和repo（线上仓库的位置）。例如我的是：<br><img src=\"http://img.blog.csdn.net/20170501164908990?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcG9tb255MQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"Hexo配置\"><br>其中theme是cafe，这样我就可以用cafe主题了。而deploy中type为git，repo为我自己在github中的io仓库。这样主题设置完成了。具体设置参见参考文章的第一个连接，其中有详细说明。</p>\n<h2 id=\"发布文章\"><a href=\"#发布文章\" class=\"headerlink\" title=\"发布文章\"></a><strong>发布文章</strong></h2><p>新建一篇博客：<br>打开cmd（我用的是Windows，Linux用户直接Ctrl+Shift+T打开terminal），进入到Hexo的安装目录下，输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new post &quot;article title&quot;</span><br></pre></td></tr></table></figure>\n<p>其中<code>article title </code>是你的文章题目。这时候在安装目录下的source_posts文件夹下将看到  article title.md  文件，用MarkDown编辑器（我用的是MarkdownPad 2）打开就可以编辑文章了。文章编辑好之后保存，可以先预览一下我们写好的文章。运行命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g\t&#x2F;&#x2F;部署文章</span><br><span class=\"line\">hexo server -p 4000\t&#x2F;&#x2F;打开本地server</span><br></pre></td></tr></table></figure><br>第二句执行完效果如图  </p>\n<center>![hexoServer](https://github.com/StephenHuge/Markdown_Pic/blob/master/我的Git教程/hexoServer.jpg?raw=true)</center>\n\n<p>第二句的操作的作用是打开本地的server。其中-p为设置端口（port）操作，数字4000为默认端口，如果端口4000被占用也可以用别的数字。<br>之后通过访问 <a href=\"http://localhost:4000\" target=\"_blank\" rel=\"noopener\" title=\"http://localhost:4000\">http://localhost:4000</a> 即可预览我们部署好的文章。如果有排版或内容问题则继续修改，在本地修改好之后，执行 <code>hexo g</code> 重新部署。确认无误后，在远程生成文章<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo d\t&#x2F;&#x2F;生成</span><br></pre></td></tr></table></figure><br>部署成功后访问你的远程地址，例如我的是<a href=\"https://stephenhuge.github.io/\" target=\"_blank\" rel=\"noopener\">https://stephenhuge.github.io/</a>，打开就可以看到生成的文章了。<br>当然如果不需要在本地预览时，文章写好之后可以直接在git bash执行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo d -g &#x2F;&#x2F;在部署前生成</span><br></pre></td></tr></table></figure></p>\n<p>这句等价于</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g\t&#x2F;&#x2F;部署\t</span><br><span class=\"line\">hexo d\t&#x2F;&#x2F;生成</span><br></pre></td></tr></table></figure>\n<p>之后访问远程地址也能看到生成好的文章。<br>ps:如果提示</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deployer not found:git</span><br></pre></td></tr></table></figure>\n<p>则是没有安装扩展，输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n<p>即可。</p>\n<h1 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a><strong>参考文章</strong></h1><p>[1] 安装教程  <a href=\"http://blog.csdn.net/gdutxiaoxu/article/details/53576018\" target=\"_blank\" rel=\"noopener\">手把手教你用Hexo+Github 搭建属于自己的博客</a></p>\n<p>[2] 主题配置 <a href=\"http://www.zipperary.com/2013/05/29/hexo-guide-3/\" target=\"_blank\" rel=\"noopener\">hexo系列教程：（三）hexo博客的配置、使用</a></p>\n<p>[3] 遇到各种问题  <a href=\"https://segmentfault.com/q/1010000003870970\" target=\"_blank\" rel=\"noopener\">使用localhost:4000访问本地blog一直无响应</a></p>\n<p>[4] 遇到各种问题  <a href=\"http://bbs.csdn.net/topics/390538669\" target=\"_blank\" rel=\"noopener\">网站处于联机状态,但未对连接尝试做出响应</a></p>\n<p><strong>扩展阅读</strong></p>\n<p><a href=\"http://baixin.io/2016/10/jekyll_tutorials1/\" target=\"_blank\" rel=\"noopener\">Jekyll搭建个人博客</a></p>\n","link":"","permalink":"https://stevehuge.github.io/2017/05/01/%E4%BD%BF%E7%94%A8Hexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/","categories":[],"tags":[{"name":"环境搭建","slug":"环境搭建","permalink":"https://stevehuge.github.io/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"},{"name":"hexo","slug":"hexo","permalink":"https://stevehuge.github.io/tags/hexo/"}]}]